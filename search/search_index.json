{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"cms/architecture/","text":"Architecture WebSight CMS is a Java -based Apache Sling content-centric application built on top of a Java Content Repository (JCR) . It uses Apache Jackrabbit Oak as the JCR implementation supporting various Node Storages (e.g Segment Tar, Document Storage). The application runtime is based on the Apache Felix (OSGi) framework. WebSight CMS is delivered as a single Sling Feature Model aggregating all its dependencies and configurations. It can be easily extended and packaged into a container image. Node Storage Document Storage is designed for scalability and reliability. It is a good choice for clustered deployments. Segment Tar storage is designed for performance and is a good choice for standalone deployments. WebSight CMS supports both options. MongoDB is a recommended Document Storage implementation for production environments. Segment Tar is a recommended option for development and testing purposes. Project Developers can easily extend the WebSight CMS with custom code. New functionalities can be added as a top-level Sling Feature ( Site Feature ), defining the dependencies and configurations. Combined with CMS Feature, it can be easily assembled into a single distributable unit: Sample project Check the WebSight Starter sample project to see how the custom project can be structured and assembled. Containers Once we have a distributable unit, it is easy to package it into a container image. Working with containers enables consistency and standardization. With Docker, we can use the same tooling to work locally as well as to deploy production environments to the cloud. Deployment WebSight CMS is used both by content authors and site visitors. Authors use the CMS application to manage and publish content. Visitors browse the published pages rendered on request. WebSight CMS uses Kubernetes as the target platform and comes with a Helm chart to simplify the deployment process. You can learn more about the available deployment options in the Deployment section. Next steps As a next step, we encourage you to explore more details about WebSight modules: Layers and Modules Read More Building OSGi applications with Sling Feature Model Why we decided to ship and develop the OSGi application in containers","title":"Architecture"},{"location":"cms/architecture/#architecture","text":"WebSight CMS is a Java -based Apache Sling content-centric application built on top of a Java Content Repository (JCR) . It uses Apache Jackrabbit Oak as the JCR implementation supporting various Node Storages (e.g Segment Tar, Document Storage). The application runtime is based on the Apache Felix (OSGi) framework. WebSight CMS is delivered as a single Sling Feature Model aggregating all its dependencies and configurations. It can be easily extended and packaged into a container image. Node Storage Document Storage is designed for scalability and reliability. It is a good choice for clustered deployments. Segment Tar storage is designed for performance and is a good choice for standalone deployments. WebSight CMS supports both options. MongoDB is a recommended Document Storage implementation for production environments. Segment Tar is a recommended option for development and testing purposes.","title":"Architecture"},{"location":"cms/architecture/#project","text":"Developers can easily extend the WebSight CMS with custom code. New functionalities can be added as a top-level Sling Feature ( Site Feature ), defining the dependencies and configurations. Combined with CMS Feature, it can be easily assembled into a single distributable unit: Sample project Check the WebSight Starter sample project to see how the custom project can be structured and assembled.","title":"Project"},{"location":"cms/architecture/#containers","text":"Once we have a distributable unit, it is easy to package it into a container image. Working with containers enables consistency and standardization. With Docker, we can use the same tooling to work locally as well as to deploy production environments to the cloud.","title":"Containers"},{"location":"cms/architecture/#deployment","text":"WebSight CMS is used both by content authors and site visitors. Authors use the CMS application to manage and publish content. Visitors browse the published pages rendered on request. WebSight CMS uses Kubernetes as the target platform and comes with a Helm chart to simplify the deployment process. You can learn more about the available deployment options in the Deployment section.","title":"Deployment"},{"location":"cms/architecture/#next-steps","text":"As a next step, we encourage you to explore more details about WebSight modules: Layers and Modules","title":"Next steps"},{"location":"cms/architecture/#read-more","text":"Building OSGi applications with Sling Feature Model Why we decided to ship and develop the OSGi application in containers","title":"Read More"},{"location":"cms/architecture/layers-and-modules/","text":"Layers & modules The diagram below represents the WebSight CMS layers and their responsibilities. Layers consist of features (see Sling Feature Model for more details), which are more high-level logical units (like site management or assets management). Layers details This section describes each layer with its responsibilities: Our platform supports multi-site management. Developers can configure site mappings (short URLs, vanity URLs) and restrictions for site components. Sites can have independent release lifecycles or be aggregated into a single container for cost savings. With the sites management feature, authors can drag and drop site components to manage web pages and control their layouts. Clients can reuse our component libraries (Howlite, Bulma) to optimise the time needed to enable site creation or create custom ones. With OSGi pluggability and Sling Feature configurability, our platform is composed of multiple low-level modules (OSGi bundles) organized into more general functionalities called features. While WebSight offers basic core features such as sites and assets management, our clients can also easily add custom features without making modifications to the platform codebase. Moreover, plugins allow clients to extend a user interface beyond the core features with custom actions, panels or even dashboards. React is our first choice for building resource-oriented views. Each view is a single-page application with extension points for dynamically loaded React components. However, adding custom views with other JS Frameworks like Vue.js or Angular is as simple as adding libraries and bootstrapping the app. It is a framework for building extendable web resource-oriented platforms. It separates presentation and business logic layers allowing developers to configure custom views and extend existing ones without modifying the codebase. Its core modules simplify building RESTful APIs, configuring resource-oriented web views and injecting HTML fragments into the existing ones. Built on top of the open-source Apache Software Foundation stack: Apache Sling - a framework for RESTful web applications, Apache Felix - an implementation of the OSGi Framework and Service platform, Apache Jackrabbit Oak - an implementation of Java Content Repository (JCR). We store the content and assets in MongoDB, a scalable and performant NoSQL database. Our clients can switch to other Oak store implementations based on TAR files to decrease costs. Next steps If you want to extend the WebSight CMS with custom features, we encourage you to explore: Developers quick start guide To learn how to deploy the WebSight CMS to the cloud, check: Google Cloud Run Kubernetes","title":"Layers & modules"},{"location":"cms/architecture/layers-and-modules/#layers-modules","text":"The diagram below represents the WebSight CMS layers and their responsibilities. Layers consist of features (see Sling Feature Model for more details), which are more high-level logical units (like site management or assets management).","title":"Layers &amp; modules"},{"location":"cms/architecture/layers-and-modules/#layers-details","text":"This section describes each layer with its responsibilities: Our platform supports multi-site management. Developers can configure site mappings (short URLs, vanity URLs) and restrictions for site components. Sites can have independent release lifecycles or be aggregated into a single container for cost savings. With the sites management feature, authors can drag and drop site components to manage web pages and control their layouts. Clients can reuse our component libraries (Howlite, Bulma) to optimise the time needed to enable site creation or create custom ones. With OSGi pluggability and Sling Feature configurability, our platform is composed of multiple low-level modules (OSGi bundles) organized into more general functionalities called features. While WebSight offers basic core features such as sites and assets management, our clients can also easily add custom features without making modifications to the platform codebase. Moreover, plugins allow clients to extend a user interface beyond the core features with custom actions, panels or even dashboards. React is our first choice for building resource-oriented views. Each view is a single-page application with extension points for dynamically loaded React components. However, adding custom views with other JS Frameworks like Vue.js or Angular is as simple as adding libraries and bootstrapping the app. It is a framework for building extendable web resource-oriented platforms. It separates presentation and business logic layers allowing developers to configure custom views and extend existing ones without modifying the codebase. Its core modules simplify building RESTful APIs, configuring resource-oriented web views and injecting HTML fragments into the existing ones. Built on top of the open-source Apache Software Foundation stack: Apache Sling - a framework for RESTful web applications, Apache Felix - an implementation of the OSGi Framework and Service platform, Apache Jackrabbit Oak - an implementation of Java Content Repository (JCR). We store the content and assets in MongoDB, a scalable and performant NoSQL database. Our clients can switch to other Oak store implementations based on TAR files to decrease costs.","title":"Layers details"},{"location":"cms/architecture/layers-and-modules/#next-steps","text":"If you want to extend the WebSight CMS with custom features, we encourage you to explore: Developers quick start guide To learn how to deploy the WebSight CMS to the cloud, check: Google Cloud Run Kubernetes","title":"Next steps"},{"location":"cms/authors/component-libs/howlite/","text":"Howlite Howlite is a sample component library for WebSight. We used this collection to prepare a demo site called Luna. Our WebSight Docker distribution contains both of them. Check the Getting Started page for information on how to run a local instance to explore more on Howlite and Luna. Components Authoring Guides Accordion and Accordion Item Cards List and Card Item Container CTA and CTAs List Image Logo Cloud Page Section Rich Text Editor Title Quote Layouts List of predefined layouts Grid Resize functionality and breakpoints description","title":"Howlite"},{"location":"cms/authors/component-libs/howlite/#howlite","text":"Howlite is a sample component library for WebSight. We used this collection to prepare a demo site called Luna. Our WebSight Docker distribution contains both of them. Check the Getting Started page for information on how to run a local instance to explore more on Howlite and Luna.","title":"Howlite"},{"location":"cms/authors/component-libs/howlite/#components-authoring-guides","text":"Accordion and Accordion Item Cards List and Card Item Container CTA and CTAs List Image Logo Cloud Page Section Rich Text Editor Title Quote","title":"Components Authoring Guides"},{"location":"cms/authors/component-libs/howlite/#layouts","text":"List of predefined layouts","title":"Layouts"},{"location":"cms/authors/component-libs/howlite/#grid","text":"Resize functionality and breakpoints description","title":"Grid"},{"location":"cms/authors/component-libs/howlite/accordion/","text":"Accordion & Accordion Item An Accordion is an interactive component that can have multiple Accordion Items inside. Each Accordion Item is 'collapsed' by default, and only a title is visible. To open the accordion item, switch editor to the \"Preview\" mode and click on heading. Usage Drag & drop Accordion to a Page Section. Accordion will be prefilled with 3 initial Accordion Items. You can drag & drop additional Accordion Item to Accordion component, or delete unneeded items. You can also move Accordion Items up/down to achieve expected items order. Authorable properties Click (\"Edit\" icon) on Accordion's Item to see its properties: Title - the Accordion's heading. Content - text to be displayed inside the Accordion Item. Click (\"Edit\" icon) on the Accordion component to resize the Accordion as any other component using the Layout tab. (See grid description for details.) Rendered component An example of FAQ Accordion with one item open (in preview mode):","title":"Accordion & Accordion Item"},{"location":"cms/authors/component-libs/howlite/accordion/#accordion-accordion-item","text":"An Accordion is an interactive component that can have multiple Accordion Items inside. Each Accordion Item is 'collapsed' by default, and only a title is visible. To open the accordion item, switch editor to the \"Preview\" mode and click on heading.","title":"Accordion &amp; Accordion Item"},{"location":"cms/authors/component-libs/howlite/accordion/#usage","text":"Drag & drop Accordion to a Page Section. Accordion will be prefilled with 3 initial Accordion Items. You can drag & drop additional Accordion Item to Accordion component, or delete unneeded items. You can also move Accordion Items up/down to achieve expected items order.","title":"Usage"},{"location":"cms/authors/component-libs/howlite/accordion/#authorable-properties","text":"Click (\"Edit\" icon) on Accordion's Item to see its properties: Title - the Accordion's heading. Content - text to be displayed inside the Accordion Item. Click (\"Edit\" icon) on the Accordion component to resize the Accordion as any other component using the Layout tab. (See grid description for details.)","title":"Authorable properties"},{"location":"cms/authors/component-libs/howlite/accordion/#rendered-component","text":"An example of FAQ Accordion with one item open (in preview mode):","title":"Rendered component"},{"location":"cms/authors/component-libs/howlite/cards-list/","text":"Cards List & Card Item The Cards List component can be used to arrange multiple card components on a page. If you have 20 cards, you may want to display them in a grid with 4 items or 5 items per row or as a slider with 4 or 5 cards per slide. A Cards List component makes it easy to quickly switch between different layouts. Cards may contain an image, text and a CTA. Usage Drag & drop the Card List component to a Page section. Cards List is prefilled with 3 initial Card Items. You can drag & drop additional Card Item to the Card List component, or delete unneeded Card Items. Authorable properties Click (\"Edit\" icon) to see all available Cards List properties: You can check an option Display as a slider to switch on the slider mode. The slider is fully responsive and supports touch and swipe navigation as well as mouse drag for the desktop. You can select the Heading level for the Cards headings. Choose the level that is most appropriate from SEO and accessibility perspective (options H1 - H6). You can select the Heading size to increase or decrease cards headings' font size. You can change Items per row for each breakpoint separately. if the slider option is selected, this number will control how many Cards are visible at once (on each slide). You can set the Style for the Cards List using the Style tab. Click (\"Edit\" icon) on Card's Item to see its properties: On the General tab you can add: Title - the Card's Item heading. Content - the text to be displayed in the Card Item. On the Image tab you can add: an Image - you can open the left assets panel and drag&drop an image to the asset section; additionally, you can provide an alternative text (alt) to describe an image. Leave it blank only when the image is purely decorative. You can add CTA to the Card Item as any other CTA component using the Card CTA tab. (See CTA description for details.) Rendered component Here is an example of a Cards List component with 2 Card Items inside. 2 items per row are set. Each Card consists of an image, text and a text link: A Cards List with 5 Card Items and 3 items per row set: A Cards List with 5 Card Items, 3 items per row set and selected slider mode (user can drag cards left/right to see previous or next items): Cards List with three Items with \"Text Centered\" Style variant selected (On Cards List level):","title":"Cards List & Card Item"},{"location":"cms/authors/component-libs/howlite/cards-list/#cards-list-card-item","text":"The Cards List component can be used to arrange multiple card components on a page. If you have 20 cards, you may want to display them in a grid with 4 items or 5 items per row or as a slider with 4 or 5 cards per slide. A Cards List component makes it easy to quickly switch between different layouts. Cards may contain an image, text and a CTA.","title":"Cards List &amp; Card Item"},{"location":"cms/authors/component-libs/howlite/cards-list/#usage","text":"Drag & drop the Card List component to a Page section. Cards List is prefilled with 3 initial Card Items. You can drag & drop additional Card Item to the Card List component, or delete unneeded Card Items.","title":"Usage"},{"location":"cms/authors/component-libs/howlite/cards-list/#authorable-properties","text":"Click (\"Edit\" icon) to see all available Cards List properties: You can check an option Display as a slider to switch on the slider mode. The slider is fully responsive and supports touch and swipe navigation as well as mouse drag for the desktop. You can select the Heading level for the Cards headings. Choose the level that is most appropriate from SEO and accessibility perspective (options H1 - H6). You can select the Heading size to increase or decrease cards headings' font size. You can change Items per row for each breakpoint separately. if the slider option is selected, this number will control how many Cards are visible at once (on each slide). You can set the Style for the Cards List using the Style tab. Click (\"Edit\" icon) on Card's Item to see its properties: On the General tab you can add: Title - the Card's Item heading. Content - the text to be displayed in the Card Item. On the Image tab you can add: an Image - you can open the left assets panel and drag&drop an image to the asset section; additionally, you can provide an alternative text (alt) to describe an image. Leave it blank only when the image is purely decorative. You can add CTA to the Card Item as any other CTA component using the Card CTA tab. (See CTA description for details.)","title":"Authorable properties"},{"location":"cms/authors/component-libs/howlite/cards-list/#rendered-component","text":"Here is an example of a Cards List component with 2 Card Items inside. 2 items per row are set. Each Card consists of an image, text and a text link: A Cards List with 5 Card Items and 3 items per row set: A Cards List with 5 Card Items, 3 items per row set and selected slider mode (user can drag cards left/right to see previous or next items): Cards List with three Items with \"Text Centered\" Style variant selected (On Cards List level):","title":"Rendered component"},{"location":"cms/authors/component-libs/howlite/container/","text":"Container component Container component is used to group content together (inside a Page Section component ). Container renders a simple div html tag without extra styling. Usage If you drag-and-drop a single Container component to the page, you will see a default placeholder. Multiple columns layouts By using containers inside a page section, you can achieve multiple columns layouts. To see this in action, you can drag-and-drop the 4 Columns predefined layout from the Empty Sections group. See the layouts page for details regarding predefined sections. This layout consists of a Page Section component with 4 container components inside. Each container is resized to use 3 out of 12 columns. For resize options description please see the grid page. Authorable properties Click (\"Edit\" icon) on the Container component to see its all editable properties. General tab you can drag-and-drop an image from the left assets panel, to add a background image (for each breakpoint separately). each breakpoint's asset will be rendered on this breakpoint only. For example, if you leave M breakpoint image blank, nothing will be rendered on tablet resolutions. Layout tab and its properties are described here .","title":"Container component"},{"location":"cms/authors/component-libs/howlite/container/#container-component","text":"Container component is used to group content together (inside a Page Section component ). Container renders a simple div html tag without extra styling.","title":"Container component"},{"location":"cms/authors/component-libs/howlite/container/#usage","text":"If you drag-and-drop a single Container component to the page, you will see a default placeholder.","title":"Usage"},{"location":"cms/authors/component-libs/howlite/container/#multiple-columns-layouts","text":"By using containers inside a page section, you can achieve multiple columns layouts. To see this in action, you can drag-and-drop the 4 Columns predefined layout from the Empty Sections group. See the layouts page for details regarding predefined sections. This layout consists of a Page Section component with 4 container components inside. Each container is resized to use 3 out of 12 columns. For resize options description please see the grid page.","title":"Multiple columns layouts"},{"location":"cms/authors/component-libs/howlite/container/#authorable-properties","text":"Click (\"Edit\" icon) on the Container component to see its all editable properties. General tab you can drag-and-drop an image from the left assets panel, to add a background image (for each breakpoint separately). each breakpoint's asset will be rendered on this breakpoint only. For example, if you leave M breakpoint image blank, nothing will be rendered on tablet resolutions. Layout tab and its properties are described here .","title":"Authorable properties"},{"location":"cms/authors/component-libs/howlite/cta/","text":"CTA & CTAs List components CTA component renders a single link (an anchor html tag) with look & feel of a button or text link (look & feel is controlled by style variants ). Usage If you need just a single CTA, you can add it directly to a page section or container. To render multiple CTAs in one row, use CTAs List component first, and add buttons there. Authorable properties Click (\"Edit\" icon) to see all CTA's component's properties: You can provide a Text (label) for the CTA add an URL . It can be either an external link starting with http(s) or an internal link. Type / to enable auto suggestions of internal pages. optionally, you can select if the link should be opened in a new tab , and if it should have an additional icon . Rendered component You can see an example of 2 CTA components inside a CTA list container below: Please note that the CTA component does not have grid options. The width of CTA depends on its text width, and is not aligned to the grid. If multiple CTAs are added directly to a page section, they will stack one below another. (In order to align buttons in one row use the CTA list component.) CTA variants Check the Style tab in the authoring dialog to see the available style variants for a CTA component.","title":"CTA & CTAs List components"},{"location":"cms/authors/component-libs/howlite/cta/#cta-ctas-list-components","text":"CTA component renders a single link (an anchor html tag) with look & feel of a button or text link (look & feel is controlled by style variants ).","title":"CTA &amp; CTAs List components"},{"location":"cms/authors/component-libs/howlite/cta/#usage","text":"If you need just a single CTA, you can add it directly to a page section or container. To render multiple CTAs in one row, use CTAs List component first, and add buttons there.","title":"Usage"},{"location":"cms/authors/component-libs/howlite/cta/#authorable-properties","text":"Click (\"Edit\" icon) to see all CTA's component's properties: You can provide a Text (label) for the CTA add an URL . It can be either an external link starting with http(s) or an internal link. Type / to enable auto suggestions of internal pages. optionally, you can select if the link should be opened in a new tab , and if it should have an additional icon .","title":"Authorable properties"},{"location":"cms/authors/component-libs/howlite/cta/#rendered-component","text":"You can see an example of 2 CTA components inside a CTA list container below: Please note that the CTA component does not have grid options. The width of CTA depends on its text width, and is not aligned to the grid. If multiple CTAs are added directly to a page section, they will stack one below another. (In order to align buttons in one row use the CTA list component.)","title":"Rendered component"},{"location":"cms/authors/component-libs/howlite/cta/#cta-variants","text":"Check the Style tab in the authoring dialog to see the available style variants for a CTA component.","title":"CTA variants"},{"location":"cms/authors/component-libs/howlite/grid/","text":"Grid Resize options Almost all components in Howlite can be resized (inside a Page section component ). In order to resize an Image or Container click (\"Edit\" icon) for the selected component and open the \"Layout\" tab in the dialog. For each breakpoint separately, you can control: the Offset property: for example, if you set it to \"1 Column\" on L breakpoint, the component will be moved 1 column to the right side. the Width property: for example, if you set it to \"6 Columns\" on L breakpoint, the component will be 6 columns wide on the desktop. The above settings will result in the following container size and position: Breakpoints definition Across the Howlite projects the following breakpoints are used: L Breakpoint : 970px and above M Breakpoint : 768px - 969px S Breakpoint : 0 - 767px Additional notes In Howlite the following components intentionally don't have \"resize\" options: CTA - buttons width depends only on its label width Page Section - it's always 12 columns wide in Howlite (but you can resize a container inside if needed)","title":"Grid"},{"location":"cms/authors/component-libs/howlite/grid/#grid","text":"","title":"Grid"},{"location":"cms/authors/component-libs/howlite/grid/#resize-options","text":"Almost all components in Howlite can be resized (inside a Page section component ). In order to resize an Image or Container click (\"Edit\" icon) for the selected component and open the \"Layout\" tab in the dialog. For each breakpoint separately, you can control: the Offset property: for example, if you set it to \"1 Column\" on L breakpoint, the component will be moved 1 column to the right side. the Width property: for example, if you set it to \"6 Columns\" on L breakpoint, the component will be 6 columns wide on the desktop. The above settings will result in the following container size and position:","title":"Resize options"},{"location":"cms/authors/component-libs/howlite/grid/#breakpoints-definition","text":"Across the Howlite projects the following breakpoints are used: L Breakpoint : 970px and above M Breakpoint : 768px - 969px S Breakpoint : 0 - 767px","title":"Breakpoints definition"},{"location":"cms/authors/component-libs/howlite/grid/#additional-notes","text":"In Howlite the following components intentionally don't have \"resize\" options: CTA - buttons width depends only on its label width Page Section - it's always 12 columns wide in Howlite (but you can resize a container inside if needed)","title":"Additional notes"},{"location":"cms/authors/component-libs/howlite/image/","text":"Image component Image components renders and img or picture html tag, with an optional link and alt attribute. Usage Drag & drop image component to a Page section. You will see a default image placeholder. (It is visible in edit mode only). Authorable properties Click (\"Edit\" icon) to see all Image component's properties: You can open the left assets panel and drag & drop an image to the L breakpoint asset section. If only the L breakpoint asset is provided, an img html tag will be rendered with the provided image on all breakpoints. (See breakpoints definition for L, M, S breakpoints width) If additionally the M breakpoint asset is provided, a picture html tag will be rendered and M asset will be used on M and S breakpoints. If additionally the S breakpoint asset is provided, a picture html tag will be rendered and S asset will be used on S breakpoint Please note that only the L breakpoint is required for an image to be rendered on a published page. M and S assets are optional. You can additionally provide an alternative text (alt) to describe the image. Leave it blank only when the image is purely decorative. Optionally you can wrap the image in a link Rendered component If you add an image that is wider than image container, it will have the container width and height respecting the asset ratio. You can see an example of an image with 12 columns width below: You can resize the image container by using the grid options in the layout tab of authoring dialog (See grid description for details). You can see an example of 2-columns-wide image below. Image is shrinked to 2 columns width, and it's height respects the orginal asset ratio. Additional notes When an asset has been deleted and the path to image is no longer valid, a broken icon of an image will be displayed in editor:","title":"Image component"},{"location":"cms/authors/component-libs/howlite/image/#image-component","text":"Image components renders and img or picture html tag, with an optional link and alt attribute.","title":"Image component"},{"location":"cms/authors/component-libs/howlite/image/#usage","text":"Drag & drop image component to a Page section. You will see a default image placeholder. (It is visible in edit mode only).","title":"Usage"},{"location":"cms/authors/component-libs/howlite/image/#authorable-properties","text":"Click (\"Edit\" icon) to see all Image component's properties: You can open the left assets panel and drag & drop an image to the L breakpoint asset section. If only the L breakpoint asset is provided, an img html tag will be rendered with the provided image on all breakpoints. (See breakpoints definition for L, M, S breakpoints width) If additionally the M breakpoint asset is provided, a picture html tag will be rendered and M asset will be used on M and S breakpoints. If additionally the S breakpoint asset is provided, a picture html tag will be rendered and S asset will be used on S breakpoint Please note that only the L breakpoint is required for an image to be rendered on a published page. M and S assets are optional. You can additionally provide an alternative text (alt) to describe the image. Leave it blank only when the image is purely decorative. Optionally you can wrap the image in a link","title":"Authorable properties"},{"location":"cms/authors/component-libs/howlite/image/#rendered-component","text":"If you add an image that is wider than image container, it will have the container width and height respecting the asset ratio. You can see an example of an image with 12 columns width below: You can resize the image container by using the grid options in the layout tab of authoring dialog (See grid description for details). You can see an example of 2-columns-wide image below. Image is shrinked to 2 columns width, and it's height respects the orginal asset ratio.","title":"Rendered component"},{"location":"cms/authors/component-libs/howlite/image/#additional-notes","text":"When an asset has been deleted and the path to image is no longer valid, a broken icon of an image will be displayed in editor:","title":"Additional notes"},{"location":"cms/authors/component-libs/howlite/layouts/","text":"Layouts Layouts are group of components with predefined properties. They are used to define a specific page layout. They can be drag & dropped on a page instead of single components to speed up authoring process. Usage To try it out open a blank page, select a Layouts tab in the left-side panel and drag and drop a 3 columns layout to the main page content. A page section with 3 resized containers will be added on a page. All components that are added on a page with a given layout can be modified, moved or removed (same as regular components). Type of Layouts in Howlite There are two groups of layouts in Howlite: Empty Sections - used to define 1-4 empty columns (containers within a page section): Filled Sections - more complex page sections with some content inside, for example: Call To Action (a page section with full-width image, title and CTAs) Hero (a page section with a title, an image and a mouse icon at the bottom; used at the top of a page) Full Width Image (a page section with a full-width image, a title on the left, and text on the right side) Image Left (a page section with an image on the left, and text on the right side) Image Right (a page section with an image on the right, and text on the left side)","title":"Layouts"},{"location":"cms/authors/component-libs/howlite/layouts/#layouts","text":"Layouts are group of components with predefined properties. They are used to define a specific page layout. They can be drag & dropped on a page instead of single components to speed up authoring process.","title":"Layouts"},{"location":"cms/authors/component-libs/howlite/layouts/#usage","text":"To try it out open a blank page, select a Layouts tab in the left-side panel and drag and drop a 3 columns layout to the main page content. A page section with 3 resized containers will be added on a page. All components that are added on a page with a given layout can be modified, moved or removed (same as regular components).","title":"Usage"},{"location":"cms/authors/component-libs/howlite/layouts/#type-of-layouts-in-howlite","text":"There are two groups of layouts in Howlite: Empty Sections - used to define 1-4 empty columns (containers within a page section): Filled Sections - more complex page sections with some content inside, for example: Call To Action (a page section with full-width image, title and CTAs) Hero (a page section with a title, an image and a mouse icon at the bottom; used at the top of a page) Full Width Image (a page section with a full-width image, a title on the left, and text on the right side) Image Left (a page section with an image on the left, and text on the right side) Image Right (a page section with an image on the right, and text on the left side)","title":"Type of Layouts in Howlite"},{"location":"cms/authors/component-libs/howlite/logo-cloud/","text":"Logo Cloud component Logo Cloud is a container component that is used to display a row of small images (logos). You can add multiple images components inside it. Usage Drag & drop a Logo Cloud component into a Page section. By default, 3 images placeholders will be rendered inside. Authorable properties Click (\"Edit\" icon) to see all Logo Cloud component's properties: You can resize the Logo Cloud as any other component using the Layout tab. (See grid description for details.) Rendered component Logo Cloud with filled images:","title":"Logo Cloud component"},{"location":"cms/authors/component-libs/howlite/logo-cloud/#logo-cloud-component","text":"Logo Cloud is a container component that is used to display a row of small images (logos). You can add multiple images components inside it.","title":"Logo Cloud component"},{"location":"cms/authors/component-libs/howlite/logo-cloud/#usage","text":"Drag & drop a Logo Cloud component into a Page section. By default, 3 images placeholders will be rendered inside.","title":"Usage"},{"location":"cms/authors/component-libs/howlite/logo-cloud/#authorable-properties","text":"Click (\"Edit\" icon) to see all Logo Cloud component's properties: You can resize the Logo Cloud as any other component using the Layout tab. (See grid description for details.)","title":"Authorable properties"},{"location":"cms/authors/component-libs/howlite/logo-cloud/#rendered-component","text":"Logo Cloud with filled images:","title":"Rendered component"},{"location":"cms/authors/component-libs/howlite/page-section/","text":"Page Section component The Page Section component renders a section html tag with a top & bottom padding. It can only be added directly to the Main Content parsys. Usage If you drag & drop a single Page Section to the page, you will see a default placeholder. Page Section components in the Howlite project always have 12 columns. The components added inside can be resized to 1-12 columns. If you need to resize or group content inside a page section use a Container component . Authorable properties Click (\"Edit\" icon) to see all Page Section component's editable properties. you can drag & drop an image from the left assets panel, to add a background image (for each breakpoint separately). each breakpoint's asset will be rendered on this breakpoint only. For example, if you leave M breakpoint image blank, nothing will be rendered on tablet resolutions. Page Section variants Check the Style tab in the authoring dialog to see the available style variants for the Page Section component. Here is an example of a \"Hero with mouse icon\" page section (with some content inside): Please note that Page Section's variants work only with properly structured content inside. In order to speed up the page assembly, Howlite project provides predefined page sections in the layouts left side panel. You can preview different types of Page Section variants with properly structured content, by drag & dropping one of the predefined layouts below to a page. See the layouts page for details.","title":"Page Section component"},{"location":"cms/authors/component-libs/howlite/page-section/#page-section-component","text":"The Page Section component renders a section html tag with a top & bottom padding. It can only be added directly to the Main Content parsys.","title":"Page Section component"},{"location":"cms/authors/component-libs/howlite/page-section/#usage","text":"If you drag & drop a single Page Section to the page, you will see a default placeholder. Page Section components in the Howlite project always have 12 columns. The components added inside can be resized to 1-12 columns. If you need to resize or group content inside a page section use a Container component .","title":"Usage"},{"location":"cms/authors/component-libs/howlite/page-section/#authorable-properties","text":"Click (\"Edit\" icon) to see all Page Section component's editable properties. you can drag & drop an image from the left assets panel, to add a background image (for each breakpoint separately). each breakpoint's asset will be rendered on this breakpoint only. For example, if you leave M breakpoint image blank, nothing will be rendered on tablet resolutions.","title":"Authorable properties"},{"location":"cms/authors/component-libs/howlite/page-section/#page-section-variants","text":"Check the Style tab in the authoring dialog to see the available style variants for the Page Section component. Here is an example of a \"Hero with mouse icon\" page section (with some content inside): Please note that Page Section's variants work only with properly structured content inside. In order to speed up the page assembly, Howlite project provides predefined page sections in the layouts left side panel. You can preview different types of Page Section variants with properly structured content, by drag & dropping one of the predefined layouts below to a page. See the layouts page for details.","title":"Page Section variants"},{"location":"cms/authors/component-libs/howlite/quote/","text":"Quote Component A Quote component displays a block quote with styled quotation marks, quote text, author's name & description. Additionally, it allows including the author's image. Usage Drag & drop Quote to a Page Section. By default a simple quote with \"lorem ipsum\" text is visible. Authorable properties Click (\"Edit\" icon) on the Quote component to see its properties On the General tab you can add: Text - the main content of the quote Author's Name Author's Description Author's Image - if you switch on the toggle additional properties will be visible: Asset section - from the left assets panel you can drag&drop an image to the asset section Additionally, you can provide an alternative text (alt) to describe an image. Leave it blank only when the image is purely decorative. You can change the Style for the Quote using the Style tab. Smaller variant will decrease the quote's font-size. You can also resize the Quote as any other component using the Layout tab. (See grid description for details.) Rendered component An example Quote:","title":"Quote Component"},{"location":"cms/authors/component-libs/howlite/quote/#quote-component","text":"A Quote component displays a block quote with styled quotation marks, quote text, author's name & description. Additionally, it allows including the author's image.","title":"Quote Component"},{"location":"cms/authors/component-libs/howlite/quote/#usage","text":"Drag & drop Quote to a Page Section. By default a simple quote with \"lorem ipsum\" text is visible.","title":"Usage"},{"location":"cms/authors/component-libs/howlite/quote/#authorable-properties","text":"Click (\"Edit\" icon) on the Quote component to see its properties On the General tab you can add: Text - the main content of the quote Author's Name Author's Description Author's Image - if you switch on the toggle additional properties will be visible: Asset section - from the left assets panel you can drag&drop an image to the asset section Additionally, you can provide an alternative text (alt) to describe an image. Leave it blank only when the image is purely decorative. You can change the Style for the Quote using the Style tab. Smaller variant will decrease the quote's font-size. You can also resize the Quote as any other component using the Layout tab. (See grid description for details.)","title":"Authorable properties"},{"location":"cms/authors/component-libs/howlite/quote/#rendered-component","text":"An example Quote:","title":"Rendered component"},{"location":"cms/authors/component-libs/howlite/rte/","text":"RTE Component A Rich Text Editor allows editors to create text content (paragraphs with headings, bullet lists, links and more) across pages. Usage Drag & drop RTE component to a Page Section. A simple paragraph with lorem ipsum content will be rendered on a page: Authorable properties Click ( Edit icon) on the RTE component to see its properties: On the General tab, you can add: Text - with a wide range of functionalities. You can: add a new Paragraph or Heading (with level 1 to 6) select some words and make it bold / italic / underlined or crossed. add a link create bullet points or ordered list align text to the left / center / right or with justify option. add a new line ( br html tag). Please note that pressing Enter button in RTE results in a new paragraph. If you click New Line icon - new line will be added inside the same paragraph. clear formatting You can set the Style for the RTE using the Style tab: You can resize the RTE as any other component using the Layout tab. (See grid description for details.) Rendered component RTE with Default style variant: RTE with Checked bullet points style variant:","title":"RTE Component"},{"location":"cms/authors/component-libs/howlite/rte/#rte-component","text":"A Rich Text Editor allows editors to create text content (paragraphs with headings, bullet lists, links and more) across pages.","title":"RTE Component"},{"location":"cms/authors/component-libs/howlite/rte/#usage","text":"Drag & drop RTE component to a Page Section. A simple paragraph with lorem ipsum content will be rendered on a page:","title":"Usage"},{"location":"cms/authors/component-libs/howlite/rte/#authorable-properties","text":"Click ( Edit icon) on the RTE component to see its properties: On the General tab, you can add: Text - with a wide range of functionalities. You can: add a new Paragraph or Heading (with level 1 to 6) select some words and make it bold / italic / underlined or crossed. add a link create bullet points or ordered list align text to the left / center / right or with justify option. add a new line ( br html tag). Please note that pressing Enter button in RTE results in a new paragraph. If you click New Line icon - new line will be added inside the same paragraph. clear formatting You can set the Style for the RTE using the Style tab: You can resize the RTE as any other component using the Layout tab. (See grid description for details.)","title":"Authorable properties"},{"location":"cms/authors/component-libs/howlite/rte/#rendered-component","text":"RTE with Default style variant: RTE with Checked bullet points style variant:","title":"Rendered component"},{"location":"cms/authors/component-libs/howlite/title/","text":"Title component Title component can be used to add a page or section title. Usage Drag & drop title component to a Page section. By default, a placeholder with \"Add your title here\" text is visible: Authorable properties Click (\"Edit\" icon) to see all title component's properties: You can select Title level that is most appropriate from SEO and accessibility perspective (options H1 - H6). You can select Title size to increase or decrease font-size Insert Title text Optionally, you can add an Overline (kicker) above the main title You can resize the title as any other component using the Layout tab. (See grid description for details.) Rendered component","title":"Title component"},{"location":"cms/authors/component-libs/howlite/title/#title-component","text":"Title component can be used to add a page or section title.","title":"Title component"},{"location":"cms/authors/component-libs/howlite/title/#usage","text":"Drag & drop title component to a Page section. By default, a placeholder with \"Add your title here\" text is visible:","title":"Usage"},{"location":"cms/authors/component-libs/howlite/title/#authorable-properties","text":"Click (\"Edit\" icon) to see all title component's properties: You can select Title level that is most appropriate from SEO and accessibility perspective (options H1 - H6). You can select Title size to increase or decrease font-size Insert Title text Optionally, you can add an Overline (kicker) above the main title You can resize the title as any other component using the Layout tab. (See grid description for details.)","title":"Authorable properties"},{"location":"cms/authors/component-libs/howlite/title/#rendered-component","text":"","title":"Rendered component"},{"location":"cms/deployment/gcp-cloud-run/","text":"Deployment to Google Cloud Run Cloud Run is a serverless platform that allows you to run stateless HTTP containers on a fully managed environment. WebSight CMS with its stateful nature is not a perfect fit for Cloud Run, but it's still possible to run it there for development purposes. However, here are some limitations to keep in mind: Lost data on restart: Cloud Run is a stateless platform, which means that any data stored in memory will be lost when the container is restarted. This means that you will lose all your data when you restart the container (e.g. when you deploy new version of the container) . This is not a problem for development purposes, but it's not recommended to use Cloud Run for production deployments. Notice This guide enables running development purposes CMS instance. For a production environment we recommend using Kubernetes deployment with MongoDB Node Store backend. Before you start Make sure you have: your GCP environment set Cloud Run API enabled Run CMS in Cloud Run Choose one of the following options to run the CMS instance on Cloud Run. Sample starter CMS instance With this variant you will deploy a sample CMS instance to Cloud Run using the publicly available websight-cms-starter image of a sample WebSight CMS project . See the available websight-cms-starter image tags with the following command: gcloud artifacts docker tags list \\ europe-docker.pkg.dev/websight-io/public/websight-cms-starter --format = \"table(tag)\" Use the most recent tag to deploy the CMS to Cloud Run by replacing <IMAGE_TAG> and simply run: gcloud run deploy my-websight-cms \\ --image = europe-docker.pkg.dev/websight-io/public/websight-cms-starter:<IMAGE_TAG> \\ --cpu = 2 --memory = 2Gi --no-cpu-throttling \\ --min-instances = 1 --max-instances = 1 --region = europe-west1 \\ --allow-unauthenticated Follow the instructions on the screen. Reply with y if asked whether to allow unauthenticated invocations to make your CMS instance publicly available. The successfull deployment will finish with a message similar to the following: Service [my-websight-cms] revision [my-websight-cms-00001-rlm] has been deployed and is serving 100 percent of traffic. Service URL: https://my-websight-cms-tkcqcyf6ca-ew.a.run.app CMS might need additional 20 seconds to start after the message above. Open the url and login with username wsadmin and password wsadmin . Customized CMS instance In this variant you will deploy your customized WebSight CMS instance to Cloud Run. Start with cloning the websight-cms-starter . Feel free to modify any part of the CMS. You may follow the quick-start guide to learn how to customize the CMS. When you have your changes ready and working locally, follow the steps below to deploy the CMS to Cloud Run. In the root of cloned repository run the following command to build the CMS image in Cloud Build and run the instance in Cloud Run: gcloud run deploy my-websight-cms --source = . \\ --cpu = 2 --memory = 2Gi --no-cpu-throttling \\ --min-instances = 1 --max-instances = 1 \\ --allow-unauthenticated --region = europe-west1 Follow the instructions on the screen. Enable creating Google Artifact Registry if asked (it is required to store the image built in Cloud Build). The build can take up to a couple of minutes. The successfull deployment will finish with a message similar to the following: Service [my-websight-cms] revision [my-websight-cms-00001-6dg] has been deployed and is serving 100 percent of traffic. Service URL: https://my-websight-cms-tkcqcyf6ca-ew.a.run.app CMS might need additional 20 seconds to start after the message above. Open the url and login with username wsadmin and password wsadmin . Customize CMS admin password By default, CMS starts with the wsadmin user with the wsadmin password. To change the password, follow the steps below: Create a secret with the password in Google Secrets Manager following this instruction . use websight-admin-password as the secret name Configure Cloud Run to access websight-admin-password secret following the instructions . Use the default Compute Engine service account email in the New principal textbox: gcloud iam service-accounts list --format = \"table(email)\" \\ --filter = \"displayName:Compute Engine\" Update the CMS service by running (note that all your content changes will be lost ): gcloud run services update my-websight-cms \\ --update-secrets = /run/secrets/admin.password = websight-admin-password:1 \\ --region = europe-west1 Login to the CMS with the new password from the secret. Clean up To delete the environment, the secret, and the custom image from registry, run the following commands: gcloud run services delete my-websight-cms --region = europe-west1 gcloud secrets delete websight-admin-password gcloud artifacts docker images delete \\ europe-west1-docker.pkg.dev/<GCP_PROJECT_ID>/cloud-run-source-deploy/my-websight-cms","title":"Deployment to Google Cloud Run"},{"location":"cms/deployment/gcp-cloud-run/#deployment-to-google-cloud-run","text":"Cloud Run is a serverless platform that allows you to run stateless HTTP containers on a fully managed environment. WebSight CMS with its stateful nature is not a perfect fit for Cloud Run, but it's still possible to run it there for development purposes. However, here are some limitations to keep in mind: Lost data on restart: Cloud Run is a stateless platform, which means that any data stored in memory will be lost when the container is restarted. This means that you will lose all your data when you restart the container (e.g. when you deploy new version of the container) . This is not a problem for development purposes, but it's not recommended to use Cloud Run for production deployments. Notice This guide enables running development purposes CMS instance. For a production environment we recommend using Kubernetes deployment with MongoDB Node Store backend. Before you start Make sure you have: your GCP environment set Cloud Run API enabled","title":"Deployment to Google Cloud Run"},{"location":"cms/deployment/gcp-cloud-run/#run-cms-in-cloud-run","text":"Choose one of the following options to run the CMS instance on Cloud Run.","title":"Run CMS in Cloud Run"},{"location":"cms/deployment/gcp-cloud-run/#sample-starter-cms-instance","text":"With this variant you will deploy a sample CMS instance to Cloud Run using the publicly available websight-cms-starter image of a sample WebSight CMS project . See the available websight-cms-starter image tags with the following command: gcloud artifacts docker tags list \\ europe-docker.pkg.dev/websight-io/public/websight-cms-starter --format = \"table(tag)\" Use the most recent tag to deploy the CMS to Cloud Run by replacing <IMAGE_TAG> and simply run: gcloud run deploy my-websight-cms \\ --image = europe-docker.pkg.dev/websight-io/public/websight-cms-starter:<IMAGE_TAG> \\ --cpu = 2 --memory = 2Gi --no-cpu-throttling \\ --min-instances = 1 --max-instances = 1 --region = europe-west1 \\ --allow-unauthenticated Follow the instructions on the screen. Reply with y if asked whether to allow unauthenticated invocations to make your CMS instance publicly available. The successfull deployment will finish with a message similar to the following: Service [my-websight-cms] revision [my-websight-cms-00001-rlm] has been deployed and is serving 100 percent of traffic. Service URL: https://my-websight-cms-tkcqcyf6ca-ew.a.run.app CMS might need additional 20 seconds to start after the message above. Open the url and login with username wsadmin and password wsadmin .","title":"Sample starter CMS instance"},{"location":"cms/deployment/gcp-cloud-run/#customized-cms-instance","text":"In this variant you will deploy your customized WebSight CMS instance to Cloud Run. Start with cloning the websight-cms-starter . Feel free to modify any part of the CMS. You may follow the quick-start guide to learn how to customize the CMS. When you have your changes ready and working locally, follow the steps below to deploy the CMS to Cloud Run. In the root of cloned repository run the following command to build the CMS image in Cloud Build and run the instance in Cloud Run: gcloud run deploy my-websight-cms --source = . \\ --cpu = 2 --memory = 2Gi --no-cpu-throttling \\ --min-instances = 1 --max-instances = 1 \\ --allow-unauthenticated --region = europe-west1 Follow the instructions on the screen. Enable creating Google Artifact Registry if asked (it is required to store the image built in Cloud Build). The build can take up to a couple of minutes. The successfull deployment will finish with a message similar to the following: Service [my-websight-cms] revision [my-websight-cms-00001-6dg] has been deployed and is serving 100 percent of traffic. Service URL: https://my-websight-cms-tkcqcyf6ca-ew.a.run.app CMS might need additional 20 seconds to start after the message above. Open the url and login with username wsadmin and password wsadmin .","title":"Customized CMS instance"},{"location":"cms/deployment/gcp-cloud-run/#customize-cms-admin-password","text":"By default, CMS starts with the wsadmin user with the wsadmin password. To change the password, follow the steps below: Create a secret with the password in Google Secrets Manager following this instruction . use websight-admin-password as the secret name Configure Cloud Run to access websight-admin-password secret following the instructions . Use the default Compute Engine service account email in the New principal textbox: gcloud iam service-accounts list --format = \"table(email)\" \\ --filter = \"displayName:Compute Engine\" Update the CMS service by running (note that all your content changes will be lost ): gcloud run services update my-websight-cms \\ --update-secrets = /run/secrets/admin.password = websight-admin-password:1 \\ --region = europe-west1 Login to the CMS with the new password from the secret.","title":"Customize CMS admin password"},{"location":"cms/deployment/gcp-cloud-run/#clean-up","text":"To delete the environment, the secret, and the custom image from registry, run the following commands: gcloud run services delete my-websight-cms --region = europe-west1 gcloud secrets delete websight-admin-password gcloud artifacts docker images delete \\ europe-west1-docker.pkg.dev/<GCP_PROJECT_ID>/cloud-run-source-deploy/my-websight-cms","title":"Clean up"},{"location":"cms/deployment/kubernetes/","text":"Deployment with Kubernetes This tutorial explains how to deploy our demo site Luna (see quick start guide ) to the cloud using Kubernetes . In this tutorial we use Google Kubernetes Engine (GKE) but the setup is not limited to Google Cloud Platform (GCP) and can be used with any Kubernetes cluster like Amazon EKS , Azure Kubernetes Service , etc. WebSight Helm chart bootstraps the CMS that supports two types of storage backends: Document Storage (MongoDB) and Segment Storage (TAR) . In this tutorial, we use the MongoDB instance. Before you start Make sure you have: your GCP environment set Google Kubernetes Engine API enabled kubectl installed (if you use Docker Desktop, kubectl should already be installed ) helm installed Step 1: Kubernetes cluster configuration Create a Kubernetes cluster consisting of a single nodes pool with the following configuration: number of nodes: 3 zone: any zone of your choice, e.g. europe-west1-b to place the cluster in Belgium machine type: e2-standard-2 (2 vCPUs, 8 GB memory) gcloud container clusters create my-websight-cms \\ --num-nodes 3 --zone europe-west1-b --machine-type e2-standard-2 Running the command above may take a couple of minutes to finish. It will also configure kubectl to use the cluster. Step 2: Install prerequisites Install an NGINX Ingress Controller helm upgrade --install ingress-nginx ingress-nginx \\ --repo https://kubernetes.github.io/ingress-nginx \\ --namespace ingress-nginx --create-namespace Create cms namespace: kubectl create namespace cms Install MongoDB in the cms namespace using Helm: helm install mongodb oci://registry-1.docker.io/bitnamicharts/mongodb --version 14 .3.0 \\ --set auth.enabled = true \\ --set auth.rootUser = \"mongoadmin\" \\ --set auth.rootPassword = \"mongoadmin\" \\ --set architecture = \"replicaset\" \\ -n cms At the end of the installation, you should see the following message with MongoDB connection details: MongoDB can be accessed on the following DNS name ( s ) and ports from within your cluster: mongodb-0.mongodb-headless.cms.svc.cluster.local:27017 mongodb-1.mongodb-headless.cms.svc.cluster.local:27017 You will use the connection details in the next section. MongoDB For simplicity in this step we use Bitnami MongoDB Helm chart with default configuration for replicaset architecture (2 data-bearing members and 1 arbiter). Step 3: Deploy CMS Create my-websight-cms directory and download the following files into it: Example values.yaml with the configuration for Luna demo site curl -O https://raw.githubusercontent.com/websight-io/charts/main/websight-cms/examples/luna-proxy/values.yaml Nginx configuration for the CMS Proxy curl -O https://raw.githubusercontent.com/websight-io/charts/main/websight-cms/examples/luna-proxy/luna-site.conf.template Find the external IP address of the Ingress Controller in your cluster ( YOUR_CLUSTER_IP ): kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath = '{.status.loadBalancer.ingress[0].ip}' Update the proxy configuration in values.yaml with the IP address from the previous step: proxy : enabled : true env : - name : NGINX_HOST value : <YOUR_CLUSTER_IP>.nip.io sites : - name : luna host : luna.<YOUR_CLUSTER_IP>.nip.io configMapKeyRef : name : luna-site-config key : luna-site.conf.template Deploy the Nginx proxy configuration as a ConfigMap: kubectl create configmap luna-site-config --from-file = luna-site.conf.template -n cms Deploy the CMS using Helm and the configuration from values.yaml (replace <YOUR_CLUSTER_IP> with the IP address from the 2nd step): helm upgrade --install websight-cms websight-cms \\ --repo https://websight-io.github.io/charts \\ --set cms.persistence.mode = mongo \\ --set cms.persistence.mongo.hosts = 'mongodb-0.mongodb-headless.cms.svc.cluster.local:27017\\,mongodb-1.mongodb-headless.cms.svc.cluster.local:27017' \\ --set cms.livenessProbe.initialDelaySeconds = 120 \\ --set cms.ingress.enabled = true \\ --set cms.ingress.host = cms.<YOUR_CLUSTER_IP>.nip.io \\ --namespace cms \\ -f values.yaml --wait It may take about 1-2 minute of minutes to finish. At the end of the installation, you should see the following message: Your release is named websight-cms. Your WebSight CE instance is starting... WebSight instance will be available at: - CMS Panel: http://cms.35.241.128.172.nip.io Sites: - luna: http://luna.35.241.128.172.nip.io Happy WebSight helming! Step 4: Verification Check the Kubernetes Workloads Dashboard to verify that all pods are running. Open the WebSight CMS admin panel on http://cms.<YOUR_CLUSTER_IP>.nip.io/ (SSL is not covered in this guide). Use the credentials wsadmin / wsadmin to log in. Publish some Luna pages (see Publish demo site guide for help). Open http://luna.<YOUR_CLUSTER_IP>.nip.io/ to see the demo page. Cleanup When finished, you can delete your Kubernetes cluster along with all workloads using: gcloud container clusters delete my-websight-cms --zone europe-west1-b","title":"Deployment with Kubernetes"},{"location":"cms/deployment/kubernetes/#deployment-with-kubernetes","text":"This tutorial explains how to deploy our demo site Luna (see quick start guide ) to the cloud using Kubernetes . In this tutorial we use Google Kubernetes Engine (GKE) but the setup is not limited to Google Cloud Platform (GCP) and can be used with any Kubernetes cluster like Amazon EKS , Azure Kubernetes Service , etc. WebSight Helm chart bootstraps the CMS that supports two types of storage backends: Document Storage (MongoDB) and Segment Storage (TAR) . In this tutorial, we use the MongoDB instance. Before you start Make sure you have: your GCP environment set Google Kubernetes Engine API enabled kubectl installed (if you use Docker Desktop, kubectl should already be installed ) helm installed","title":"Deployment with Kubernetes"},{"location":"cms/deployment/kubernetes/#step-1-kubernetes-cluster-configuration","text":"Create a Kubernetes cluster consisting of a single nodes pool with the following configuration: number of nodes: 3 zone: any zone of your choice, e.g. europe-west1-b to place the cluster in Belgium machine type: e2-standard-2 (2 vCPUs, 8 GB memory) gcloud container clusters create my-websight-cms \\ --num-nodes 3 --zone europe-west1-b --machine-type e2-standard-2 Running the command above may take a couple of minutes to finish. It will also configure kubectl to use the cluster.","title":"Step 1: Kubernetes cluster configuration"},{"location":"cms/deployment/kubernetes/#step-2-install-prerequisites","text":"Install an NGINX Ingress Controller helm upgrade --install ingress-nginx ingress-nginx \\ --repo https://kubernetes.github.io/ingress-nginx \\ --namespace ingress-nginx --create-namespace Create cms namespace: kubectl create namespace cms Install MongoDB in the cms namespace using Helm: helm install mongodb oci://registry-1.docker.io/bitnamicharts/mongodb --version 14 .3.0 \\ --set auth.enabled = true \\ --set auth.rootUser = \"mongoadmin\" \\ --set auth.rootPassword = \"mongoadmin\" \\ --set architecture = \"replicaset\" \\ -n cms At the end of the installation, you should see the following message with MongoDB connection details: MongoDB can be accessed on the following DNS name ( s ) and ports from within your cluster: mongodb-0.mongodb-headless.cms.svc.cluster.local:27017 mongodb-1.mongodb-headless.cms.svc.cluster.local:27017 You will use the connection details in the next section. MongoDB For simplicity in this step we use Bitnami MongoDB Helm chart with default configuration for replicaset architecture (2 data-bearing members and 1 arbiter).","title":"Step 2: Install prerequisites"},{"location":"cms/deployment/kubernetes/#step-3-deploy-cms","text":"Create my-websight-cms directory and download the following files into it: Example values.yaml with the configuration for Luna demo site curl -O https://raw.githubusercontent.com/websight-io/charts/main/websight-cms/examples/luna-proxy/values.yaml Nginx configuration for the CMS Proxy curl -O https://raw.githubusercontent.com/websight-io/charts/main/websight-cms/examples/luna-proxy/luna-site.conf.template Find the external IP address of the Ingress Controller in your cluster ( YOUR_CLUSTER_IP ): kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath = '{.status.loadBalancer.ingress[0].ip}' Update the proxy configuration in values.yaml with the IP address from the previous step: proxy : enabled : true env : - name : NGINX_HOST value : <YOUR_CLUSTER_IP>.nip.io sites : - name : luna host : luna.<YOUR_CLUSTER_IP>.nip.io configMapKeyRef : name : luna-site-config key : luna-site.conf.template Deploy the Nginx proxy configuration as a ConfigMap: kubectl create configmap luna-site-config --from-file = luna-site.conf.template -n cms Deploy the CMS using Helm and the configuration from values.yaml (replace <YOUR_CLUSTER_IP> with the IP address from the 2nd step): helm upgrade --install websight-cms websight-cms \\ --repo https://websight-io.github.io/charts \\ --set cms.persistence.mode = mongo \\ --set cms.persistence.mongo.hosts = 'mongodb-0.mongodb-headless.cms.svc.cluster.local:27017\\,mongodb-1.mongodb-headless.cms.svc.cluster.local:27017' \\ --set cms.livenessProbe.initialDelaySeconds = 120 \\ --set cms.ingress.enabled = true \\ --set cms.ingress.host = cms.<YOUR_CLUSTER_IP>.nip.io \\ --namespace cms \\ -f values.yaml --wait It may take about 1-2 minute of minutes to finish. At the end of the installation, you should see the following message: Your release is named websight-cms. Your WebSight CE instance is starting... WebSight instance will be available at: - CMS Panel: http://cms.35.241.128.172.nip.io Sites: - luna: http://luna.35.241.128.172.nip.io Happy WebSight helming!","title":"Step 3: Deploy CMS"},{"location":"cms/deployment/kubernetes/#step-4-verification","text":"Check the Kubernetes Workloads Dashboard to verify that all pods are running. Open the WebSight CMS admin panel on http://cms.<YOUR_CLUSTER_IP>.nip.io/ (SSL is not covered in this guide). Use the credentials wsadmin / wsadmin to log in. Publish some Luna pages (see Publish demo site guide for help). Open http://luna.<YOUR_CLUSTER_IP>.nip.io/ to see the demo page.","title":"Step 4: Verification"},{"location":"cms/deployment/kubernetes/#cleanup","text":"When finished, you can delete your Kubernetes cluster along with all workloads using: gcloud container clusters delete my-websight-cms --zone europe-west1-b","title":"Cleanup"},{"location":"cms/developers/app-development/","text":"Application development This document describes application development for WebSight CMS. It assumes you have completed the project setup guide and generated a new project from the Maven archetype. All the screens and examples presented below refer to the project prepared in these previous steps. Note You don\u2019t need to read and understand all of the linked content; the basic concepts will be explained here. WebSight CMS is based on Apache Sling , which is \u201ca framework for RESTful web-applications based on an extensible content tree\u201d\u200b\u200b and the OSGi specification - a \u201cJava framework specification that supports the deployment of extensible and downloadable applications known as bundles\u201d. What does this mean? Let's explore by discussing the two most important aspects of the technologies WebSight CMS is based on: OSGi bundles and Resources. OSGi bundle An OSGi bundle is a unit of modularization in the OSGi specification. It's a bundle comprised of Java classes and other resources, which together can provide functions to end users. Open http://localhost:8080/system/console/bundles to see all the Bundles on the WebSight CMS instance and use the filter bar at the top to filter the list. Some of the bundles deliver the OSGi specification implementation (note that the list is filtered by org.apache.felix and that Apache Felix is an implementation of the OSGi specification): Some of the bundles deliver Apache Sling functionality (list filtered by org.apache.sling): Some of the bundles deliver WebSight CMS functionality (list filtered by WebSight): And finally, some of the bundles deliver the functionality of the application which was just generated from the archetype (list filtered by my-artifactId which was used in example project generation at the beginning of our tutorial guide): Click on my-artifactId-backend bundle to open details. At the beginning the bundle definitions were mentioned: OSGi bundle is a unit of modularization in the OSGi specification. Again, a bundle is comprised of Java classes and other resources, which together can provide functions to end users. The screen below highlights that the my-artifactId-backend is exporting (in other words, making available to other bundles) some Java packages (with use of the Export-Package standard OSGi bundle header provided by bnd-maven-plugin in pom.xml and package-info.java files in the code base) and is providing some resources (with use of Sling-Bundle-Resources bundle header handled by Bundle Resources Provider). Resources As we mentioned, WebSight CMS is based on Apache Sling , which \u201cis a framework for RESTful web applications based on an extensible content tree\u201d. It is important to understand the concept of an \u201cextensible content tree,\u201d so let's discuss in a bit more detail. The WebSight CMS Resource Browser admin tool allows developers to browse all Resources available on the instance. Resources are organized in the tree and every resource has a path and properties. Resources are abstractions that represent objects that might come from different sources. The Resource Browser provides an option to select Providers (sources of Resources available in the instance) used to display the presented Resources tree. We will focus on JCR and Bundle resources. http://localhost:8080/apps/browser#/ JCR (Java Content Repository) is a database with a tree structure consisting of nodes with properties. Nodes in JCR are reflected by the JCR Resource in the Resources tree. JCR is based on the Java specification and implemented by Apache Jackrabbit, which is also part of Sling and WebSight CMS (check the bundles list mentioned in the previous chapter and filter by org.apache.jackrabbit to see related bundles). For additional technical details refer to these links (which may be interesting but are not necessary for following this guide, because we explain within the guide everything you need to know for our purposes): https://sling.apache.org/documentation/the-sling-engine/resources.html https://jackrabbit.apache.org/jcr/jcr-api.html https://developer.adobe.com/experience-manager/reference-materials/spec/jsr170/javadocs/jcr-1.0/ Content stored in JCR is represented by JCR Resources (provided to the Resources tree by the JCR Resource provider). WebSight CMS stores JCR content in MongoDB by default (other setups are possible, but we won't cover them here). JCR is used for all the content created during content authoring. Every created page and every added component are represented by nodes (with properties containing data) in the JCR and Resources tree. Resources could also be provided by OSGi Bundles. From the perspective of the Resources tree and Resource abstraction, there is no difference between resources provided by bundles and JCR. However, the bundle resources are read-only, so they would not be suitable for authorable content, but they are great for providing applications. The application resources provided by bundles are available as long as the bundle is available, and they are not stored in JCR. This means application data is not mixed with content data, making it easy to implement blue-green deployments, CI/CD and separation of concerns. For additional technical details check out this link: https://sling.apache.org/documentation/bundles/bundle-resources-extensions-bundleresource.html This is how bundle resources are provided in the generated project: And the same resource in the resource browser: http://localhost:8080/apps/browser#/apps/example-project/components/hello This is how JCR resources are defined in the codebase in the content module: And in the Resources tree: http://localhost:8080/apps/browser#/content/example-project/pages/homepage/jcr:content Backend Resources The generated application/backend module contains (in the src/main/resources folder) some example application resources needed to work with Pages in WebSight CMS. The resources structure starts at the /apps/example-project path. This path is set in the proper OSGi bundle header to provide information about resources delivered by the bundle. The following resources are defined: . \u2514\u2500\u2500 apps \u2514\u2500\u2500 example-project - application root \"sling:resourceType\": \"ws:Application\" \u251c\u2500\u2500 components - folder containing components \u2502 \u251c\u2500\u2500 container - example container component \u2502 \u251c\u2500\u2500 hello - example component \u2502 \u2514\u2500\u2500 page - example page component \u2514\u2500\u2500 templates - templates folder \u251c\u2500\u2500 contentpage - example page template \u2514\u2500\u2500 pagesspace - example pages space template The application root should be under the /apps or /libs resource and must contain the property sling:resourceType\" = \"ws:Application . Folders containing components and templates must be named components and templates and be under the application root resource. Different relative paths could be set by providing components or templates properties with relative paths (relative to application root resource) to components or templates folders located under the application root resource. Otherwise, components and templates will not be available in the authoring UI. Pages Space template In WebSight CMS, content is organized in Spaces. Spaces are areas where dedicated teams can work on content. WebSight CMS allows the creation of two types of spaces: Assets (Digital Assets Manager) - allows managing assets Pages - allows managing pages and assets (includes the same functionality as Assets Space and more) The content module in the project generated from the archetype contains the Pages Space instance Example project , which is visible in the All Spaces view. A new Space can be created from the UI: In the second step, the Space template needs to be selected for Pages Space creation. The list contains the Example Project Pages template defined using the /apps/example-project/templates/pagesspace resource. The Pages Space template resource must have sling:resourceType set to ws:PagesTemplate and should provide the allowedChildren property (which defines the list of allowed pages templates to create). Another Pages Space template could be defined in the application if needed. For example: /apps/example-project/templates/anotherpagesspace { \"sling:resourceType\" : \"ws:PagesTemplate\" , \"title\" : \"Another Example Project Pages\" , \"allowedChildren\" : [ \"/apps/example-project/templates/contentpage\" ] } To deploy the updated bundle to the running instance, use the command from the backend module folder: mvn clean install -P autoInstallBundle A new Pages Space template will be available: Page template Pages spaces are for page management. To create a new page, a page template is needed. The generated backend module provides an example page template resource /apps/example-project/templates/contentpage sling:resourceType property of the page template must be ws:PageTemplate . title and description properties are used in UI. the allowedChildren property contains an array of page templates that can be created under pages created from this template. The Content Page template allows for the creation of subpages of the same type. The /apps/example-project/templates/contentpage was listed in allowedChildren property in the Pages Space template ( /apps/example-project/templates/pagesspace ). This is a template of the Example Project space: This means that the page template /apps/example-project/templates/contentpage can be created under the page's root in the space: http://localhost:8080/apps/websight/index.html/content/example-project/pages (click Create Page button) In the second step, page properties can be set: The dialog displayed at this step is a dialog of the component defined in the initial content of the page template ( sling:resourceType\": \"example-project/components/page ). Read more about components and dialogs in the Components section of the WebSight CMS documentation. The initial content of the page template is defined in a resource named initial , which is located under the page template resource. The initial content is copied to initialize the created page. Properties are set via a dialog on the copied page content. Page is a node of type ws:Page . It contains a page content sub-node named jcr:content of the type ws:PageContent . The nodes located under the page content node can be modified via the authoring UI. All the Page properties (including properties set via the page dialog) are set on the page content node. This is the initial content of the /apps/example-project/templates/contentpage page template: This is how the content node of the newly created page appears: New page templates can be created in the application. /apps/example-project/templates/examplepage is a copy of /apps/example-project/templates/contentpage with changed title , allowedChildren /apps/example-project/templates/examplpage { \"sling:resourceType\" : \"ws:PageTemplate\" , \"title\" : \"Example Page\" , \"description\" : \"Example Project\" , \"allowedChildren\" : [ \"/apps/example-project/templates/examplpage\" ] } and initial content: { \"jcr:primaryType\" : \"ws:Page\" , \"jcr:content\" : { \"jcr:primaryType\" : \"ws:PageContent\" , \"sling:resourceType\" : \"example-project/components/page\" , \"container\" : { \"sling:resourceType\" : \"example-project/components/container\" , \"hello\" : { \"sling:resourceType\" : \"example-project/components/hello\" }, \"hello1\" : { \"sling:resourceType\" : \"example-project/components/hello\" , \"helloName\" : \"Example\" } } } } To make it possible to create under the pages' root in the space, you must add it to allowedChildren in the pages space template /apps/example-project/templates/pagesspace : Deploy changes again with: mvn clean install -P autoInstallBundle The new template is available to create in the pages' root: Page created from this template contains defined initial content: Components Content is assembled from components. Components are elements that render parts of content according to implemented functionality. To understand the components concept see the Components section of the WebSight CMS documentation. The generated backend module contains three example components, located under /apps/example-project/components page - component used to render page content node container - container component, which allows adding child components via the authoring UI hello - component that displays hello text In the editor components list, only the hello component is visible because other components are hidden via the group property value. http://localhost:8080/apps/websight/index.html/content/example-project/pages/new-page::editor New components can be defined to deliver application functionality. As an example, we will add a new component named Rich Text, which allows for advanced text editing. First, create new folder under /apps/example-project/components named richtext with content: { \"sling:resourceType\" : \"ws:Component\" , \"title\" : \"Rich Text\" , \"description\" : \"Allows advanced text edition\" , \"group\" : \"Example Project\" } Then, define the dialog resource: { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"richtext\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"label\" : \"Text\" , \"name\" : \"text\" } } Define also the rendering script richtext.html (name must be matching component resource name + .html): < sly data-sly-test = \"${properties.text && properties.text != '<p></p>'}\" > ${properties.text @ context='html'} </ sly > See the Components documentation for more details. This is how the new component definition looks in the codebase. Deploy the change with the command from the backend module: mvn clean install -P autoInstallBundle The new component is available now in the editor and can be added to the page. If text is not configured via dialog, nothing is rendered because of the data-sly-test statement in the component renderer. If nothing is rendered by the component the placeholder is displayed automatically in the editor. The edit action can be used to open dialog, and you can use the rich text dialog input to configure the text. Frontend Frontend scripts and resources are provided by the frontend module, which is a webpack project containing the application frontend. During the build, the resources are embedded into a bundle, which is then deployed to the instance. The generated module contains a simple CSS class to center the text used in the hello component. The CSS files are built into the main.css file by webpack and embedded into the OSGi bundle installed on the instance, which makes the files available as resources (because of the Sling-Bundle-Resources header in the bundle header). Frontend resources are published automatically via the WebSight-Apps-WebRoot bundle header (see next chapter about publishing). The CSS file is included in the page component renderer to load the CSS. http://localhost:8080/apps/browser#/apps/example-project/webroot/main.css Add the hello component to the page to see the centered \"Hello World!\" text Publishing Assembled content can be previewed in the editor and published to make it available for end users. http://localhost:8080/apps/websight/index.html/content/example-project/pages/new-page::editor The published page is served by an NGINX Web server container: http://localhost:8080/published/example-project/pages/new-page.html End-to-end tests The test module contains content used during end-to-end test execution to validate the application. See the example test content and test script for the hello component: Next steps Congratulations! You've learned the application development process for WebSight CMS. Now, we recommend exploring details about deployment: Deployment with Kubernetes Deployment to Google Cloud Run","title":"Application development"},{"location":"cms/developers/app-development/#application-development","text":"This document describes application development for WebSight CMS. It assumes you have completed the project setup guide and generated a new project from the Maven archetype. All the screens and examples presented below refer to the project prepared in these previous steps. Note You don\u2019t need to read and understand all of the linked content; the basic concepts will be explained here. WebSight CMS is based on Apache Sling , which is \u201ca framework for RESTful web-applications based on an extensible content tree\u201d\u200b\u200b and the OSGi specification - a \u201cJava framework specification that supports the deployment of extensible and downloadable applications known as bundles\u201d. What does this mean? Let's explore by discussing the two most important aspects of the technologies WebSight CMS is based on: OSGi bundles and Resources.","title":"Application development"},{"location":"cms/developers/app-development/#osgi-bundle","text":"An OSGi bundle is a unit of modularization in the OSGi specification. It's a bundle comprised of Java classes and other resources, which together can provide functions to end users. Open http://localhost:8080/system/console/bundles to see all the Bundles on the WebSight CMS instance and use the filter bar at the top to filter the list. Some of the bundles deliver the OSGi specification implementation (note that the list is filtered by org.apache.felix and that Apache Felix is an implementation of the OSGi specification): Some of the bundles deliver Apache Sling functionality (list filtered by org.apache.sling): Some of the bundles deliver WebSight CMS functionality (list filtered by WebSight): And finally, some of the bundles deliver the functionality of the application which was just generated from the archetype (list filtered by my-artifactId which was used in example project generation at the beginning of our tutorial guide): Click on my-artifactId-backend bundle to open details. At the beginning the bundle definitions were mentioned: OSGi bundle is a unit of modularization in the OSGi specification. Again, a bundle is comprised of Java classes and other resources, which together can provide functions to end users. The screen below highlights that the my-artifactId-backend is exporting (in other words, making available to other bundles) some Java packages (with use of the Export-Package standard OSGi bundle header provided by bnd-maven-plugin in pom.xml and package-info.java files in the code base) and is providing some resources (with use of Sling-Bundle-Resources bundle header handled by Bundle Resources Provider).","title":"OSGi bundle"},{"location":"cms/developers/app-development/#resources","text":"As we mentioned, WebSight CMS is based on Apache Sling , which \u201cis a framework for RESTful web applications based on an extensible content tree\u201d. It is important to understand the concept of an \u201cextensible content tree,\u201d so let's discuss in a bit more detail. The WebSight CMS Resource Browser admin tool allows developers to browse all Resources available on the instance. Resources are organized in the tree and every resource has a path and properties. Resources are abstractions that represent objects that might come from different sources. The Resource Browser provides an option to select Providers (sources of Resources available in the instance) used to display the presented Resources tree. We will focus on JCR and Bundle resources. http://localhost:8080/apps/browser#/ JCR (Java Content Repository) is a database with a tree structure consisting of nodes with properties. Nodes in JCR are reflected by the JCR Resource in the Resources tree. JCR is based on the Java specification and implemented by Apache Jackrabbit, which is also part of Sling and WebSight CMS (check the bundles list mentioned in the previous chapter and filter by org.apache.jackrabbit to see related bundles). For additional technical details refer to these links (which may be interesting but are not necessary for following this guide, because we explain within the guide everything you need to know for our purposes): https://sling.apache.org/documentation/the-sling-engine/resources.html https://jackrabbit.apache.org/jcr/jcr-api.html https://developer.adobe.com/experience-manager/reference-materials/spec/jsr170/javadocs/jcr-1.0/ Content stored in JCR is represented by JCR Resources (provided to the Resources tree by the JCR Resource provider). WebSight CMS stores JCR content in MongoDB by default (other setups are possible, but we won't cover them here). JCR is used for all the content created during content authoring. Every created page and every added component are represented by nodes (with properties containing data) in the JCR and Resources tree. Resources could also be provided by OSGi Bundles. From the perspective of the Resources tree and Resource abstraction, there is no difference between resources provided by bundles and JCR. However, the bundle resources are read-only, so they would not be suitable for authorable content, but they are great for providing applications. The application resources provided by bundles are available as long as the bundle is available, and they are not stored in JCR. This means application data is not mixed with content data, making it easy to implement blue-green deployments, CI/CD and separation of concerns. For additional technical details check out this link: https://sling.apache.org/documentation/bundles/bundle-resources-extensions-bundleresource.html This is how bundle resources are provided in the generated project: And the same resource in the resource browser: http://localhost:8080/apps/browser#/apps/example-project/components/hello This is how JCR resources are defined in the codebase in the content module: And in the Resources tree: http://localhost:8080/apps/browser#/content/example-project/pages/homepage/jcr:content","title":"Resources"},{"location":"cms/developers/app-development/#backend-resources","text":"The generated application/backend module contains (in the src/main/resources folder) some example application resources needed to work with Pages in WebSight CMS. The resources structure starts at the /apps/example-project path. This path is set in the proper OSGi bundle header to provide information about resources delivered by the bundle. The following resources are defined: . \u2514\u2500\u2500 apps \u2514\u2500\u2500 example-project - application root \"sling:resourceType\": \"ws:Application\" \u251c\u2500\u2500 components - folder containing components \u2502 \u251c\u2500\u2500 container - example container component \u2502 \u251c\u2500\u2500 hello - example component \u2502 \u2514\u2500\u2500 page - example page component \u2514\u2500\u2500 templates - templates folder \u251c\u2500\u2500 contentpage - example page template \u2514\u2500\u2500 pagesspace - example pages space template The application root should be under the /apps or /libs resource and must contain the property sling:resourceType\" = \"ws:Application . Folders containing components and templates must be named components and templates and be under the application root resource. Different relative paths could be set by providing components or templates properties with relative paths (relative to application root resource) to components or templates folders located under the application root resource. Otherwise, components and templates will not be available in the authoring UI.","title":"Backend Resources"},{"location":"cms/developers/app-development/#pages-space-template","text":"In WebSight CMS, content is organized in Spaces. Spaces are areas where dedicated teams can work on content. WebSight CMS allows the creation of two types of spaces: Assets (Digital Assets Manager) - allows managing assets Pages - allows managing pages and assets (includes the same functionality as Assets Space and more) The content module in the project generated from the archetype contains the Pages Space instance Example project , which is visible in the All Spaces view. A new Space can be created from the UI: In the second step, the Space template needs to be selected for Pages Space creation. The list contains the Example Project Pages template defined using the /apps/example-project/templates/pagesspace resource. The Pages Space template resource must have sling:resourceType set to ws:PagesTemplate and should provide the allowedChildren property (which defines the list of allowed pages templates to create). Another Pages Space template could be defined in the application if needed. For example: /apps/example-project/templates/anotherpagesspace { \"sling:resourceType\" : \"ws:PagesTemplate\" , \"title\" : \"Another Example Project Pages\" , \"allowedChildren\" : [ \"/apps/example-project/templates/contentpage\" ] } To deploy the updated bundle to the running instance, use the command from the backend module folder: mvn clean install -P autoInstallBundle A new Pages Space template will be available:","title":"Pages Space template"},{"location":"cms/developers/app-development/#page-template","text":"Pages spaces are for page management. To create a new page, a page template is needed. The generated backend module provides an example page template resource /apps/example-project/templates/contentpage sling:resourceType property of the page template must be ws:PageTemplate . title and description properties are used in UI. the allowedChildren property contains an array of page templates that can be created under pages created from this template. The Content Page template allows for the creation of subpages of the same type. The /apps/example-project/templates/contentpage was listed in allowedChildren property in the Pages Space template ( /apps/example-project/templates/pagesspace ). This is a template of the Example Project space: This means that the page template /apps/example-project/templates/contentpage can be created under the page's root in the space: http://localhost:8080/apps/websight/index.html/content/example-project/pages (click Create Page button) In the second step, page properties can be set: The dialog displayed at this step is a dialog of the component defined in the initial content of the page template ( sling:resourceType\": \"example-project/components/page ). Read more about components and dialogs in the Components section of the WebSight CMS documentation. The initial content of the page template is defined in a resource named initial , which is located under the page template resource. The initial content is copied to initialize the created page. Properties are set via a dialog on the copied page content. Page is a node of type ws:Page . It contains a page content sub-node named jcr:content of the type ws:PageContent . The nodes located under the page content node can be modified via the authoring UI. All the Page properties (including properties set via the page dialog) are set on the page content node. This is the initial content of the /apps/example-project/templates/contentpage page template: This is how the content node of the newly created page appears: New page templates can be created in the application. /apps/example-project/templates/examplepage is a copy of /apps/example-project/templates/contentpage with changed title , allowedChildren /apps/example-project/templates/examplpage { \"sling:resourceType\" : \"ws:PageTemplate\" , \"title\" : \"Example Page\" , \"description\" : \"Example Project\" , \"allowedChildren\" : [ \"/apps/example-project/templates/examplpage\" ] } and initial content: { \"jcr:primaryType\" : \"ws:Page\" , \"jcr:content\" : { \"jcr:primaryType\" : \"ws:PageContent\" , \"sling:resourceType\" : \"example-project/components/page\" , \"container\" : { \"sling:resourceType\" : \"example-project/components/container\" , \"hello\" : { \"sling:resourceType\" : \"example-project/components/hello\" }, \"hello1\" : { \"sling:resourceType\" : \"example-project/components/hello\" , \"helloName\" : \"Example\" } } } } To make it possible to create under the pages' root in the space, you must add it to allowedChildren in the pages space template /apps/example-project/templates/pagesspace : Deploy changes again with: mvn clean install -P autoInstallBundle The new template is available to create in the pages' root: Page created from this template contains defined initial content:","title":"Page template"},{"location":"cms/developers/app-development/#components","text":"Content is assembled from components. Components are elements that render parts of content according to implemented functionality. To understand the components concept see the Components section of the WebSight CMS documentation. The generated backend module contains three example components, located under /apps/example-project/components page - component used to render page content node container - container component, which allows adding child components via the authoring UI hello - component that displays hello text In the editor components list, only the hello component is visible because other components are hidden via the group property value. http://localhost:8080/apps/websight/index.html/content/example-project/pages/new-page::editor New components can be defined to deliver application functionality. As an example, we will add a new component named Rich Text, which allows for advanced text editing. First, create new folder under /apps/example-project/components named richtext with content: { \"sling:resourceType\" : \"ws:Component\" , \"title\" : \"Rich Text\" , \"description\" : \"Allows advanced text edition\" , \"group\" : \"Example Project\" } Then, define the dialog resource: { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"richtext\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"label\" : \"Text\" , \"name\" : \"text\" } } Define also the rendering script richtext.html (name must be matching component resource name + .html): < sly data-sly-test = \"${properties.text && properties.text != '<p></p>'}\" > ${properties.text @ context='html'} </ sly > See the Components documentation for more details. This is how the new component definition looks in the codebase. Deploy the change with the command from the backend module: mvn clean install -P autoInstallBundle The new component is available now in the editor and can be added to the page. If text is not configured via dialog, nothing is rendered because of the data-sly-test statement in the component renderer. If nothing is rendered by the component the placeholder is displayed automatically in the editor. The edit action can be used to open dialog, and you can use the rich text dialog input to configure the text.","title":"Components"},{"location":"cms/developers/app-development/#frontend","text":"Frontend scripts and resources are provided by the frontend module, which is a webpack project containing the application frontend. During the build, the resources are embedded into a bundle, which is then deployed to the instance. The generated module contains a simple CSS class to center the text used in the hello component. The CSS files are built into the main.css file by webpack and embedded into the OSGi bundle installed on the instance, which makes the files available as resources (because of the Sling-Bundle-Resources header in the bundle header). Frontend resources are published automatically via the WebSight-Apps-WebRoot bundle header (see next chapter about publishing). The CSS file is included in the page component renderer to load the CSS. http://localhost:8080/apps/browser#/apps/example-project/webroot/main.css Add the hello component to the page to see the centered \"Hello World!\" text","title":"Frontend"},{"location":"cms/developers/app-development/#publishing","text":"Assembled content can be previewed in the editor and published to make it available for end users. http://localhost:8080/apps/websight/index.html/content/example-project/pages/new-page::editor The published page is served by an NGINX Web server container: http://localhost:8080/published/example-project/pages/new-page.html","title":"Publishing"},{"location":"cms/developers/app-development/#end-to-end-tests","text":"The test module contains content used during end-to-end test execution to validate the application. See the example test content and test script for the hello component:","title":"End-to-end tests"},{"location":"cms/developers/app-development/#next-steps","text":"Congratulations! You've learned the application development process for WebSight CMS. Now, we recommend exploring details about deployment: Deployment with Kubernetes Deployment to Google Cloud Run","title":"Next steps"},{"location":"cms/developers/components/","text":"Components Overview This document describes the components concept. It also shows how to use components in the WebSight CMS authoring interface. In this documentation we use the follow terms: WebSight CMS pages editor: Refers to the UI for authoring page content WebSight Resource Browse: Refers to the administration tool that allows users to see the resources (data and application) that are available on the WebSight CMS instance Both views can be opened from the WebSight UI: Check the WebSight project setup documentation to see more details about: what WebSight CMS is, and what it gives you implementing applications for WebSight CMS Community Edition the role of OSGi, OSGi bundles, Sling Resources, JCR and more in WebSight CMS What is component Components are: elements that render parts of content according to implemented functionality used to assemble content (like pages) available in the WebSight CMS authoring interface reusable configurable by editing properties on created components instances implemented by developers shipped in OSGi bundles that are deployed to a WebSight CMS instance Components can: include (embed) other components extend other components deliver initial content define dialogs, which are used to edit properties on component instances be containers (allowing you to add child components during authoring) define allowed child components (in the case of containers) Using components To provide more context on components, let's look at the authoring interface and content data structure. The WebSight CMS page editor lists all available components that can be used to build pages on a given WebSight instance. Available components depend on the OSGi bundles that delivering components installed on the instance. Those components can be added to the page by dragging them to the page content view at the center of the screen. Components definitions listed in the WebSight CMS page editor. You can check the page content structure in the page editor content tree tab. This view presents the components tree under page content. This example page contains just the Page Section component, which is the only component present currently in the page content of this example page. Page content tree in the editor. The Page Section component is a container. It allows you to add other components via the authoring interface. The page editor content section displays an empty Page Section component as a box containing the placeholder text \"Drag components here.\" After dragging and dropping the Title and Rich Text components, the page content tree is updated with new nodes. The nodes visible in the content tree are the instances of components. Title and Rich Text components are not containers, so other components cannot be added as their child components. While dragging other components from the components list, the new items can be added next to those components as other children on the Page Section component. After adding a component to the page, the edit action can be used to edit the selected component instance. The dialog that is displayed is a part of the component definition. It is defined by the developer implementing a given component by setting the proper dialog fields (see more in the Dialogs documentation). Properties set via the dialog are saved at edited component instances, and are used by the component to render the appropriate part of content based on the implemented functionality. For example, the Title component renders the Heading text field value in the HTML <h> tag and allows you to set <h> tag level and styling. Components are reusable. Another Title component can be added to the page and configured with its own data. After the second title, the Cards List component is added now. This component is a container but implemented to work with specific type of child components: Only Card Item components can be added inside (this behavior is part of the Cards List component definition). The Cards List component defines initial content that is added to the page when adding a component. The initial content contains 3 child Card Item components (to save work during authoring and present the component in an initialized state). In the content tree, you can see that the Card Item components are child components of the Cards List component. You can continue with assembling and configuring page content based on the available components. Component definition Components are implemented by developers and delivered as resources following a defined structure. The resources should be provided in the OSGi bundle. See the project setup documentation for more details. In this section we will see how the component definition resources structure should look. Simple component definition example Let's see what a simple component definition looks like. We see a component named Say Hello . It provides dialog with one text field, which can be used in the authoring interface to set the hello text rendered on the page using the <p> HTML tag. If the property is not set, Hello World! text will be used. The example application delivers the resource /apps/example-site/components/hello , which is a component definition. It contains just three properties: sling:resourceType = ws:Component which makes this resource the component definition title = Say Hello which is the title of the component visible in the authoring UI group = Example group which is a group name visible in the authoring UI Example component definition in the WebSight Resource Browser. The component is visible in the WebSight CMS page editor. After adding it to the page, it renders \u2018Hello World!\u2019 text. Because the Say Hello component was added to the edited page, the corresponding node was created in the page content: The Hello World! text is rendered in the view because of the hello.html resource defined under the component definition resource that contains the script used to render the content node. The script renders the helloText property value -- or Hello World! , if the property value is empty (it's empty for now, so we see the fallback text). Example component renderer in the WebSight Resource Browser. The second resource under the component definition is the dialog resource. This is the dialog definition resource. It contains a sling:resourceType = wcm/dialogs/dialog property, which defines how the dialog should be displayed (see more details in below) and it has sub-node called helloText that defines the text field ( sling:resourceType = wcm/dialogs/textfield ) input with the label Hello Text . Example component dialog resources in the WebSight Resource Browser. Because the dialog is defined, the edit action in the editor allows you to open the dialog as a set value of the text field. The property value is set on the content node of this Say Hello component instance at the helloText property (according to the name property value at the text field node in the dialog definition): And now the component renderer script will display the property value instead of fallback text: Let's explore all the options and details of the component definition. Component definition properties The component definition is a Sling Resource with resource type ws:Component . Use the following resource properties to define the component: Component property Required Value Description sling:resourceType Yes ws:Component Defines that this resource is a component definition. sling:resourceSuperType No super resource type Set this property to make your component extend another component. That way, the extended component elements can be reused in the extending components. Example value: wcm/core/components/page title Yes string Component name visible in UI. Example value: Title group Yes string Component group name. Allows us to present related components in the UI. Used while defining allowedComponents. Use the value .hidden to make the component definition not visible in the UI. Example value: General isContainer No boolean, false by default Defines the component as a container. Containers are components that contain child components that can be added, removed and reordered using the authoring interface. If true, the allowedComponents property is required too. allowedComponents No* array of strings. Values are absolute component paths and group names. No default value; by default nothing is allowed. Array listing allowed child component absolute paths or groups that can be added to the container. *Required if isContainer=\u201dtrue\u201d . Example value: [ \"/apps/my-app/components/component1\", \"/apps/my-app/components/component2\", \"Content\", \"Blog\" ] isLayout No boolean, false by default Defines the component as a layout component. Layout components are displayed in a separate section in the WebSight CMS pages editor from components that are not layout components. It\u2019s up to the component developer to set isLayout=true , but the guideline is to use it for components that: - are used to define page layout - must contain other components to be usable - contain no logic (other than logic related to layout calculation) - interact only on page resize (no other \u201cuser actions\u201d allowed) - have no visible UI elements (like texts) Examples of Layouts: - 2-column container - 1-column container - Section with title, image, text and CTA (container including components) Example of components that are not Layouts: - image, title or CTA, all of which have visible UI elements (like texts) - logo cloud, which contain very specific CSS logic and should not be used to create generic page layouts) - Accordion, which contains logic not related to layout calculation - Image gallery, which contains logic not related to layout calculation instanceResourceType No resource type that will be set on created component instance If this property is not set, the resource type of every created component instance node will be set to a value resolved from the component definition resource path. If set, then this property value will be used instead. This allows multiple components definitions, which will result with the same resource type used for created component instances. It could be used to deliver components (or layout components) with different initial content. For example: The Section layout component contains an embedded Title component and is a container that renders child components below the Title . If the authoring section with four columns needs to be created, then the Section component needs to be added with four containers inside that are configured to be displayed as columns. If this page layout is commonly used during content authoring then a new layout component could be implemented to simplify the process. A Section with four columns layout component could be added. The instanceResourceType property should be set to the Section component resource type and initial content should provide the same structure as was created manually before (a section plus four configured child containers). This way, after dropping Section with four columns on the page, the commonly used content structure will be ready to use immediately. Example value: my-app/components/section Dialog Dialog is the form with inputs that allows you to set data on component instances in content. The form layout, fields and behavior are described by resources starting at a resource named dialog defined under the component definition resource. If the dialog resource is not defined, then the edit component properties action is not available in the editor. This is what the dialog definition structure looks like with the same dialog displayed in the editor: Component dialog resources structure in Resource Browser tool. Component dialog displayed after edit component action in pages editor. Dialog for editing component properties is opened in edit:dialog context - the context can be used to disable some fields depending on the dialog usage. Read more about context and other aspects of the dialogs in the Dialogs documentation . Rendering script To render components, the rendering script file resource is needed. The file resource name should be the same as the component name with the .html extension (the recommended and supported scripting language in the WebSight CMS is the HTML Templating Language, or HTL). See the HTL specification here If Java support is needed in the HTL, the recommended solution is to use the Sling Models and the HTL Use-API. See details: use block statement Use-API Sling Models Component renderer script in the WebSight Resource Browser. Template Component template is a resource that gets copied when creating a new component instance and adding it to a page. In other words, it is the initial content of the component. It is used to set default values or prepare necessary content structure. It could also be used to save work during content authoring. The component template resource is a component definition sub-node with the name template . The template resource is optional. If it's not present, a new empty node will be created. Component template resources structure (view from the WebSight Resource Browser tool). Component instance added to the page content initialized from template (view from the WebSight Resource Browser tool). Edit configuration A component may provide an optional resource named editConfig providing configuration customizing component behavior in the Page editor . Reload on update Edit config property named reloadOnUpdate defines what should be refreshed on the component update, for example after editing. Options: self - default behaviour - only updated component is refreshed parent - parent component is refreshed page - edited page is refreshed browser - reload of the Editor in the browser Example 'editConfig' with 'reloadOnUpdate' property { \"reloadOnUpdate\" : \"page\" } Hide actions Edit config property named hideActions can provide an array of Page editor actions names (see list of the component actions with names in the Page editor ) that should not be available for the component. Example 'editConfig' with 'hideActions' property { \"hideActions\" : [ \"edit-properties\" , \"delete\" ] } Default action Edit config property named defaultAction can provide a name of a Page editor action (see list of the component actions with names in the Page editor ) that should be executed if the author double-clicks on the component. If not provided, the inline-editing action (see Inline editing ) is executed if the component is configured to support it, otherwise the edit-properties action is executed if the component has a dialog configuration (see Dialogs ). Example 'editConfig' with 'defaultAction' property { \"defaultAction\" : \"delete\" }","title":"Components"},{"location":"cms/developers/components/#components","text":"","title":"Components"},{"location":"cms/developers/components/#overview","text":"This document describes the components concept. It also shows how to use components in the WebSight CMS authoring interface. In this documentation we use the follow terms: WebSight CMS pages editor: Refers to the UI for authoring page content WebSight Resource Browse: Refers to the administration tool that allows users to see the resources (data and application) that are available on the WebSight CMS instance Both views can be opened from the WebSight UI: Check the WebSight project setup documentation to see more details about: what WebSight CMS is, and what it gives you implementing applications for WebSight CMS Community Edition the role of OSGi, OSGi bundles, Sling Resources, JCR and more in WebSight CMS","title":"Overview"},{"location":"cms/developers/components/#what-is-component","text":"Components are: elements that render parts of content according to implemented functionality used to assemble content (like pages) available in the WebSight CMS authoring interface reusable configurable by editing properties on created components instances implemented by developers shipped in OSGi bundles that are deployed to a WebSight CMS instance Components can: include (embed) other components extend other components deliver initial content define dialogs, which are used to edit properties on component instances be containers (allowing you to add child components during authoring) define allowed child components (in the case of containers)","title":"What is component"},{"location":"cms/developers/components/#using-components","text":"To provide more context on components, let's look at the authoring interface and content data structure. The WebSight CMS page editor lists all available components that can be used to build pages on a given WebSight instance. Available components depend on the OSGi bundles that delivering components installed on the instance. Those components can be added to the page by dragging them to the page content view at the center of the screen. Components definitions listed in the WebSight CMS page editor. You can check the page content structure in the page editor content tree tab. This view presents the components tree under page content. This example page contains just the Page Section component, which is the only component present currently in the page content of this example page. Page content tree in the editor. The Page Section component is a container. It allows you to add other components via the authoring interface. The page editor content section displays an empty Page Section component as a box containing the placeholder text \"Drag components here.\" After dragging and dropping the Title and Rich Text components, the page content tree is updated with new nodes. The nodes visible in the content tree are the instances of components. Title and Rich Text components are not containers, so other components cannot be added as their child components. While dragging other components from the components list, the new items can be added next to those components as other children on the Page Section component. After adding a component to the page, the edit action can be used to edit the selected component instance. The dialog that is displayed is a part of the component definition. It is defined by the developer implementing a given component by setting the proper dialog fields (see more in the Dialogs documentation). Properties set via the dialog are saved at edited component instances, and are used by the component to render the appropriate part of content based on the implemented functionality. For example, the Title component renders the Heading text field value in the HTML <h> tag and allows you to set <h> tag level and styling. Components are reusable. Another Title component can be added to the page and configured with its own data. After the second title, the Cards List component is added now. This component is a container but implemented to work with specific type of child components: Only Card Item components can be added inside (this behavior is part of the Cards List component definition). The Cards List component defines initial content that is added to the page when adding a component. The initial content contains 3 child Card Item components (to save work during authoring and present the component in an initialized state). In the content tree, you can see that the Card Item components are child components of the Cards List component. You can continue with assembling and configuring page content based on the available components.","title":"Using components"},{"location":"cms/developers/components/#component-definition","text":"Components are implemented by developers and delivered as resources following a defined structure. The resources should be provided in the OSGi bundle. See the project setup documentation for more details. In this section we will see how the component definition resources structure should look.","title":"Component definition"},{"location":"cms/developers/components/#simple-component-definition-example","text":"Let's see what a simple component definition looks like. We see a component named Say Hello . It provides dialog with one text field, which can be used in the authoring interface to set the hello text rendered on the page using the <p> HTML tag. If the property is not set, Hello World! text will be used. The example application delivers the resource /apps/example-site/components/hello , which is a component definition. It contains just three properties: sling:resourceType = ws:Component which makes this resource the component definition title = Say Hello which is the title of the component visible in the authoring UI group = Example group which is a group name visible in the authoring UI Example component definition in the WebSight Resource Browser. The component is visible in the WebSight CMS page editor. After adding it to the page, it renders \u2018Hello World!\u2019 text. Because the Say Hello component was added to the edited page, the corresponding node was created in the page content: The Hello World! text is rendered in the view because of the hello.html resource defined under the component definition resource that contains the script used to render the content node. The script renders the helloText property value -- or Hello World! , if the property value is empty (it's empty for now, so we see the fallback text). Example component renderer in the WebSight Resource Browser. The second resource under the component definition is the dialog resource. This is the dialog definition resource. It contains a sling:resourceType = wcm/dialogs/dialog property, which defines how the dialog should be displayed (see more details in below) and it has sub-node called helloText that defines the text field ( sling:resourceType = wcm/dialogs/textfield ) input with the label Hello Text . Example component dialog resources in the WebSight Resource Browser. Because the dialog is defined, the edit action in the editor allows you to open the dialog as a set value of the text field. The property value is set on the content node of this Say Hello component instance at the helloText property (according to the name property value at the text field node in the dialog definition): And now the component renderer script will display the property value instead of fallback text: Let's explore all the options and details of the component definition.","title":"Simple component definition example"},{"location":"cms/developers/components/#component-definition-properties","text":"The component definition is a Sling Resource with resource type ws:Component . Use the following resource properties to define the component: Component property Required Value Description sling:resourceType Yes ws:Component Defines that this resource is a component definition. sling:resourceSuperType No super resource type Set this property to make your component extend another component. That way, the extended component elements can be reused in the extending components. Example value: wcm/core/components/page title Yes string Component name visible in UI. Example value: Title group Yes string Component group name. Allows us to present related components in the UI. Used while defining allowedComponents. Use the value .hidden to make the component definition not visible in the UI. Example value: General isContainer No boolean, false by default Defines the component as a container. Containers are components that contain child components that can be added, removed and reordered using the authoring interface. If true, the allowedComponents property is required too. allowedComponents No* array of strings. Values are absolute component paths and group names. No default value; by default nothing is allowed. Array listing allowed child component absolute paths or groups that can be added to the container. *Required if isContainer=\u201dtrue\u201d . Example value: [ \"/apps/my-app/components/component1\", \"/apps/my-app/components/component2\", \"Content\", \"Blog\" ] isLayout No boolean, false by default Defines the component as a layout component. Layout components are displayed in a separate section in the WebSight CMS pages editor from components that are not layout components. It\u2019s up to the component developer to set isLayout=true , but the guideline is to use it for components that: - are used to define page layout - must contain other components to be usable - contain no logic (other than logic related to layout calculation) - interact only on page resize (no other \u201cuser actions\u201d allowed) - have no visible UI elements (like texts) Examples of Layouts: - 2-column container - 1-column container - Section with title, image, text and CTA (container including components) Example of components that are not Layouts: - image, title or CTA, all of which have visible UI elements (like texts) - logo cloud, which contain very specific CSS logic and should not be used to create generic page layouts) - Accordion, which contains logic not related to layout calculation - Image gallery, which contains logic not related to layout calculation instanceResourceType No resource type that will be set on created component instance If this property is not set, the resource type of every created component instance node will be set to a value resolved from the component definition resource path. If set, then this property value will be used instead. This allows multiple components definitions, which will result with the same resource type used for created component instances. It could be used to deliver components (or layout components) with different initial content. For example: The Section layout component contains an embedded Title component and is a container that renders child components below the Title . If the authoring section with four columns needs to be created, then the Section component needs to be added with four containers inside that are configured to be displayed as columns. If this page layout is commonly used during content authoring then a new layout component could be implemented to simplify the process. A Section with four columns layout component could be added. The instanceResourceType property should be set to the Section component resource type and initial content should provide the same structure as was created manually before (a section plus four configured child containers). This way, after dropping Section with four columns on the page, the commonly used content structure will be ready to use immediately. Example value: my-app/components/section","title":"Component definition properties"},{"location":"cms/developers/components/#dialog","text":"Dialog is the form with inputs that allows you to set data on component instances in content. The form layout, fields and behavior are described by resources starting at a resource named dialog defined under the component definition resource. If the dialog resource is not defined, then the edit component properties action is not available in the editor. This is what the dialog definition structure looks like with the same dialog displayed in the editor: Component dialog resources structure in Resource Browser tool. Component dialog displayed after edit component action in pages editor. Dialog for editing component properties is opened in edit:dialog context - the context can be used to disable some fields depending on the dialog usage. Read more about context and other aspects of the dialogs in the Dialogs documentation .","title":"Dialog"},{"location":"cms/developers/components/#rendering-script","text":"To render components, the rendering script file resource is needed. The file resource name should be the same as the component name with the .html extension (the recommended and supported scripting language in the WebSight CMS is the HTML Templating Language, or HTL). See the HTL specification here If Java support is needed in the HTL, the recommended solution is to use the Sling Models and the HTL Use-API. See details: use block statement Use-API Sling Models Component renderer script in the WebSight Resource Browser.","title":"Rendering script"},{"location":"cms/developers/components/#template","text":"Component template is a resource that gets copied when creating a new component instance and adding it to a page. In other words, it is the initial content of the component. It is used to set default values or prepare necessary content structure. It could also be used to save work during content authoring. The component template resource is a component definition sub-node with the name template . The template resource is optional. If it's not present, a new empty node will be created. Component template resources structure (view from the WebSight Resource Browser tool). Component instance added to the page content initialized from template (view from the WebSight Resource Browser tool).","title":"Template"},{"location":"cms/developers/components/#edit-configuration","text":"A component may provide an optional resource named editConfig providing configuration customizing component behavior in the Page editor .","title":"Edit configuration"},{"location":"cms/developers/components/#reload-on-update","text":"Edit config property named reloadOnUpdate defines what should be refreshed on the component update, for example after editing. Options: self - default behaviour - only updated component is refreshed parent - parent component is refreshed page - edited page is refreshed browser - reload of the Editor in the browser Example 'editConfig' with 'reloadOnUpdate' property { \"reloadOnUpdate\" : \"page\" }","title":"Reload on update"},{"location":"cms/developers/components/#hide-actions","text":"Edit config property named hideActions can provide an array of Page editor actions names (see list of the component actions with names in the Page editor ) that should not be available for the component. Example 'editConfig' with 'hideActions' property { \"hideActions\" : [ \"edit-properties\" , \"delete\" ] }","title":"Hide actions"},{"location":"cms/developers/components/#default-action","text":"Edit config property named defaultAction can provide a name of a Page editor action (see list of the component actions with names in the Page editor ) that should be executed if the author double-clicks on the component. If not provided, the inline-editing action (see Inline editing ) is executed if the component is configured to support it, otherwise the edit-properties action is executed if the component has a dialog configuration (see Dialogs ). Example 'editConfig' with 'defaultAction' property { \"defaultAction\" : \"delete\" }","title":"Default action"},{"location":"cms/developers/dialogs/","text":"Dialogs The Dialogs framework in WebSight CMS allows users to define dialog field components. They can use these components to build dialogs for submitting data that is saved in content resources. WebSight CMS delivers a set of ready-to-use components. These are detailed in the subsections of this documentation page. Rendering dialogs In this documentation, we present dialogs configurations in a modal, which is the default dialog rendering. However, dialogs can be rendered in other ways, for example as a side panel . Dialog structure Each dialog can be built using two element types: containers - used to achieve proper structure of fields in a dialog. Examples: container, tab, tabs fields - used to input values via dialogs. Examples: textfield, numberfield, pathPicker An example dialog structure definition: { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"properties\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Properties\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"label\" : \"Title\" , \"name\" : \"title\" }, \"description\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"label\" : \"Description\" , \"name\" : \"description\" } }, \"advanced\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Advanced\" , \"shadows\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"shadows\" , \"label\" : \"Use shadows\" }, \"style\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select\" , \"label\" : \"Style\" , \"name\" : \"style\" , \"primary\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Primary\" , \"value\" : \"primary\" }, \"secondary\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Secondary\" , \"selected\" : true , \"value\" : \"secondary\" }, \"link\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Link\" , \"value\" : \"link\" } } } } } This will result in the following within the UI dialog: Data structure The data structure depends on the name property. In a simple example, a property value is saved directly as a resource property. \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"label\" : \"Title\" , \"name\" : \"title\" } In the above example, the title is added directly as a resource property. You can also manipulate data from other resources by using a path in the name property: \"alt\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"image/alt\" , \"label\" : \"Alt text\" } In the above example, the alt property is saved as an image property from the header context. You can also manipulate data from other resources using a multifield. The following dialog field name property defines a node, under which we create other resources with properties defined in the multifield property. \"urls\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"urls\" , \"label\" : \"Footer URLs\" , \"labelField\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"label\" , \"label\" : \"Label\" }, \"addressField\" : { \"sling:resourceType\" : \"wcm/dialogs/components/pathpicker\" , \"name\" : \"address\" , \"label\" : \"URL\" } } Validation WebSight supports the validation of dialog values on the backend side. If the value is incorrect, it won't be saved and the dialog can't be submitted. The author will see an error message: Custom validator To prepare a custom validator you have to extend pl.ds.websight.dialog.spi.DialogValidator from pl.ds.websight:websight-dialogs-service as an OSGi @Component(service = DialogValidator.class) . You must implement the following methods: boolean supports(Resource resource) - should return whether the dialog resource is supported by this validator. This check will be done for each resource that represents dialog fields String validate(Resource resource, Map<String, Object> propertiesToSave) - should return a validation result as follows: success - return null error - return String with an error message, which will be displayed in the dialog Show/hide dialog fields By default, all dialog components are visible, but you can hide them if you wish. Context To show or hide a particular field depending on dialog context you can use the ws:disallowedContext parameter. The default context value used for dialogs is edit . Depending on dialog usage, different contexts might be used. For example, when creating a page, the 'create' context is used. This way some fields might be disabled during the page creation process. \"ws:disallowedContext\" : [ \"create\" ] To hide an element in dialog, the request from the front-end that fetches it must contain the additional parameter context . If the context value matches one of the ws:dissallowedContext values, then the field won't be rendered. To check request details, refer to the Swagger documentation . In some cases, context values are more specific. These can contain both the action name and the place of usage separated by : , for example edit:dialog or edit:panel . It is possible to disable fields by action name. In this case, every context that matches the action will be disabled. For example, to disable both edit:dialog and edit:panel there is no need to disable them one by one. It can be simplified to: \"ws:disallowedContext\" : [ \"edit\" ] Conditions To show or hide a particular field based on other fields' state, you can use a ws:display node. This node should contain children that define the conditions that determine whether the element is displayed. If the component has this child node, it's hidden by default. It must fulfill at least one of the defined conditions to show the component. Each condition should have two properties: sourceName - the name of the component whose value would be checked values - one or more values. At least one of them should match the source field value to fulfill the condition. Example conditions configurations: with single value: \"ws:display\" : { \"condition\" : { \"sourceName\" : \"fieldName\" , \"values\" : \"option1\" } } with multiple values: \"ws:display\" : { \"condition\" : { \"sourceName\" : \"fieldName\" , \"values\" : [ \"option1\" , \"option2\" , \"option3\" ] } } Example dialog definition: { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"hideall\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"hideall\" , \"label\" : \"Hide all other elements\" }, \"container\" : { \"sling:resourceType\" : \"wcm/dialogs/components/container\" , \"showrequiredfield\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"showrequiredfield\" , \"label\" : \"Show required field\" }, \"requiredfield\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"requiredfield\" , \"label\" : \"Required field\" , \"required\" : true , \"ws:display\" : { \"condition\" : { \"sourceName\" : \"showrequiredfield\" , \"values\" : \"true\" } } }, \"ws:display\" : { \"condition\" : { \"sourceName\" : \"hideall\" , \"values\" : \"false\" } } } } To correctly handle all display conditions the component should also have initial field values set. template/content.json file for this example. { \"jcr:primaryType\" : \"nt:unstructured\" , \"hideall\" : false } Initial dialog state: Checking \"Hide all other elements\" hides the second field. Checking \"Show required field\" shows another field. Default state It's important to keep what that author sees consistent with state stored on backend. All visibility conditions on dialog are checked both on backend and frontend. Use the Component template to initialize the values when component is fist added on a page. To add default values on new fields on existing components you can: Change the content manually (when is managed in git repository) Use Groovy Console to prepare script migrating the existing content You can also use @Default annotation on Model field. But be aware that it's only setting this value in the context of model class. The values on dialogs and visibility conditions are not affected by this. @Model ( adaptables = Resource . class ) public class TitleComponent { @Inject @Default ( values = \"h2\" ) private String headingLevel ; }","title":"Dialogs"},{"location":"cms/developers/dialogs/#dialogs","text":"The Dialogs framework in WebSight CMS allows users to define dialog field components. They can use these components to build dialogs for submitting data that is saved in content resources. WebSight CMS delivers a set of ready-to-use components. These are detailed in the subsections of this documentation page. Rendering dialogs In this documentation, we present dialogs configurations in a modal, which is the default dialog rendering. However, dialogs can be rendered in other ways, for example as a side panel .","title":"Dialogs"},{"location":"cms/developers/dialogs/#dialog-structure","text":"Each dialog can be built using two element types: containers - used to achieve proper structure of fields in a dialog. Examples: container, tab, tabs fields - used to input values via dialogs. Examples: textfield, numberfield, pathPicker An example dialog structure definition: { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"properties\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Properties\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"label\" : \"Title\" , \"name\" : \"title\" }, \"description\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"label\" : \"Description\" , \"name\" : \"description\" } }, \"advanced\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Advanced\" , \"shadows\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"shadows\" , \"label\" : \"Use shadows\" }, \"style\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select\" , \"label\" : \"Style\" , \"name\" : \"style\" , \"primary\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Primary\" , \"value\" : \"primary\" }, \"secondary\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Secondary\" , \"selected\" : true , \"value\" : \"secondary\" }, \"link\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Link\" , \"value\" : \"link\" } } } } } This will result in the following within the UI dialog:","title":"Dialog structure"},{"location":"cms/developers/dialogs/#data-structure","text":"The data structure depends on the name property. In a simple example, a property value is saved directly as a resource property. \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"label\" : \"Title\" , \"name\" : \"title\" } In the above example, the title is added directly as a resource property. You can also manipulate data from other resources by using a path in the name property: \"alt\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"image/alt\" , \"label\" : \"Alt text\" } In the above example, the alt property is saved as an image property from the header context. You can also manipulate data from other resources using a multifield. The following dialog field name property defines a node, under which we create other resources with properties defined in the multifield property. \"urls\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"urls\" , \"label\" : \"Footer URLs\" , \"labelField\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"label\" , \"label\" : \"Label\" }, \"addressField\" : { \"sling:resourceType\" : \"wcm/dialogs/components/pathpicker\" , \"name\" : \"address\" , \"label\" : \"URL\" } }","title":"Data structure"},{"location":"cms/developers/dialogs/#validation","text":"WebSight supports the validation of dialog values on the backend side. If the value is incorrect, it won't be saved and the dialog can't be submitted. The author will see an error message:","title":"Validation"},{"location":"cms/developers/dialogs/#custom-validator","text":"To prepare a custom validator you have to extend pl.ds.websight.dialog.spi.DialogValidator from pl.ds.websight:websight-dialogs-service as an OSGi @Component(service = DialogValidator.class) . You must implement the following methods: boolean supports(Resource resource) - should return whether the dialog resource is supported by this validator. This check will be done for each resource that represents dialog fields String validate(Resource resource, Map<String, Object> propertiesToSave) - should return a validation result as follows: success - return null error - return String with an error message, which will be displayed in the dialog","title":"Custom validator"},{"location":"cms/developers/dialogs/#showhide-dialog-fields","text":"By default, all dialog components are visible, but you can hide them if you wish.","title":"Show/hide dialog fields"},{"location":"cms/developers/dialogs/#context","text":"To show or hide a particular field depending on dialog context you can use the ws:disallowedContext parameter. The default context value used for dialogs is edit . Depending on dialog usage, different contexts might be used. For example, when creating a page, the 'create' context is used. This way some fields might be disabled during the page creation process. \"ws:disallowedContext\" : [ \"create\" ] To hide an element in dialog, the request from the front-end that fetches it must contain the additional parameter context . If the context value matches one of the ws:dissallowedContext values, then the field won't be rendered. To check request details, refer to the Swagger documentation . In some cases, context values are more specific. These can contain both the action name and the place of usage separated by : , for example edit:dialog or edit:panel . It is possible to disable fields by action name. In this case, every context that matches the action will be disabled. For example, to disable both edit:dialog and edit:panel there is no need to disable them one by one. It can be simplified to: \"ws:disallowedContext\" : [ \"edit\" ]","title":"Context"},{"location":"cms/developers/dialogs/#conditions","text":"To show or hide a particular field based on other fields' state, you can use a ws:display node. This node should contain children that define the conditions that determine whether the element is displayed. If the component has this child node, it's hidden by default. It must fulfill at least one of the defined conditions to show the component. Each condition should have two properties: sourceName - the name of the component whose value would be checked values - one or more values. At least one of them should match the source field value to fulfill the condition. Example conditions configurations: with single value: \"ws:display\" : { \"condition\" : { \"sourceName\" : \"fieldName\" , \"values\" : \"option1\" } } with multiple values: \"ws:display\" : { \"condition\" : { \"sourceName\" : \"fieldName\" , \"values\" : [ \"option1\" , \"option2\" , \"option3\" ] } } Example dialog definition: { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"hideall\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"hideall\" , \"label\" : \"Hide all other elements\" }, \"container\" : { \"sling:resourceType\" : \"wcm/dialogs/components/container\" , \"showrequiredfield\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"showrequiredfield\" , \"label\" : \"Show required field\" }, \"requiredfield\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"requiredfield\" , \"label\" : \"Required field\" , \"required\" : true , \"ws:display\" : { \"condition\" : { \"sourceName\" : \"showrequiredfield\" , \"values\" : \"true\" } } }, \"ws:display\" : { \"condition\" : { \"sourceName\" : \"hideall\" , \"values\" : \"false\" } } } } To correctly handle all display conditions the component should also have initial field values set. template/content.json file for this example. { \"jcr:primaryType\" : \"nt:unstructured\" , \"hideall\" : false } Initial dialog state: Checking \"Hide all other elements\" hides the second field. Checking \"Show required field\" shows another field.","title":"Conditions"},{"location":"cms/developers/dialogs/#default-state","text":"It's important to keep what that author sees consistent with state stored on backend. All visibility conditions on dialog are checked both on backend and frontend. Use the Component template to initialize the values when component is fist added on a page. To add default values on new fields on existing components you can: Change the content manually (when is managed in git repository) Use Groovy Console to prepare script migrating the existing content You can also use @Default annotation on Model field. But be aware that it's only setting this value in the context of model class. The values on dialogs and visibility conditions are not affected by this. @Model ( adaptables = Resource . class ) public class TitleComponent { @Inject @Default ( values = \"h2\" ) private String headingLevel ; }","title":"Default state"},{"location":"cms/developers/dialogs/assetreference/","text":"Asset Reference wcm/dialogs/components/assetreference Description The Asset Reference dialog field is an input that allows the user to pick an asset from the space by dragging it from the assets tab on the left sidebar. It will only allow for dropping assets that match the MIME type of the field's configuration Properties name - string (required) Form field name label - string Display label value required - string Indicates if field value is mandatory mimeTypes - string[] List of allowed MIME Types that can be dropped on the field - it supports simple wildcards like image/* or * emptyText - string (if not defined, \"Drop asset here\" ) Text that will be displayed in the drop area when an asset is not selected Example \"imageAsset\" : { \"sling:resourceType\" : \"wcm/dialogs/components/assetreference\" , \"mimeTypes\" : [ \"image/*\" ], \"name\" : \"imageAsset\" , \"label\" : \"Image Asset\" }","title":"Asset Reference"},{"location":"cms/developers/dialogs/assetreference/#asset-reference","text":"wcm/dialogs/components/assetreference","title":"Asset Reference"},{"location":"cms/developers/dialogs/assetreference/#description","text":"The Asset Reference dialog field is an input that allows the user to pick an asset from the space by dragging it from the assets tab on the left sidebar. It will only allow for dropping assets that match the MIME type of the field's configuration","title":"Description"},{"location":"cms/developers/dialogs/assetreference/#properties","text":"name - string (required) Form field name label - string Display label value required - string Indicates if field value is mandatory mimeTypes - string[] List of allowed MIME Types that can be dropped on the field - it supports simple wildcards like image/* or * emptyText - string (if not defined, \"Drop asset here\" ) Text that will be displayed in the drop area when an asset is not selected","title":"Properties"},{"location":"cms/developers/dialogs/assetreference/#example","text":"\"imageAsset\" : { \"sling:resourceType\" : \"wcm/dialogs/components/assetreference\" , \"mimeTypes\" : [ \"image/*\" ], \"name\" : \"imageAsset\" , \"label\" : \"Image Asset\" }","title":"Example"},{"location":"cms/developers/dialogs/checkbox/","text":"Checkbox wcm/dialogs/components/checkbox Description The Checkbox dialog field allows the user to selection an option from a list of checkboxes. Properties name - string (required) Form field name label - string (required) Display label value checkedValue - string Define what value will be saved in JCR if the checkbox is checked. Default: \u201ctrue\u201d String uncheckedValue - string Define what value will be saved in JCR if the checkbox is NOT checked. Default: \u201cfalse\u201d String description - string Display description value as a tooltip To set the default value see the Default state section Example \"isSlider\" : { \"sling:resourceType\" : \"wcm/dialogs/components/checkbox\" , \"name\" : \"isSlider\" , \"label\" : \"Display as a slider\" }","title":"Checkbox"},{"location":"cms/developers/dialogs/checkbox/#checkbox","text":"wcm/dialogs/components/checkbox","title":"Checkbox"},{"location":"cms/developers/dialogs/checkbox/#description","text":"The Checkbox dialog field allows the user to selection an option from a list of checkboxes.","title":"Description"},{"location":"cms/developers/dialogs/checkbox/#properties","text":"name - string (required) Form field name label - string (required) Display label value checkedValue - string Define what value will be saved in JCR if the checkbox is checked. Default: \u201ctrue\u201d String uncheckedValue - string Define what value will be saved in JCR if the checkbox is NOT checked. Default: \u201cfalse\u201d String description - string Display description value as a tooltip To set the default value see the Default state section","title":"Properties"},{"location":"cms/developers/dialogs/checkbox/#example","text":"\"isSlider\" : { \"sling:resourceType\" : \"wcm/dialogs/components/checkbox\" , \"name\" : \"isSlider\" , \"label\" : \"Display as a slider\" }","title":"Example"},{"location":"cms/developers/dialogs/container/","text":"Container wcm/dialogs/components/container Description: The Container dialog field allows the user to group multiple elements into a container. For example, it is useful for showing or hiding a group of dialog fields . Example: \"container\" : { \"sling:resourceType\" : \"wcm/dialogs/components/container\" , \"firstelement\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"firstelement\" , \"label\" : \"First element\" }, \"secondelement\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"secondelement\" , \"label\" : \"Second element\" } }","title":"Container"},{"location":"cms/developers/dialogs/container/#container","text":"wcm/dialogs/components/container","title":"Container"},{"location":"cms/developers/dialogs/container/#description","text":"The Container dialog field allows the user to group multiple elements into a container. For example, it is useful for showing or hiding a group of dialog fields .","title":"Description:"},{"location":"cms/developers/dialogs/container/#example","text":"\"container\" : { \"sling:resourceType\" : \"wcm/dialogs/components/container\" , \"firstelement\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"firstelement\" , \"label\" : \"First element\" }, \"secondelement\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"secondelement\" , \"label\" : \"Second element\" } }","title":"Example:"},{"location":"cms/developers/dialogs/date-picker/","text":"Date Picker wcm/dialogs/components/datepicker Description The Date Picker dialog field allows the user to pick a date, time or datetime. Properties name - string (required) Form field name label - string (required) Display label value required - string Indicates if field value is mandatory type - string The type of date picker. It can be one of date , time or datetime . Default value is date . displayDateFormat - string Date format that will be used to format date on the user interface. This does not affect the way the date is saved. Format should be accepted by date-fn\u2019s format function . displayTimeFormat - string Time format that will be used to format time on the user interface. This does not affect the way the time is saved. Format should be accepted by date-fn\u2019s format function . minDate - string Lower boundary of the selected date or datetime. Format should be: yyyy-MM-dd . E.g.: 2022-02-02 maxDate - string Upper boundary of the selected date or datetime. Format should be: yyyy-MM-dd . E.g.: 2022-02-02 after - string Comma separated values of other datepickers. These datepickers' values should be lower than the selected date. (This validation should be used in pair with before on the reference field.) before - string Comma separated values of other datepickers. These datepickers' values should be higher the selected date. (This validation should be used in pair with after on the reference field.) Example \"displayDate\" : { \"sling:resourceType\" : \"wcm/dialogs/components/datepicker\" , \"name\" : \"displayDate\" , \"label\" : \"Display date\" , \"type\" : \"date\" , \"displayDateFormat\" : \"YYYY-MM-DD\" }","title":"Date Picker"},{"location":"cms/developers/dialogs/date-picker/#date-picker","text":"wcm/dialogs/components/datepicker","title":"Date Picker"},{"location":"cms/developers/dialogs/date-picker/#description","text":"The Date Picker dialog field allows the user to pick a date, time or datetime.","title":"Description"},{"location":"cms/developers/dialogs/date-picker/#properties","text":"name - string (required) Form field name label - string (required) Display label value required - string Indicates if field value is mandatory type - string The type of date picker. It can be one of date , time or datetime . Default value is date . displayDateFormat - string Date format that will be used to format date on the user interface. This does not affect the way the date is saved. Format should be accepted by date-fn\u2019s format function . displayTimeFormat - string Time format that will be used to format time on the user interface. This does not affect the way the time is saved. Format should be accepted by date-fn\u2019s format function . minDate - string Lower boundary of the selected date or datetime. Format should be: yyyy-MM-dd . E.g.: 2022-02-02 maxDate - string Upper boundary of the selected date or datetime. Format should be: yyyy-MM-dd . E.g.: 2022-02-02 after - string Comma separated values of other datepickers. These datepickers' values should be lower than the selected date. (This validation should be used in pair with before on the reference field.) before - string Comma separated values of other datepickers. These datepickers' values should be higher the selected date. (This validation should be used in pair with after on the reference field.)","title":"Properties"},{"location":"cms/developers/dialogs/date-picker/#example","text":"\"displayDate\" : { \"sling:resourceType\" : \"wcm/dialogs/components/datepicker\" , \"name\" : \"displayDate\" , \"label\" : \"Display date\" , \"type\" : \"date\" , \"displayDateFormat\" : \"YYYY-MM-DD\" }","title":"Example"},{"location":"cms/developers/dialogs/include/","text":"Include wcm/dialogs/components/include Description The Include dialog field allows users to include other components within a parent component. It is typically used to avoid code duplication. When you have a dialog field (e.g., a Select dialog field for heading levels) that is used in multiple places, you can extract it to a common place and include it in multiple locations rather than duplicating it within each one. Properties path - string (optional if we customize the included component. See customization below) The path of the resource that needs to be included. namespace - string (optional) If we include the same component multiple times, then we will have a name conflict. To avoid this, we can set the namespace property. The name properties' values will be prepended by this namespace. For example: if the included component's name property is authorName and we set book1 as the namespace, the name will be book1/authorName when reading and saving the dialog. \"headingLevel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/headinglevel\" , \"namespace\" : \"secondsubtitle\" } Customization Sometimes it is not enough to include other components and use the default settings provided by the included component. We can easily customize it by creating a child node named include . If we do so, we have to set the sling:resourceSuperType property. Its value should be the path of the component that we want to include. After sling:resourceSuperType is set up correctly, we can add properties to the include node. Additionally, we can create a subtree that is similar to the included component's subtree. We can also add or override properties on child nodes. Note: under the hood, the Sling resource merger does this work for us. This means that we can use properties like sling:hideResource , sling:orderBefore , etc. Included component { \"sling:resourceType\" : \"wcm/dialogs/components/radio\" , \"name\" : \"headingLevel\" , \"description\" : \"HTML heading level help to communicate the organization and hierarchy of the content (for SEO and accessibility)\" , \"label\" : \"Heading level\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H1\" , \"value\" : \"h1\" }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H2\" , \"selected\" : true , \"value\" : \"h2\" }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H3\" , \"value\" : \"h3\" } } Include component \"includedHeadingLevel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"include\" : { \"sling:resourceSuperType\" : \"/libs/howlite/components/common/headinglevel\" , \"label\" : \"Custom label\" , \"h1\" : { \"sling:hideResource\" : \"true\" }, \"h2\" : { \"selected\" : false }, \"h3\" : { \"selected\" : true }, \"h4\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H4\" , \"value\" : \"h4\" } } } Result: (this will be included in the end) { \"sling:resourceType\" : \"wcm/dialogs/components/radio\" , \"name\" : \"headingLevel\" , \"description\" : \"HTML heading level help to communicate the organization and hierarchy of the content (for SEO and accessibility)\" , \"label\" : \"Custom label\" , \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H2\" , \"value\" : \"h2\" }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H3\" , \"selected\" : true , \"value\" : \"h3\" }, \"h4\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H4\" , \"value\" : \"h4\" } }","title":"Include"},{"location":"cms/developers/dialogs/include/#include","text":"wcm/dialogs/components/include","title":"Include"},{"location":"cms/developers/dialogs/include/#description","text":"The Include dialog field allows users to include other components within a parent component. It is typically used to avoid code duplication. When you have a dialog field (e.g., a Select dialog field for heading levels) that is used in multiple places, you can extract it to a common place and include it in multiple locations rather than duplicating it within each one.","title":"Description"},{"location":"cms/developers/dialogs/include/#properties","text":"path - string (optional if we customize the included component. See customization below) The path of the resource that needs to be included. namespace - string (optional) If we include the same component multiple times, then we will have a name conflict. To avoid this, we can set the namespace property. The name properties' values will be prepended by this namespace. For example: if the included component's name property is authorName and we set book1 as the namespace, the name will be book1/authorName when reading and saving the dialog. \"headingLevel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/headinglevel\" , \"namespace\" : \"secondsubtitle\" }","title":"Properties"},{"location":"cms/developers/dialogs/include/#customization","text":"Sometimes it is not enough to include other components and use the default settings provided by the included component. We can easily customize it by creating a child node named include . If we do so, we have to set the sling:resourceSuperType property. Its value should be the path of the component that we want to include. After sling:resourceSuperType is set up correctly, we can add properties to the include node. Additionally, we can create a subtree that is similar to the included component's subtree. We can also add or override properties on child nodes. Note: under the hood, the Sling resource merger does this work for us. This means that we can use properties like sling:hideResource , sling:orderBefore , etc.","title":"Customization"},{"location":"cms/developers/dialogs/include/#included-component","text":"{ \"sling:resourceType\" : \"wcm/dialogs/components/radio\" , \"name\" : \"headingLevel\" , \"description\" : \"HTML heading level help to communicate the organization and hierarchy of the content (for SEO and accessibility)\" , \"label\" : \"Heading level\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H1\" , \"value\" : \"h1\" }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H2\" , \"selected\" : true , \"value\" : \"h2\" }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H3\" , \"value\" : \"h3\" } }","title":"Included component"},{"location":"cms/developers/dialogs/include/#include-component","text":"\"includedHeadingLevel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"include\" : { \"sling:resourceSuperType\" : \"/libs/howlite/components/common/headinglevel\" , \"label\" : \"Custom label\" , \"h1\" : { \"sling:hideResource\" : \"true\" }, \"h2\" : { \"selected\" : false }, \"h3\" : { \"selected\" : true }, \"h4\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H4\" , \"value\" : \"h4\" } } }","title":"Include component"},{"location":"cms/developers/dialogs/include/#result-this-will-be-included-in-the-end","text":"{ \"sling:resourceType\" : \"wcm/dialogs/components/radio\" , \"name\" : \"headingLevel\" , \"description\" : \"HTML heading level help to communicate the organization and hierarchy of the content (for SEO and accessibility)\" , \"label\" : \"Custom label\" , \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H2\" , \"value\" : \"h2\" }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H3\" , \"selected\" : true , \"value\" : \"h3\" }, \"h4\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H4\" , \"value\" : \"h4\" } }","title":"Result: (this will be included in the end)"},{"location":"cms/developers/dialogs/multifield/","text":"Multifield wcm/dialogs/components/textfield Description The Multifield component allows users to add, reorder or remove multiple instances of a field (or fields). In a simple case, Multifield can be used with a single field (e.g., TextField, see example below). However, it can also create a complex component that acts as an aggregate of multiple subcomponents (such as address entries in example below) or use nested Multifield (such as address inside of the users is same example). The field used in Multifield components behaves the same as it does within a plain dialog (e.g., when hiding labels). Properties name - string (required) Form field name label - string Display label value required Indicates if field value is mandatory Example Multifield with TextField: \"users\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"users\" , \"label\" : \"users\" , \"name\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"name\" , \"label\" : \"name\" } } Multifield with nested Multiefield containing 2 fields. \"users\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"users\" , \"label\" : \"Users\" , \"namefield\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"name\" , \"label\" : \"Name\" }, \"addresses\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"addresses\" , \"label\" : \"Addresses\" , \"street\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"street\" , \"label\" : \"Street\" }, \"city\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"city\" , \"label\" : \"City\" } } }","title":"Multifield"},{"location":"cms/developers/dialogs/multifield/#multifield","text":"wcm/dialogs/components/textfield","title":"Multifield"},{"location":"cms/developers/dialogs/multifield/#description","text":"The Multifield component allows users to add, reorder or remove multiple instances of a field (or fields). In a simple case, Multifield can be used with a single field (e.g., TextField, see example below). However, it can also create a complex component that acts as an aggregate of multiple subcomponents (such as address entries in example below) or use nested Multifield (such as address inside of the users is same example). The field used in Multifield components behaves the same as it does within a plain dialog (e.g., when hiding labels).","title":"Description"},{"location":"cms/developers/dialogs/multifield/#properties","text":"name - string (required) Form field name label - string Display label value required Indicates if field value is mandatory","title":"Properties"},{"location":"cms/developers/dialogs/multifield/#example","text":"Multifield with TextField: \"users\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"users\" , \"label\" : \"users\" , \"name\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"name\" , \"label\" : \"name\" } } Multifield with nested Multiefield containing 2 fields. \"users\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"users\" , \"label\" : \"Users\" , \"namefield\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"name\" , \"label\" : \"Name\" }, \"addresses\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"addresses\" , \"label\" : \"Addresses\" , \"street\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"street\" , \"label\" : \"Street\" }, \"city\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"city\" , \"label\" : \"City\" } } }","title":"Example"},{"location":"cms/developers/dialogs/number-field/","text":"Number Field wcm/dialogs/components/numberfield Description The Number Field component allows the user to enter numbers. If this is empty, the respective property in JCR does not exist. Properties name - string (required) Form field name label - string Display label value min - string Minimal value possible to enter max - string Maximum value possible to enter step - string (default value = 1) The value granularity. number - must be greater than zero. Indicates that the field accepts only values at multiples of the step. \"any\" - special value. Indicates that the value can be in any number. required Indicates whether the field value is mandatory description - string Display description value as a tooltip Example \"width\" : { \"sling:resourceType\" : \"wcm/dialogs/components/numberfield\" , \"name\" : \"width\" , \"label\" : \"Width\" , \"min\" : 0 , \"max\" : 1000 , \"step\" : 0.01 }","title":"Number Field"},{"location":"cms/developers/dialogs/number-field/#number-field","text":"wcm/dialogs/components/numberfield","title":"Number Field"},{"location":"cms/developers/dialogs/number-field/#description","text":"The Number Field component allows the user to enter numbers. If this is empty, the respective property in JCR does not exist.","title":"Description"},{"location":"cms/developers/dialogs/number-field/#properties","text":"name - string (required) Form field name label - string Display label value min - string Minimal value possible to enter max - string Maximum value possible to enter step - string (default value = 1) The value granularity. number - must be greater than zero. Indicates that the field accepts only values at multiples of the step. \"any\" - special value. Indicates that the value can be in any number. required Indicates whether the field value is mandatory description - string Display description value as a tooltip","title":"Properties"},{"location":"cms/developers/dialogs/number-field/#example","text":"\"width\" : { \"sling:resourceType\" : \"wcm/dialogs/components/numberfield\" , \"name\" : \"width\" , \"label\" : \"Width\" , \"min\" : 0 , \"max\" : 1000 , \"step\" : 0.01 }","title":"Example"},{"location":"cms/developers/dialogs/pathpicker/","text":"Path Picker wcm/dialogs/components/pathpicker Description The Path Picker component is an input that allows the user to select the path of a resource from a repository or via an external link. If the value starts with / the path picker will autosuggest possible values. Properties name - string (required) Form field name label - string Display label value required - string Indicates if field value is mandatory rootPath - string If set, suggestions are filtered to the given root path. forceRootPath - string (if not defined false ) Indicates whether the input value should be validated to start with the given rootPath value. removeIfEmpty - string (if not defined false ) Indicates if property in JCR will be removed if it contains empty String, or will be retained with that value description - string Display description value as a tooltip placeholder - string Override the placeholder text that appears when the value is empty. types - Array<string> Filter autosuggestion path by jcr:primaryType Example \"link\" : { \"sling:resourceType\" : \"wcm/dialogs/components/pathpicker\" , \"rootPath\" : \"/content\" , \"name\" : \"link\" , \"label\" : \"URL\" , \"forceRootPath\" : true , \"types\" : [ \"ws:PagesSpace\" , \"ws:Pages\" , \"ws:Page\" ] }","title":"Path Picker"},{"location":"cms/developers/dialogs/pathpicker/#path-picker","text":"wcm/dialogs/components/pathpicker","title":"Path Picker"},{"location":"cms/developers/dialogs/pathpicker/#description","text":"The Path Picker component is an input that allows the user to select the path of a resource from a repository or via an external link. If the value starts with / the path picker will autosuggest possible values.","title":"Description"},{"location":"cms/developers/dialogs/pathpicker/#properties","text":"name - string (required) Form field name label - string Display label value required - string Indicates if field value is mandatory rootPath - string If set, suggestions are filtered to the given root path. forceRootPath - string (if not defined false ) Indicates whether the input value should be validated to start with the given rootPath value. removeIfEmpty - string (if not defined false ) Indicates if property in JCR will be removed if it contains empty String, or will be retained with that value description - string Display description value as a tooltip placeholder - string Override the placeholder text that appears when the value is empty. types - Array<string> Filter autosuggestion path by jcr:primaryType","title":"Properties"},{"location":"cms/developers/dialogs/pathpicker/#example","text":"\"link\" : { \"sling:resourceType\" : \"wcm/dialogs/components/pathpicker\" , \"rootPath\" : \"/content\" , \"name\" : \"link\" , \"label\" : \"URL\" , \"forceRootPath\" : true , \"types\" : [ \"ws:PagesSpace\" , \"ws:Pages\" , \"ws:Page\" ] }","title":"Example"},{"location":"cms/developers/dialogs/radio/","text":"Radio wcm/dialogs/components/radio Description The Radio component allows users to select exactly one from multiple available options. Properties name - string (required) Form field name label - string (required) Display label value description - string Display description value as a tooltip required - string Indicates if field value is mandatory removeIfEmpty - string (if not defined false ) Indicates if property in JCR will be removed if it contains empty String, or will be retained with that value To preselect value see the Default state section It should contain child nodes with options. One of these options will be checked by default. If no option is selected to be checked by default, the first one will be automatically chosen. If more than one option is selected to be checked by default, only the first will be chosen. Option wcm/dialogs/components/radio/option Description Defines one of the available options. Properties label - string (required) Display label value - string (required) Value of choosen option Example { \"sling:resourceType\" : \"wcm/dialogs/components/radio\" , \"name\" : \"headingLevel\" , \"description\" : \"HTML heading level help to communicate the organization and hierarchy of the content (for SEO and accessibility)\" , \"label\" : \"Heading level\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H1\" , \"value\" : \"h1\" }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H2\" , \"selected\" : true , \"value\" : \"h2\" }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H3\" , \"value\" : \"h3\" } }","title":"Radio"},{"location":"cms/developers/dialogs/radio/#radio","text":"wcm/dialogs/components/radio","title":"Radio"},{"location":"cms/developers/dialogs/radio/#description","text":"The Radio component allows users to select exactly one from multiple available options.","title":"Description"},{"location":"cms/developers/dialogs/radio/#properties","text":"name - string (required) Form field name label - string (required) Display label value description - string Display description value as a tooltip required - string Indicates if field value is mandatory removeIfEmpty - string (if not defined false ) Indicates if property in JCR will be removed if it contains empty String, or will be retained with that value To preselect value see the Default state section It should contain child nodes with options. One of these options will be checked by default. If no option is selected to be checked by default, the first one will be automatically chosen. If more than one option is selected to be checked by default, only the first will be chosen.","title":"Properties"},{"location":"cms/developers/dialogs/radio/#option","text":"wcm/dialogs/components/radio/option","title":"Option"},{"location":"cms/developers/dialogs/radio/#description_1","text":"Defines one of the available options.","title":"Description"},{"location":"cms/developers/dialogs/radio/#properties_1","text":"label - string (required) Display label value - string (required) Value of choosen option","title":"Properties"},{"location":"cms/developers/dialogs/radio/#example","text":"{ \"sling:resourceType\" : \"wcm/dialogs/components/radio\" , \"name\" : \"headingLevel\" , \"description\" : \"HTML heading level help to communicate the organization and hierarchy of the content (for SEO and accessibility)\" , \"label\" : \"Heading level\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H1\" , \"value\" : \"h1\" }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H2\" , \"selected\" : true , \"value\" : \"h2\" }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H3\" , \"value\" : \"h3\" } }","title":"Example"},{"location":"cms/developers/dialogs/richtext-editor/","text":"Rich Text Editor wcm/dialogs/components/richtext Description The Rich Text Editor dialog field provides many features that allow authors to edit text content. This dialog field requires a configuration , which defines which features should be available and how the menu bar be displayed. Properties name - string (required) Form field name label - string (optional) Display label value required - string (optional, default false ) Indicates if field value is mandatory removeIfEmpty - string (optional, default false ) Indicates if property in JCR will be removed if it contains empty String, or will be retained with that value description - string (optional) Display description value as tooltip configuration - string (optional, default /libs/wcm/dialogs/components/richtext/configurations/default ) Absolute path to configuration node. The configuration can be also defined inline; see RichText Editor - configuration for details Example: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" }","title":"Rich Text Editor"},{"location":"cms/developers/dialogs/richtext-editor/#rich-text-editor","text":"wcm/dialogs/components/richtext","title":"Rich Text Editor"},{"location":"cms/developers/dialogs/richtext-editor/#description","text":"The Rich Text Editor dialog field provides many features that allow authors to edit text content. This dialog field requires a configuration , which defines which features should be available and how the menu bar be displayed.","title":"Description"},{"location":"cms/developers/dialogs/richtext-editor/#properties","text":"name - string (required) Form field name label - string (optional) Display label value required - string (optional, default false ) Indicates if field value is mandatory removeIfEmpty - string (optional, default false ) Indicates if property in JCR will be removed if it contains empty String, or will be retained with that value description - string (optional) Display description value as tooltip configuration - string (optional, default /libs/wcm/dialogs/components/richtext/configurations/default ) Absolute path to configuration node. The configuration can be also defined inline; see RichText Editor - configuration for details Example: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" }","title":"Properties"},{"location":"cms/developers/dialogs/richtext-editor/configuration/","text":"Rich Text Editor Configuration Configuration defines RTE toolbar and functionalities Using configuration RTE provides configurations which can be used and customized: /libs/wcm/dialogs/components/richtext/configurations/default - default configuration; dedicated for views with big width, like modals /libs/wcm/dialogs/components/richtext/configurations/compact - configuration with reduced toolbar - might be used in narrow views, like Side Panel Configuration can be referenced by path or defined inline. If inline configuration is defined then referenced configuration is ignored. Example using default configuration defined by RTE: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" } Referencing configuration RTE component allows to define configuration string propery. Value is a absolute path to configuration node. Referencing configuration by path: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" , \"configuration\" : \"/apps/myapp/components/common/rte/myconfiguration\" } Inline configuration Inline configuration can be definde in dialog under RTE filed in node named configuration . Inline configuration defined by RTE: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" , \"configuration\" : { \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } } } } Extending and overriding configuration Configuration (referenced or inline) can extend other configuration by using sling:resourceSuperType , see Sling Resource Merger (/mnt/override) and customize it with options comming from Resource Merger, like sling:hideChildren . \"configuration\" : { \"sling:resourceSuperType\" : \"wcm/dialogs/components/richtext/configurations/default\" , \"sling:hideChildren\" : \"[italic]\" , \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } } } Building configuration Configuration is prepared by two kinds of components: UI - components define UI element added to menu bar. plugin - components provide functionality Separation UI and plugin components allows to define toolbar in many variants depending of authors needs. E.g. bold action can be added as a separated button or one of buttons grouped in the dropdown, different headings can be added in a dropdown list or as a separated buttons. There is also possibility to create dedicated UI components and build whole toolbar using just them, or create new plugin and add it to toolbar using existing UI component. Configuration examples: \"textstyle\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown\" , \"title\" : \"Text Style\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 1\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 1 } }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 2\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 2 } }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 3\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 3 } } }, \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }, \"italic\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Italic\" , \"icon\" : \"format_italic\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/italic\" } } \"textformat\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/buttondropdown\" , \"icon\" : \"more_horiz\" , \"activable\" : true , \"title\" : \"Text Format\" , \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }, \"italic\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Italic\" , \"icon\" : \"format_italic\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/italic\" } } }, \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Heading 1\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 1 } }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Heading 2\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 2 } }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Heading 3\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 3 } } Available Components Available UI components: Button Button Dropdown Dropdown Link Available plugin components are described here . Custom Components There is a possibility to prepare custom components. To do so there is a need to prepare files according to UI or plugin specification. In case of plugin component there is also need to provide TipTap extensions. They can be taken from existing extensions or written by a developer according to TipTap extension interface.","title":"Rich Text Editor Configuration"},{"location":"cms/developers/dialogs/richtext-editor/configuration/#rich-text-editor-configuration","text":"Configuration defines RTE toolbar and functionalities","title":"Rich Text Editor Configuration"},{"location":"cms/developers/dialogs/richtext-editor/configuration/#using-configuration","text":"RTE provides configurations which can be used and customized: /libs/wcm/dialogs/components/richtext/configurations/default - default configuration; dedicated for views with big width, like modals /libs/wcm/dialogs/components/richtext/configurations/compact - configuration with reduced toolbar - might be used in narrow views, like Side Panel Configuration can be referenced by path or defined inline. If inline configuration is defined then referenced configuration is ignored. Example using default configuration defined by RTE: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" }","title":"Using configuration"},{"location":"cms/developers/dialogs/richtext-editor/configuration/#referencing-configuration","text":"RTE component allows to define configuration string propery. Value is a absolute path to configuration node. Referencing configuration by path: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" , \"configuration\" : \"/apps/myapp/components/common/rte/myconfiguration\" }","title":"Referencing configuration"},{"location":"cms/developers/dialogs/richtext-editor/configuration/#inline-configuration","text":"Inline configuration can be definde in dialog under RTE filed in node named configuration . Inline configuration defined by RTE: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" , \"configuration\" : { \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } } } }","title":"Inline configuration"},{"location":"cms/developers/dialogs/richtext-editor/configuration/#extending-and-overriding-configuration","text":"Configuration (referenced or inline) can extend other configuration by using sling:resourceSuperType , see Sling Resource Merger (/mnt/override) and customize it with options comming from Resource Merger, like sling:hideChildren . \"configuration\" : { \"sling:resourceSuperType\" : \"wcm/dialogs/components/richtext/configurations/default\" , \"sling:hideChildren\" : \"[italic]\" , \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } } }","title":"Extending and overriding configuration"},{"location":"cms/developers/dialogs/richtext-editor/configuration/#building-configuration","text":"Configuration is prepared by two kinds of components: UI - components define UI element added to menu bar. plugin - components provide functionality Separation UI and plugin components allows to define toolbar in many variants depending of authors needs. E.g. bold action can be added as a separated button or one of buttons grouped in the dropdown, different headings can be added in a dropdown list or as a separated buttons. There is also possibility to create dedicated UI components and build whole toolbar using just them, or create new plugin and add it to toolbar using existing UI component. Configuration examples: \"textstyle\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown\" , \"title\" : \"Text Style\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 1\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 1 } }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 2\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 2 } }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 3\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 3 } } }, \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }, \"italic\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Italic\" , \"icon\" : \"format_italic\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/italic\" } } \"textformat\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/buttondropdown\" , \"icon\" : \"more_horiz\" , \"activable\" : true , \"title\" : \"Text Format\" , \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }, \"italic\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Italic\" , \"icon\" : \"format_italic\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/italic\" } } }, \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Heading 1\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 1 } }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Heading 2\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 2 } }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Heading 3\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 3 } }","title":"Building configuration"},{"location":"cms/developers/dialogs/richtext-editor/configuration/#available-components","text":"Available UI components: Button Button Dropdown Dropdown Link Available plugin components are described here .","title":"Available Components"},{"location":"cms/developers/dialogs/richtext-editor/configuration/#custom-components","text":"There is a possibility to prepare custom components. To do so there is a need to prepare files according to UI or plugin specification. In case of plugin component there is also need to provide TipTap extensions. They can be taken from existing extensions or written by a developer according to TipTap extension interface.","title":"Custom Components"},{"location":"cms/developers/dialogs/richtext-editor/plugin-components/","text":"Rich Text Editor Plugin Components Plugin Component is a resource which allow to register feature allows to edit text content. Plugin component should provide configuration in JSON format: { \"type\" : ... , \"configuration\" : { ... } } Where type should point script with plugin definition and configuration contains all aditional properties used by plugin. RichText editor is based on TipTap and plugins are responsible for interaction with TipTap Editor. Plugin defintinon should provide methods: const Plugin = ( configuration ) => { return { getTipTapExtensions : () => { return [...] }, getAction : ( context ) => { return { execute : ( state ) => {} } }, getState : ( context ) => { return {...} } } } export default Plugin ; Where: getTipTapExtensions - should return TipTap extensions required by plugin. getAction - should return object with execute method. This method will be executed by UI Component. It can get current state as a paramater. getState - should return an object with properties required to build proper state of UI Component. Object with this same structure is expected in execute method. configuration - contains data from JCR config context - Contains key editor referencing Tip Tap editor. state - Object with same structure as returned by getState Available plugins Plugin Example Usage Bold wcm/dialogs/components /richtext/plugin/bold \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/bold\" } Italic wcm/dialogs/components /richtext/plugin/italic \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/italic\" } Underline wcm/dialogs/components /richtext/plugin/underline \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/underline\" } Strikethrough wcm/dialogs/components /richtext/plugin/strikethrough \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/strikethrough\" } BulletList wcm/dialogs/components /richtext/plugin/bulletlist \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/bulletlist\" } OrderedList wcm/dialogs/components /richtext/plugin/orderedlist \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/orderedlist\" } Paragraph wcm/dialogs/components /richtext/plugin/paragraph \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/paragraph\" } ` Heading wcm/dialogs/components /richtext/plugin/heading \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/heading\", \u2003\u2003\"level\": \"3\"\" } level \u2003\u2003- number (default: 1) \u2003\u2003 - Heading level (1-6) Link wcm/dialogs/components /richtext/plugin/link \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/link\"\" } UnsetLink wcm/dialogs/components /richtext/plugin/unsetlink \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/unsetlink\"\" } ClearFormatting wcm/dialogs/components /richtext/plugin/clearformatting \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/clearformatting\"\" } HardBreak wcm/dialogs/components /richtext/plugin/hardbreak \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/hardbreak\"\" } TextAlign wcm/dialogs/components /richtext/plugin/textalign \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/textalignment\", \u2003\u2003\"alignment\": \"right\"\" } alignment \u2003\u2003- string (default: 'left') \u2003\u2003- Text alignment ('left', \u2018center', \u2018right', 'justify') Undo wcm/dialogs/components /richtext/plugin/undo \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/undo\" } Redo wcm/dialogs/components /richtext/plugin/redo \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/redo\" } Interfaces All the plugins provides some interfaces that should be met by UI components: Plugin getAction getState Bold Italic Underline Strikethrough BulletList OrderedList Paragraph Heading TextAlign { execute({}) => {...} } { isActive: ... } UnsetLink Undo Redo { execute({}) => {...} } { isDisabled: ... } ClearFormatting HardBreak { execute({}) => {...} } {} Link { execute({ href, target }) => {...}} { isActive: ..., href: ..., target: ... }","title":"Rich Text Editor Plugin Components"},{"location":"cms/developers/dialogs/richtext-editor/plugin-components/#rich-text-editor-plugin-components","text":"Plugin Component is a resource which allow to register feature allows to edit text content. Plugin component should provide configuration in JSON format: { \"type\" : ... , \"configuration\" : { ... } } Where type should point script with plugin definition and configuration contains all aditional properties used by plugin. RichText editor is based on TipTap and plugins are responsible for interaction with TipTap Editor. Plugin defintinon should provide methods: const Plugin = ( configuration ) => { return { getTipTapExtensions : () => { return [...] }, getAction : ( context ) => { return { execute : ( state ) => {} } }, getState : ( context ) => { return {...} } } } export default Plugin ; Where: getTipTapExtensions - should return TipTap extensions required by plugin. getAction - should return object with execute method. This method will be executed by UI Component. It can get current state as a paramater. getState - should return an object with properties required to build proper state of UI Component. Object with this same structure is expected in execute method. configuration - contains data from JCR config context - Contains key editor referencing Tip Tap editor. state - Object with same structure as returned by getState","title":"Rich Text Editor Plugin Components"},{"location":"cms/developers/dialogs/richtext-editor/plugin-components/#available-plugins","text":"Plugin Example Usage Bold wcm/dialogs/components /richtext/plugin/bold \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/bold\" } Italic wcm/dialogs/components /richtext/plugin/italic \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/italic\" } Underline wcm/dialogs/components /richtext/plugin/underline \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/underline\" } Strikethrough wcm/dialogs/components /richtext/plugin/strikethrough \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/strikethrough\" } BulletList wcm/dialogs/components /richtext/plugin/bulletlist \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/bulletlist\" } OrderedList wcm/dialogs/components /richtext/plugin/orderedlist \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/orderedlist\" } Paragraph wcm/dialogs/components /richtext/plugin/paragraph \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/paragraph\" } ` Heading wcm/dialogs/components /richtext/plugin/heading \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/heading\", \u2003\u2003\"level\": \"3\"\" } level \u2003\u2003- number (default: 1) \u2003\u2003 - Heading level (1-6) Link wcm/dialogs/components /richtext/plugin/link \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/link\"\" } UnsetLink wcm/dialogs/components /richtext/plugin/unsetlink \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/unsetlink\"\" } ClearFormatting wcm/dialogs/components /richtext/plugin/clearformatting \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/clearformatting\"\" } HardBreak wcm/dialogs/components /richtext/plugin/hardbreak \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/hardbreak\"\" } TextAlign wcm/dialogs/components /richtext/plugin/textalign \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/textalignment\", \u2003\u2003\"alignment\": \"right\"\" } alignment \u2003\u2003- string (default: 'left') \u2003\u2003- Text alignment ('left', \u2018center', \u2018right', 'justify') Undo wcm/dialogs/components /richtext/plugin/undo \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/undo\" } Redo wcm/dialogs/components /richtext/plugin/redo \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/redo\" }","title":"Available plugins"},{"location":"cms/developers/dialogs/richtext-editor/plugin-components/#interfaces","text":"All the plugins provides some interfaces that should be met by UI components: Plugin getAction getState Bold Italic Underline Strikethrough BulletList OrderedList Paragraph Heading TextAlign { execute({}) => {...} } { isActive: ... } UnsetLink Undo Redo { execute({}) => {...} } { isDisabled: ... } ClearFormatting HardBreak { execute({}) => {...} } {} Link { execute({ href, target }) => {...}} { isActive: ..., href: ..., target: ... }","title":"Interfaces"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/","text":"Rich Text Editor UI Components UI Component is a resource which will be used to resolve script for rendering configuration node as JSON. UI Components are used as resource types of resources used to buid RTE tool bar. JSON object rendered by UI Component should follow format: { \"type\" : ... , \"configuration\" : { ... }, \"children\" : [ ... ], \"plugin\" : ... } Where: type - should point script with UI component definition configuration - contains propeties required by component to render properly children - contains list of subcomponents. It is used by components grouping another ones in some structure. plugin - plugin component configuration. Component gets properties: configuration - contains data from JCR config state - current state gets from plugin getState method action - action run on event executed by component. It\u2019s get from plugin getAction method children - children components. const Component = ({ configuration , state , action , children }) => { return ( <>< /> ) }","title":"Rich Text Editor UI Components"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/#rich-text-editor-ui-components","text":"UI Component is a resource which will be used to resolve script for rendering configuration node as JSON. UI Components are used as resource types of resources used to buid RTE tool bar. JSON object rendered by UI Component should follow format: { \"type\" : ... , \"configuration\" : { ... }, \"children\" : [ ... ], \"plugin\" : ... } Where: type - should point script with UI component definition configuration - contains propeties required by component to render properly children - contains list of subcomponents. It is used by components grouping another ones in some structure. plugin - plugin component configuration. Component gets properties: configuration - contains data from JCR config state - current state gets from plugin getState method action - action run on event executed by component. It\u2019s get from plugin getAction method children - children components. const Component = ({ configuration , state , action , children }) => { return ( <>< /> ) }","title":"Rich Text Editor UI Components"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/button/","text":"Button wcm/dialogs/components/richtext/ui/button Description Component allows to add edit action as a button visible in menu bar. Button can be displayed with title or icon. Configuration title - string (required) Action title. It will be visible in a tooltip. It also will be shown on button in case of lack of icon property icon - string Icon name. If set then button will be visible with defined icon. Available icons can be found in Material Icons font. State isActive - boolean Defines if button should be checked as active. isDisabled - boolean Defines if button should be disabled. Children plugin - node defines edit action caused by a button. Example \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }","title":"Button"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/button/#button","text":"wcm/dialogs/components/richtext/ui/button","title":"Button"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/button/#description","text":"Component allows to add edit action as a button visible in menu bar. Button can be displayed with title or icon.","title":"Description"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/button/#configuration","text":"title - string (required) Action title. It will be visible in a tooltip. It also will be shown on button in case of lack of icon property icon - string Icon name. If set then button will be visible with defined icon. Available icons can be found in Material Icons font.","title":"Configuration"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/button/#state","text":"isActive - boolean Defines if button should be checked as active. isDisabled - boolean Defines if button should be disabled.","title":"State"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/button/#children","text":"plugin - node defines edit action caused by a button.","title":"Children"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/button/#example","text":"\"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }","title":"Example"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/button-dropdown/","text":"Button Dropdown wcm/dialogs/components/richtext/ui/buttondropdown Description: Component allows to add buttons group to menu bar. Buttons should be added as a children. Configuration title - string (required) Group title. It\u2019s displayed as a tooltip. icon - string Icon name from Material Icons. If pesent than dropdown will be presented under button with given icon. Otherwise dropdown will be presented under button looks like button with first active action or like first available button - if none action is active. activable - boolean If true means that button will be presented as active if any action under it is active. Children Button - Nodes defining available actions. Example \"textalign\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/buttondropdown\" , \"title\" : \"Text Alignment\" , \"left\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Left Align\" , \"icon\" : \"format_align_left\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"left\" } }, \"center\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Center Align\" , \"icon\" : \"format_align_center\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"center\" } }, \"right\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Right Align\" , \"icon\" : \"format_align_right\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"right\" } }, \"justify\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Justify Align\" , \"icon\" : \"format_align_justify\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"justify\" } } }","title":"Button Dropdown"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/button-dropdown/#button-dropdown","text":"wcm/dialogs/components/richtext/ui/buttondropdown Description: Component allows to add buttons group to menu bar. Buttons should be added as a children.","title":"Button Dropdown"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/button-dropdown/#configuration","text":"title - string (required) Group title. It\u2019s displayed as a tooltip. icon - string Icon name from Material Icons. If pesent than dropdown will be presented under button with given icon. Otherwise dropdown will be presented under button looks like button with first active action or like first available button - if none action is active. activable - boolean If true means that button will be presented as active if any action under it is active.","title":"Configuration"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/button-dropdown/#children","text":"Button - Nodes defining available actions.","title":"Children"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/button-dropdown/#example","text":"\"textalign\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/buttondropdown\" , \"title\" : \"Text Alignment\" , \"left\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Left Align\" , \"icon\" : \"format_align_left\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"left\" } }, \"center\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Center Align\" , \"icon\" : \"format_align_center\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"center\" } }, \"right\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Right Align\" , \"icon\" : \"format_align_right\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"right\" } }, \"justify\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Justify Align\" , \"icon\" : \"format_align_justify\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"justify\" } } }","title":"Example"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/dropdown/","text":"Dropdown wcm/dialogs/components/richtext/ui/dropdown Description Component allows to add actions group to menu bar. Each action should be defined as a DropdownItem child. Configuration title - string (required) Group title. It\u2019s displayed as a tooltip. Children DropdownItem - Nodes defining available actions. DropdownItem wcm/dialogs/components/richtext/ui/dropdown/dropdownitem Description Component allows to add action to dropdown. Configuration title - string (required) Action title. It\u2019s displayed in a dropdown. State isActive - boolean Defines if item should be checked as active. Children plugin - node defines edit action caused by an item. Example \"textstyle\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown\" , \"title\" : \"Text Style\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 1\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 1 } }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 2\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 2 } }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 3\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 3 } }, \"h4\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 4\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 4 } }, \"h5\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 5\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 5 } }, \"h6\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 6\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 6 } }, \"paragraph\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Paragraph\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/paragraph\" } } }","title":"Dropdown"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/dropdown/#dropdown","text":"wcm/dialogs/components/richtext/ui/dropdown","title":"Dropdown"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/dropdown/#description","text":"Component allows to add actions group to menu bar. Each action should be defined as a DropdownItem child.","title":"Description"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/dropdown/#configuration","text":"title - string (required) Group title. It\u2019s displayed as a tooltip.","title":"Configuration"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/dropdown/#children","text":"DropdownItem - Nodes defining available actions.","title":"Children"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/dropdown/#dropdownitem","text":"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem","title":"DropdownItem"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/dropdown/#description_1","text":"Component allows to add action to dropdown.","title":"Description"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/dropdown/#configuration_1","text":"title - string (required) Action title. It\u2019s displayed in a dropdown.","title":"Configuration"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/dropdown/#state","text":"isActive - boolean Defines if item should be checked as active.","title":"State"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/dropdown/#children_1","text":"plugin - node defines edit action caused by an item.","title":"Children"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/dropdown/#example","text":"\"textstyle\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown\" , \"title\" : \"Text Style\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 1\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 1 } }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 2\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 2 } }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 3\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 3 } }, \"h4\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 4\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 4 } }, \"h5\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 5\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 5 } }, \"h6\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 6\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 6 } }, \"paragraph\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Paragraph\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/paragraph\" } } }","title":"Example"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/link/","text":"Link wcm/dialogs/components/richtext/ui/link Description Component dedicated for link plugin. It opens a dialog in witch author can add link and select target type. It provides href and target properties to execute method. It expects also both href and target properties returning from plugin getState method. Configuration title - string (required) Action title. It will be visible in a tooltip. It also will be shown on button in case of lack of icon property icon - string Icon name. If set then button will be visible with defined icon. Available icons can be found in Material Icons font. State isActive - boolean Defines if button should be checked as active. href - string Define link destination address. target - string Specifies where to open the linked document. Children plugin- node defines edit action caused by a button. Example \"link\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/link\" , \"title\" : \"Link\" , \"icon\" : \"link\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/link\" } }","title":"Link"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/link/#link","text":"wcm/dialogs/components/richtext/ui/link","title":"Link"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/link/#description","text":"Component dedicated for link plugin. It opens a dialog in witch author can add link and select target type. It provides href and target properties to execute method. It expects also both href and target properties returning from plugin getState method.","title":"Description"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/link/#configuration","text":"title - string (required) Action title. It will be visible in a tooltip. It also will be shown on button in case of lack of icon property icon - string Icon name. If set then button will be visible with defined icon. Available icons can be found in Material Icons font.","title":"Configuration"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/link/#state","text":"isActive - boolean Defines if button should be checked as active. href - string Define link destination address. target - string Specifies where to open the linked document.","title":"State"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/link/#children","text":"plugin- node defines edit action caused by a button.","title":"Children"},{"location":"cms/developers/dialogs/richtext-editor/ui-components/link/#example","text":"\"link\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/link\" , \"title\" : \"Link\" , \"icon\" : \"link\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/link\" } }","title":"Example"},{"location":"cms/developers/dialogs/select/","text":"Select wcm/dialogs/components/select Description The Select dialog field allows the user to choose one of multiple options. Properties name - string (required) Form field name label - string (required) Display label value required - string Indicates if field value is mandatory description - string Display description value as a tooltip It should contain child nodes with options: SelectItem wcm/dialogs/components/selectitem Description Defines one of the available option. Properties label - string (required) Display label value - string (required) Value of choosen option To preselect value see the Default state section Example \"icon\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select\" , \"name\" : \"socialLinkIcon\" , \"label\" : \"Social Link icon\" , \"linkedin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"LinkedIn\" , \"value\" : \"icon-linkedin\" }, \"facebook\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Facebook\" , \"value\" : \"icon-facebook\" }, \"twitter\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Twitter\" , \"value\" : \"icon-twitter\" }, \"instagram\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Instagram\" , \"value\" : \"icon-instagram\" } }","title":"Select"},{"location":"cms/developers/dialogs/select/#select","text":"wcm/dialogs/components/select","title":"Select"},{"location":"cms/developers/dialogs/select/#description","text":"The Select dialog field allows the user to choose one of multiple options.","title":"Description"},{"location":"cms/developers/dialogs/select/#properties","text":"name - string (required) Form field name label - string (required) Display label value required - string Indicates if field value is mandatory description - string Display description value as a tooltip It should contain child nodes with options:","title":"Properties"},{"location":"cms/developers/dialogs/select/#selectitem","text":"wcm/dialogs/components/selectitem","title":"SelectItem"},{"location":"cms/developers/dialogs/select/#description_1","text":"Defines one of the available option.","title":"Description"},{"location":"cms/developers/dialogs/select/#properties_1","text":"label - string (required) Display label value - string (required) Value of choosen option To preselect value see the Default state section","title":"Properties"},{"location":"cms/developers/dialogs/select/#example","text":"\"icon\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select\" , \"name\" : \"socialLinkIcon\" , \"label\" : \"Social Link icon\" , \"linkedin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"LinkedIn\" , \"value\" : \"icon-linkedin\" }, \"facebook\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Facebook\" , \"value\" : \"icon-facebook\" }, \"twitter\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Twitter\" , \"value\" : \"icon-twitter\" }, \"instagram\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Instagram\" , \"value\" : \"icon-instagram\" } }","title":"Example"},{"location":"cms/developers/dialogs/tabs/","text":"Tabs wcm/dialogs/components/tabs Description The Tabs dialog field allows the user to add a tab panel. Example \"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"tabOne\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab One\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" } }, \"tabTwo\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab Two\" , \"image\" : { \"sling:resourceType\" : \"wcm/dialogs/components/assetreference\" , \"mimeTypes\" : [ \"image/*\" ], \"name\" : \"image\" , \"label\" : \"Image\" } } }","title":"Tabs"},{"location":"cms/developers/dialogs/tabs/#tabs","text":"wcm/dialogs/components/tabs","title":"Tabs"},{"location":"cms/developers/dialogs/tabs/#description","text":"The Tabs dialog field allows the user to add a tab panel.","title":"Description"},{"location":"cms/developers/dialogs/tabs/#example","text":"\"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"tabOne\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab One\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" } }, \"tabTwo\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab Two\" , \"image\" : { \"sling:resourceType\" : \"wcm/dialogs/components/assetreference\" , \"mimeTypes\" : [ \"image/*\" ], \"name\" : \"image\" , \"label\" : \"Image\" } } }","title":"Example"},{"location":"cms/developers/dialogs/tabs/tab/","text":"Tab wcm/dialogs/components/tab Description Allows user to add tab content. Properties label - string Display tab name Example \"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"tabOne\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab One\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" } }, \"tabTwo\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab Two\" , \"image\" : { \"sling:resourceType\" : \"wcm/dialogs/components/assetreference\" , \"mimeTypes\" : [ \"image/*\" ], \"name\" : \"image\" , \"label\" : \"Image\" } } }","title":"Tab"},{"location":"cms/developers/dialogs/tabs/tab/#tab","text":"wcm/dialogs/components/tab","title":"Tab"},{"location":"cms/developers/dialogs/tabs/tab/#description","text":"Allows user to add tab content.","title":"Description"},{"location":"cms/developers/dialogs/tabs/tab/#properties","text":"label - string Display tab name","title":"Properties"},{"location":"cms/developers/dialogs/tabs/tab/#example","text":"\"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"tabOne\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab One\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" } }, \"tabTwo\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab Two\" , \"image\" : { \"sling:resourceType\" : \"wcm/dialogs/components/assetreference\" , \"mimeTypes\" : [ \"image/*\" ], \"name\" : \"image\" , \"label\" : \"Image\" } } }","title":"Example"},{"location":"cms/developers/dialogs/text-area/","text":"Text Area wcm/dialogs/components/textarea Description The Text Area dialog field allows the user to enter text over multiple lines. Properties name - string (required) Form field name label - string (required) Display label value required - string Indicates if field value is mandatory removeIfEmpty - string (if not defined false ) Indicates if property in JCR will be removed if it contains empty String, or will be retained with that value description - string Display description value as a tooltip Example \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textarea\" , \"name\" : \"content\" , \"label\" : \"Content\" }","title":"Text Area"},{"location":"cms/developers/dialogs/text-area/#text-area","text":"wcm/dialogs/components/textarea","title":"Text Area"},{"location":"cms/developers/dialogs/text-area/#description","text":"The Text Area dialog field allows the user to enter text over multiple lines.","title":"Description"},{"location":"cms/developers/dialogs/text-area/#properties","text":"name - string (required) Form field name label - string (required) Display label value required - string Indicates if field value is mandatory removeIfEmpty - string (if not defined false ) Indicates if property in JCR will be removed if it contains empty String, or will be retained with that value description - string Display description value as a tooltip","title":"Properties"},{"location":"cms/developers/dialogs/text-area/#example","text":"\"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textarea\" , \"name\" : \"content\" , \"label\" : \"Content\" }","title":"Example"},{"location":"cms/developers/dialogs/textfield/","text":"Text Field wcm/dialogs/components/textfield Description The Text Field dialog field allows users to enter text. Properties name - string (required) Form field name label - string Display label value required - string Indicates if field value is mandatory removeIfEmpty - string (if not defined false ) Indicates if property in JCR will be removed if it contains empty String, or will be retained with that value description - string Display description value as tooltip Example \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" }","title":"Text Field"},{"location":"cms/developers/dialogs/textfield/#text-field","text":"wcm/dialogs/components/textfield","title":"Text Field"},{"location":"cms/developers/dialogs/textfield/#description","text":"The Text Field dialog field allows users to enter text.","title":"Description"},{"location":"cms/developers/dialogs/textfield/#properties","text":"name - string (required) Form field name label - string Display label value required - string Indicates if field value is mandatory removeIfEmpty - string (if not defined false ) Indicates if property in JCR will be removed if it contains empty String, or will be retained with that value description - string Display description value as tooltip","title":"Properties"},{"location":"cms/developers/dialogs/textfield/#example","text":"\"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" }","title":"Example"},{"location":"cms/developers/dialogs/toggle/","text":"Toggle wcm/dialogs/components/toggle Description The Toggle dialog field allows the user to enable or disable a state. Properties name - string (required) Form field name label - string (required) Display label value checkedValue - string Define what value will be saved in JCR if the checkbox is checked. Default: \u201ctrue\u201d String uncheckedValue - string Define what value will be saved in JCR if the checkbox is not checked. Default: \u201cfalse\u201d String description - string Display description value as a tooltip To set the default value see the Default state section Example \"openInNewTab\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"openInNewTab\" , \"label\" : \"Open in new tab\" }","title":"Toggle"},{"location":"cms/developers/dialogs/toggle/#toggle","text":"wcm/dialogs/components/toggle","title":"Toggle"},{"location":"cms/developers/dialogs/toggle/#description","text":"The Toggle dialog field allows the user to enable or disable a state.","title":"Description"},{"location":"cms/developers/dialogs/toggle/#properties","text":"name - string (required) Form field name label - string (required) Display label value checkedValue - string Define what value will be saved in JCR if the checkbox is checked. Default: \u201ctrue\u201d String uncheckedValue - string Define what value will be saved in JCR if the checkbox is not checked. Default: \u201cfalse\u201d String description - string Display description value as a tooltip To set the default value see the Default state section","title":"Properties"},{"location":"cms/developers/dialogs/toggle/#example","text":"\"openInNewTab\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"openInNewTab\" , \"label\" : \"Open in new tab\" }","title":"Example"},{"location":"cms/developers/e2e-testing/","text":"End-to-end testing Overview End-to-end testing (E2E testing) checks if the software is working correctly from the end user point of view. It verifies all the flows and actions which the user may perform when using the application. E2E tests should be executed in a real-world environment like a web browser to ensure that the testing closely resembles the actual user experience. While you can write your own E2E tests using your favorite tools you can also leverage our solution from starter . In this project we implemented the following types of E2E tests: Functional tests with Cypress Visual regression tests with BackstopJS Important notice For more information about starter project see Quick start for developers . Test content To run tests in the context of CMS we need to decide what content we will use. In starter during testing we have configured to use content from the following folders: /content - This is the initial content for CMS. It is a good place to keep the actual content used by the end user. /tests/content - This is the content which is only available during E2E testing. Here we can store the content which was crafted specifically for the purpose of testing, i.e. we can use this folder to test CMS components in isolation. In your tests you can use /content and /tests/content folders simultanously.","title":"End-to-end testing"},{"location":"cms/developers/e2e-testing/#end-to-end-testing","text":"","title":"End-to-end testing"},{"location":"cms/developers/e2e-testing/#overview","text":"End-to-end testing (E2E testing) checks if the software is working correctly from the end user point of view. It verifies all the flows and actions which the user may perform when using the application. E2E tests should be executed in a real-world environment like a web browser to ensure that the testing closely resembles the actual user experience. While you can write your own E2E tests using your favorite tools you can also leverage our solution from starter . In this project we implemented the following types of E2E tests: Functional tests with Cypress Visual regression tests with BackstopJS Important notice For more information about starter project see Quick start for developers .","title":"Overview"},{"location":"cms/developers/e2e-testing/#test-content","text":"To run tests in the context of CMS we need to decide what content we will use. In starter during testing we have configured to use content from the following folders: /content - This is the initial content for CMS. It is a good place to keep the actual content used by the end user. /tests/content - This is the content which is only available during E2E testing. Here we can store the content which was crafted specifically for the purpose of testing, i.e. we can use this folder to test CMS components in isolation. In your tests you can use /content and /tests/content folders simultanously.","title":"Test content"},{"location":"cms/developers/e2e-testing/functional-testing/","text":"Functional testing with Cypress Introduction Cypress is a modern open-source end-to-end testing framework which provides good developer experience. You can check how we leverage Cypress in starter to perform functional testing . Its goal is to check if the end user can complete all the flows and actions available on the website. Important notice For more information about starter project see Quick start for developers . Documentation Detailed information how to use Cypress can be found in the official docs: https://www.cypress.io We recommend also reading about best practices in Cypress: https://docs.cypress.io/guides/references/best-practices Using Cypress locally Cypress tests are located in tests/end-to-end/tests folder. To run them, you need to start your CMS instance first from tests/end-to-end : target/dependency/org.apache.sling.feature.launcher/bin/launcher \\ -f target/slingfeature-tmp/feature-starter-project-tests.json Then update test content located in /tests/content folder execute the following script: ./mvnw -f tests/content/pom.xml clean install -P autoInstallPackage Finally run the commands below: cd tests/end-to-end npm run dev This will launch the Cypress interactive GUI. It is the most convenient way to write and debug your tests during development. Using Cypress on CI server To run E2E tests on CI server, you need to launch Cypress in headless mode. It can be done by using this command from the root directory: ./mvnw clean verify -P e2e-functional In .github/workflows/ci.yml you can check how we have configured running Cypress tests in Github Actions as a part of pull request validation.","title":"Functional testing with Cypress"},{"location":"cms/developers/e2e-testing/functional-testing/#functional-testing-with-cypress","text":"","title":"Functional testing with Cypress"},{"location":"cms/developers/e2e-testing/functional-testing/#introduction","text":"Cypress is a modern open-source end-to-end testing framework which provides good developer experience. You can check how we leverage Cypress in starter to perform functional testing . Its goal is to check if the end user can complete all the flows and actions available on the website. Important notice For more information about starter project see Quick start for developers .","title":"Introduction"},{"location":"cms/developers/e2e-testing/functional-testing/#documentation","text":"Detailed information how to use Cypress can be found in the official docs: https://www.cypress.io We recommend also reading about best practices in Cypress: https://docs.cypress.io/guides/references/best-practices","title":"Documentation"},{"location":"cms/developers/e2e-testing/functional-testing/#using-cypress-locally","text":"Cypress tests are located in tests/end-to-end/tests folder. To run them, you need to start your CMS instance first from tests/end-to-end : target/dependency/org.apache.sling.feature.launcher/bin/launcher \\ -f target/slingfeature-tmp/feature-starter-project-tests.json Then update test content located in /tests/content folder execute the following script: ./mvnw -f tests/content/pom.xml clean install -P autoInstallPackage Finally run the commands below: cd tests/end-to-end npm run dev This will launch the Cypress interactive GUI. It is the most convenient way to write and debug your tests during development.","title":"Using Cypress locally"},{"location":"cms/developers/e2e-testing/functional-testing/#using-cypress-on-ci-server","text":"To run E2E tests on CI server, you need to launch Cypress in headless mode. It can be done by using this command from the root directory: ./mvnw clean verify -P e2e-functional In .github/workflows/ci.yml you can check how we have configured running Cypress tests in Github Actions as a part of pull request validation.","title":"Using Cypress on CI server"},{"location":"cms/developers/e2e-testing/visual-regression-testing/","text":"Visual regression testing with BackstopJS Introduction Visual regression testing is used to detect unintended visual changes in web application. It involves capturing screenshots of web pages or components at different points in time and comparing them to detect any differences. These differences needs to be reviewed if they are expected or not. In starter you can check how use BackstopJS to perform visual regression testing. BackstopJS is a free and open-source tool that automates the process of capturing and comparing screenshots to identify any visual differences that may occur due to code changes, CSS updates, or other modifications. BackstopJS official documentation can be found here: https://github.com/garris/BackstopJS Important notice For more information about starter project see Quick start for developers . Configuration BackstopJS configuration file is located there: tests/end-to-end/backstop.js . In this file you need to provide the links for all pages to let BackstopJS know where to capture screenshots. You can also specify additional configuration options which can be found in the official docs. One option which is highly recommended is viewports . It lets you capture multiple screenshots with different dimensions for every page. This way you can verify if you pages looks good on different devices like mobile, tablet and desktop. Environment To replicate the production environment as much as possible we run visual regression tests on a published content. To achieve that in tests/end-to-end/pom.xml we perform publish test content step before actual testing. <execution> <id> publish test content </id> <goals> <goal> npx </goal> </goals> <phase> integration-test </phase> <configuration> <skip> ${e2e.skip} </skip> <arguments> ts-node ./utils/content.publish/content.publish.cli.ts </arguments> <environmentVariables> <baseUrlCms> http://localhost:${cms.port} </baseUrlCms> </environmentVariables> </configuration> </execution> Using BackstopJS locally You can use BackstopJS locally in the following way: Run the command below to capture the screenshots of all pages defined in BackstopJS configuration file: mvn clean verify -P e2e-visual-seed Make some changes in the code (i.e. via switching to a different branch in Git). Apply the changes by running: mvn clean install -P autoInstallBundle Run the command below to capture again screenshots of all pages and compare them with reference screenshots: mvn clean verify -P e2e-visual-check Open BackstopJS report which is located here: tests/end-to-end/backstop_data/html_report/index.html You can open it by double-click in Finder/File explorer. Review visual changes. Using BackstopJS on CI server In .github/workflows/ci.yml file you can see how we have configured visual regression tests to run them in Github Actions during pull request validation. The general idea how this works is as follows: Switch to the base branch (most often main or develop ) which is deducted as a common ancestor between the source branch and PR target branch. Capture reference screenshots ( e2e-visual-seed profile). Switch back to the PR branch. Capture the screenshots again and compare them with reference screenshots ( e2e-visual-check profile). Check if the report contains failed tests (visual changes). If there are failed tests - upload report as an artifact and post the following comment on Github PR If all tests passed - post the following comment on Github PR","title":"Visual regression testing with BackstopJS"},{"location":"cms/developers/e2e-testing/visual-regression-testing/#visual-regression-testing-with-backstopjs","text":"","title":"Visual regression testing with BackstopJS"},{"location":"cms/developers/e2e-testing/visual-regression-testing/#introduction","text":"Visual regression testing is used to detect unintended visual changes in web application. It involves capturing screenshots of web pages or components at different points in time and comparing them to detect any differences. These differences needs to be reviewed if they are expected or not. In starter you can check how use BackstopJS to perform visual regression testing. BackstopJS is a free and open-source tool that automates the process of capturing and comparing screenshots to identify any visual differences that may occur due to code changes, CSS updates, or other modifications. BackstopJS official documentation can be found here: https://github.com/garris/BackstopJS Important notice For more information about starter project see Quick start for developers .","title":"Introduction"},{"location":"cms/developers/e2e-testing/visual-regression-testing/#configuration","text":"BackstopJS configuration file is located there: tests/end-to-end/backstop.js . In this file you need to provide the links for all pages to let BackstopJS know where to capture screenshots. You can also specify additional configuration options which can be found in the official docs. One option which is highly recommended is viewports . It lets you capture multiple screenshots with different dimensions for every page. This way you can verify if you pages looks good on different devices like mobile, tablet and desktop.","title":"Configuration"},{"location":"cms/developers/e2e-testing/visual-regression-testing/#environment","text":"To replicate the production environment as much as possible we run visual regression tests on a published content. To achieve that in tests/end-to-end/pom.xml we perform publish test content step before actual testing. <execution> <id> publish test content </id> <goals> <goal> npx </goal> </goals> <phase> integration-test </phase> <configuration> <skip> ${e2e.skip} </skip> <arguments> ts-node ./utils/content.publish/content.publish.cli.ts </arguments> <environmentVariables> <baseUrlCms> http://localhost:${cms.port} </baseUrlCms> </environmentVariables> </configuration> </execution>","title":"Environment"},{"location":"cms/developers/e2e-testing/visual-regression-testing/#using-backstopjs-locally","text":"You can use BackstopJS locally in the following way: Run the command below to capture the screenshots of all pages defined in BackstopJS configuration file: mvn clean verify -P e2e-visual-seed Make some changes in the code (i.e. via switching to a different branch in Git). Apply the changes by running: mvn clean install -P autoInstallBundle Run the command below to capture again screenshots of all pages and compare them with reference screenshots: mvn clean verify -P e2e-visual-check Open BackstopJS report which is located here: tests/end-to-end/backstop_data/html_report/index.html You can open it by double-click in Finder/File explorer. Review visual changes.","title":"Using BackstopJS locally"},{"location":"cms/developers/e2e-testing/visual-regression-testing/#using-backstopjs-on-ci-server","text":"In .github/workflows/ci.yml file you can see how we have configured visual regression tests to run them in Github Actions during pull request validation. The general idea how this works is as follows: Switch to the base branch (most often main or develop ) which is deducted as a common ancestor between the source branch and PR target branch. Capture reference screenshots ( e2e-visual-seed profile). Switch back to the PR branch. Capture the screenshots again and compare them with reference screenshots ( e2e-visual-check profile). Check if the report contains failed tests (visual changes). If there are failed tests - upload report as an artifact and post the following comment on Github PR If all tests passed - post the following comment on Github PR","title":"Using BackstopJS on CI server"},{"location":"cms/developers/inline-editing/","text":"Inline editing Overview Inline editing makes it possible to update components directly within a page's content using the Page Editor . Currently, inline editing supports editing of single component properties. When inline editing is enabled for the component, the action triggering the editing is available. Enabling inline editing for component Inline editing can be enabled for a component by updating the Edit configuration . To enable the editing add the inlineEditing and config nodes to the component edit config. The config node contains configuration related to editing of a single component property. Example component edit config enabling inline editing { \"inlineEditing\" : { \"config\" : { \"property\" : \"title\" , \"domSelectors\" : [ \"h1\" , \"h2\" , \"h3\" , \"h4\" ], \"editor\" : \"text\" } } } Property property contains the relative path of the component property where the edited value will be saved in the content. The values can be a property name that will be saved on the component content node (for example: \"property\": \"title\" ). It may also contain sub-nodes on the component node (for example: \"property\": \"node1/node2/title\" ). The value of property must correspond to a field defined in the component dialog. If the field is not needed in the dialog it can be disabled using dialogs context . See component dialog documentation for more information. For the best content authoring experience, it is recommended to avoid inline editing of fields using validation . Validation errors will be reported as notifications and the values will not be updated. DOM selectors The domSelectors are used to find the DOM element for which the inline editing should take place. Selectors will be evaluated one-by-one on all Component DOM nodes until the first result is found. If a DOM selector value is not provided or is empty, then the first Component DOM node is used. Inline editor The editor property contains the ID of the inline editor implementation, which will be used for editing. See the provided editors below. Depending on the editor implementation, an additional editorConfiguration object may be provided. Example component edit config using inline editor configuration { \"inlineEditing\" : { \"config\" : { \"property\" : \"text\" , \"editor\" : \"some-editor-id\" , \"editorConfiguration\" : { \"someEditorRelatedProperty\" : \"value\" } } } } Provided inline editors WebSight CMS provides inline editors, which are available to use only by updating the edit configuration for the component as described below. Text editor The WebSight text editor allows single-line plain text editing. The ID of the editor is text . Example component edit config enabling text inline editing { \"inlineEditing\" : { \"config\" : { \"property\" : \"title\" , \"editor\" : \"text\" } } } Rich text editor The WebSight rich text editor allows rich text editing in the same way as the dialogs rich text . The ID of the editor is rich-text . Example component edit config enabling rich text inline editing { \"inlineEditing\" : { \"config\" : { \"property\" : \"text\" , \"editor\" : \"rich-text\" } } } To specify the rich text configuration , add editorConfiguration and define the path to the configuration via rteConfiguration . Example component edit config enabling rich text inline editing and specified configuration { \"inlineEditing\" : { \"config\" : { \"property\" : \"text\" , \"editor\" : \"rich-text\" , \"editorConfiguration\" : { \"rteConfiguration\" : \"/libs/wcm/dialogs/components/richtext/configurations/compact\" } } } }","title":"Inline editing"},{"location":"cms/developers/inline-editing/#inline-editing","text":"","title":"Inline editing"},{"location":"cms/developers/inline-editing/#overview","text":"Inline editing makes it possible to update components directly within a page's content using the Page Editor . Currently, inline editing supports editing of single component properties. When inline editing is enabled for the component, the action triggering the editing is available.","title":"Overview"},{"location":"cms/developers/inline-editing/#enabling-inline-editing-for-component","text":"Inline editing can be enabled for a component by updating the Edit configuration . To enable the editing add the inlineEditing and config nodes to the component edit config. The config node contains configuration related to editing of a single component property. Example component edit config enabling inline editing { \"inlineEditing\" : { \"config\" : { \"property\" : \"title\" , \"domSelectors\" : [ \"h1\" , \"h2\" , \"h3\" , \"h4\" ], \"editor\" : \"text\" } } }","title":"Enabling inline editing for component"},{"location":"cms/developers/inline-editing/#property","text":"property contains the relative path of the component property where the edited value will be saved in the content. The values can be a property name that will be saved on the component content node (for example: \"property\": \"title\" ). It may also contain sub-nodes on the component node (for example: \"property\": \"node1/node2/title\" ). The value of property must correspond to a field defined in the component dialog. If the field is not needed in the dialog it can be disabled using dialogs context . See component dialog documentation for more information. For the best content authoring experience, it is recommended to avoid inline editing of fields using validation . Validation errors will be reported as notifications and the values will not be updated.","title":"Property"},{"location":"cms/developers/inline-editing/#dom-selectors","text":"The domSelectors are used to find the DOM element for which the inline editing should take place. Selectors will be evaluated one-by-one on all Component DOM nodes until the first result is found. If a DOM selector value is not provided or is empty, then the first Component DOM node is used.","title":"DOM selectors"},{"location":"cms/developers/inline-editing/#inline-editor","text":"The editor property contains the ID of the inline editor implementation, which will be used for editing. See the provided editors below. Depending on the editor implementation, an additional editorConfiguration object may be provided. Example component edit config using inline editor configuration { \"inlineEditing\" : { \"config\" : { \"property\" : \"text\" , \"editor\" : \"some-editor-id\" , \"editorConfiguration\" : { \"someEditorRelatedProperty\" : \"value\" } } } }","title":"Inline editor"},{"location":"cms/developers/inline-editing/#provided-inline-editors","text":"WebSight CMS provides inline editors, which are available to use only by updating the edit configuration for the component as described below.","title":"Provided inline editors"},{"location":"cms/developers/inline-editing/#text-editor","text":"The WebSight text editor allows single-line plain text editing. The ID of the editor is text . Example component edit config enabling text inline editing { \"inlineEditing\" : { \"config\" : { \"property\" : \"title\" , \"editor\" : \"text\" } } }","title":"Text editor"},{"location":"cms/developers/inline-editing/#rich-text-editor","text":"The WebSight rich text editor allows rich text editing in the same way as the dialogs rich text . The ID of the editor is rich-text . Example component edit config enabling rich text inline editing { \"inlineEditing\" : { \"config\" : { \"property\" : \"text\" , \"editor\" : \"rich-text\" } } } To specify the rich text configuration , add editorConfiguration and define the path to the configuration via rteConfiguration . Example component edit config enabling rich text inline editing and specified configuration { \"inlineEditing\" : { \"config\" : { \"property\" : \"text\" , \"editor\" : \"rich-text\" , \"editorConfiguration\" : { \"rteConfiguration\" : \"/libs/wcm/dialogs/components/richtext/configurations/compact\" } } } }","title":"Rich text editor"},{"location":"cms/developers/page-editor/","text":"Page Editor Overview Page Editor , a core part of WebSight CMS, is an essential tool for content authors. It allows the content authors to build pages using components in a WYSIWYG way. They can work with components on a page using intuitive drag-and-drop functionality. They can also provide content and configuration to the components . Component actions When a component is selected the list of available actions becomes visible in the toolbar. Action name is the technical identifier used, such as the Edit configuration . List of actions available by default: Title Name Description Edit inline-edit Starts inline editing, see Inline editing Properties edit-properties Opens a dialog to edit component properties. Copy copy Copies the component. Cut cut Cuts the component. Paste paste Pastes the component after copy or cut. Select parent select-parent Changes active component to the parent component. Delete delete Deletes the component. Technical details Edit Mode Edit mode is used for editing page content. Workspace content presentation Edit mode displays the edited page inside an iframe. The iframe is stretched vertically to match the content height to provide a canvas-like experience to content authors. It is accomplished by reacting to content height changes and fixing issues that result from displaying an iframe in this way (like using vh unit). As a result, the edited page itself is not scrollable, so the content author will not see any changes to the edited page that happen on scroll (for example, sticky positioning will not work). Workspace Overlays The edited page is (mostly) not altered; all UI is displayed in edit mode directly. All the UI elements of the mode are displayed outside the iframe to increase the separation of the two. We wanted to achieve the highest possible level of sandboxing for the edited page. The especially important and technically complex parts of edit mode UI are overlays , including: Component selectors - \"borders\" marking the content of a given component instance. Selected component toolbar - toolbar with actions allowed for a selected component. Placeholders - placeholders generated for components without content. All these items are displayed on top of the iframe containing the edited page. The content author interacts with overlays , not the elements of the edited page. The iframe with overlays on top of it is called workspace . Areas Overlays locations are based on areas , the representation of size and position of the components in the edited page. The areas are calculated based on the edited page elements. Each component has a corresponding area , covering all its DOM elements. To display overlays that are up to date with what is happening on the edited page, it is not enough to calculate areas once, on the iframe load. Nor is it enough to recalculate them on actions (like adding, deleting and editing a component ). Thus, we observe all DOM elements inside the iframe to react to size and position changes of components and recalculate the areas every time. This ensures that the overlays display correctly in cases like: asynchronous loading of resources (like images and videos). dynamic changes using JavaScript scripts. dynamic changes using CSS animations. Preview mode Preview mode displays the edited page inside an iframe as well, but in this case the iframe\u2019s height adjusts to fit the available space in the page editor . This way the iframe is displayed in a more \"natural\" way, similar to how the published page is displayed in a browser window. The iframe is scrollable, meaning it will react to scroll events (e.g., to support sticky elements). It also handles the vh unit properly.","title":"Page Editor"},{"location":"cms/developers/page-editor/#page-editor","text":"","title":"Page Editor"},{"location":"cms/developers/page-editor/#overview","text":"Page Editor , a core part of WebSight CMS, is an essential tool for content authors. It allows the content authors to build pages using components in a WYSIWYG way. They can work with components on a page using intuitive drag-and-drop functionality. They can also provide content and configuration to the components .","title":"Overview"},{"location":"cms/developers/page-editor/#component-actions","text":"When a component is selected the list of available actions becomes visible in the toolbar. Action name is the technical identifier used, such as the Edit configuration . List of actions available by default: Title Name Description Edit inline-edit Starts inline editing, see Inline editing Properties edit-properties Opens a dialog to edit component properties. Copy copy Copies the component. Cut cut Cuts the component. Paste paste Pastes the component after copy or cut. Select parent select-parent Changes active component to the parent component. Delete delete Deletes the component.","title":"Component actions"},{"location":"cms/developers/page-editor/#technical-details","text":"","title":"Technical details"},{"location":"cms/developers/page-editor/#edit-mode","text":"Edit mode is used for editing page content.","title":"Edit Mode"},{"location":"cms/developers/page-editor/#workspace-content-presentation","text":"Edit mode displays the edited page inside an iframe. The iframe is stretched vertically to match the content height to provide a canvas-like experience to content authors. It is accomplished by reacting to content height changes and fixing issues that result from displaying an iframe in this way (like using vh unit). As a result, the edited page itself is not scrollable, so the content author will not see any changes to the edited page that happen on scroll (for example, sticky positioning will not work).","title":"Workspace content presentation"},{"location":"cms/developers/page-editor/#workspace-overlays","text":"The edited page is (mostly) not altered; all UI is displayed in edit mode directly. All the UI elements of the mode are displayed outside the iframe to increase the separation of the two. We wanted to achieve the highest possible level of sandboxing for the edited page. The especially important and technically complex parts of edit mode UI are overlays , including: Component selectors - \"borders\" marking the content of a given component instance. Selected component toolbar - toolbar with actions allowed for a selected component. Placeholders - placeholders generated for components without content. All these items are displayed on top of the iframe containing the edited page. The content author interacts with overlays , not the elements of the edited page. The iframe with overlays on top of it is called workspace .","title":"Workspace Overlays"},{"location":"cms/developers/page-editor/#areas","text":"Overlays locations are based on areas , the representation of size and position of the components in the edited page. The areas are calculated based on the edited page elements. Each component has a corresponding area , covering all its DOM elements. To display overlays that are up to date with what is happening on the edited page, it is not enough to calculate areas once, on the iframe load. Nor is it enough to recalculate them on actions (like adding, deleting and editing a component ). Thus, we observe all DOM elements inside the iframe to react to size and position changes of components and recalculate the areas every time. This ensures that the overlays display correctly in cases like: asynchronous loading of resources (like images and videos). dynamic changes using JavaScript scripts. dynamic changes using CSS animations.","title":"Areas"},{"location":"cms/developers/page-editor/#preview-mode","text":"Preview mode displays the edited page inside an iframe as well, but in this case the iframe\u2019s height adjusts to fit the available space in the page editor . This way the iframe is displayed in a more \"natural\" way, similar to how the published page is displayed in a browser window. The iframe is scrollable, meaning it will react to scroll events (e.g., to support sticky elements). It also handles the vh unit properly.","title":"Preview mode"},{"location":"cms/developers/page-editor/extending-editor/","text":"Extending Page Editor Overview Developers may need to extend the functionality of the Page editor . You can provide the Editor extension to achieve this. The Editor extension is delivered as JavaScript and uses the Page editor API. Note The Page editor API remains under development. Detailed specifications will be provided in the future. Registering extension To define the Editor extension you must create a JavaScript file, which will be loaded in the Page editor by Web Fragments . Web Fragments allows you to register JavaScript files (JavaScript module) that will be imported using dynamic import in the application runtime. The Web Fragments scripts should provide default export to deliver object, function and so on, depending on the given case. Web Fragments defines the key that a given fragment is related to. The expected type of default export should be checked in the specification of a given extension point. In numerous parts of the application, Web Fragments with particular keys are imported, making it possible to extend WebSight CMS. The key of Web Fragments loaded by Page editor to get extensions is websight.editor.spi.extension . The expected default export should provide an object with the init function with a single argument, which will be the Page editor object. To register the fragment, provide the OSGi components that implement the pl.ds.websight.fragments.registry.WebFragment interface to provide information about the fragment key, the location of the JavaScript file and the ranking used to order imports. There is a required Maven dependency (see the version of the websight-fragments-registry bundle used in your system in Apache Felix Web Console in your local instance : <dependency> <groupId> pl.ds.websight </groupId> <artifactId> websight-fragments-registry </artifactId> <version> 1.0.3 </version> <scope> provided </scope> </dependency> Example component: package com.myapp.fragments ; import org.osgi.service.component.annotations.Component ; import pl.ds.websight.fragments.registry.WebFragment ; @Component public class ExamplePageEditorExtensionWebFragment implements WebFragment { @Override public String getKey () { // Web Fragment key - different extension points use different keys. // This key is used for Page editor extensions, so the script file specified in the getFragment // method will be imported by the Page editor and used as a Page editor extension. return \"websight.editor.spi.extension\" ; } @Override public String getFragment () { // JavaScript module to import. Must provide default export in format expected by the // extension point related to the Web Fragment key in use. return \"/app/myapp/author/editor/extensions/ExampleExtension.js\" ; } @Override public int getRanking () { // Web Fragments are imported in order according to the ranking value, starting with the lowest. return 100 ; } } The JavaScript file returned by the getFragment method should be a bundle resource provided by your application and must be available in the CMS authoring runtime (specifically, it must be accessible for content author browser requests). Example content: export default { init: (editor) => { // Use editor object here. } } Using Page editor extensions Below you can find examples of Page editor extensions usage. Editor events Page editor uses an API for working with events. You can register a handler for events used in Page editor . To register an event listener use editor.addEventListener and pass the event type and listener function (you can use the event data object parameter if needed). Event type Description Event data component-dom-updated This event is thrown after component's dom is updated. `target` - component Example extension registering the event listener: export default { init: (editor) => { editor.addEventListener('component-dom-updated', () => { // React to DOM update, for example reload edited document: editor.componentTree.get().parentDocument.location.reload(); }); } }","title":"Extending Page Editor"},{"location":"cms/developers/page-editor/extending-editor/#extending-page-editor","text":"","title":"Extending Page Editor"},{"location":"cms/developers/page-editor/extending-editor/#overview","text":"Developers may need to extend the functionality of the Page editor . You can provide the Editor extension to achieve this. The Editor extension is delivered as JavaScript and uses the Page editor API. Note The Page editor API remains under development. Detailed specifications will be provided in the future.","title":"Overview"},{"location":"cms/developers/page-editor/extending-editor/#registering-extension","text":"To define the Editor extension you must create a JavaScript file, which will be loaded in the Page editor by Web Fragments . Web Fragments allows you to register JavaScript files (JavaScript module) that will be imported using dynamic import in the application runtime. The Web Fragments scripts should provide default export to deliver object, function and so on, depending on the given case. Web Fragments defines the key that a given fragment is related to. The expected type of default export should be checked in the specification of a given extension point. In numerous parts of the application, Web Fragments with particular keys are imported, making it possible to extend WebSight CMS. The key of Web Fragments loaded by Page editor to get extensions is websight.editor.spi.extension . The expected default export should provide an object with the init function with a single argument, which will be the Page editor object. To register the fragment, provide the OSGi components that implement the pl.ds.websight.fragments.registry.WebFragment interface to provide information about the fragment key, the location of the JavaScript file and the ranking used to order imports. There is a required Maven dependency (see the version of the websight-fragments-registry bundle used in your system in Apache Felix Web Console in your local instance : <dependency> <groupId> pl.ds.websight </groupId> <artifactId> websight-fragments-registry </artifactId> <version> 1.0.3 </version> <scope> provided </scope> </dependency> Example component: package com.myapp.fragments ; import org.osgi.service.component.annotations.Component ; import pl.ds.websight.fragments.registry.WebFragment ; @Component public class ExamplePageEditorExtensionWebFragment implements WebFragment { @Override public String getKey () { // Web Fragment key - different extension points use different keys. // This key is used for Page editor extensions, so the script file specified in the getFragment // method will be imported by the Page editor and used as a Page editor extension. return \"websight.editor.spi.extension\" ; } @Override public String getFragment () { // JavaScript module to import. Must provide default export in format expected by the // extension point related to the Web Fragment key in use. return \"/app/myapp/author/editor/extensions/ExampleExtension.js\" ; } @Override public int getRanking () { // Web Fragments are imported in order according to the ranking value, starting with the lowest. return 100 ; } } The JavaScript file returned by the getFragment method should be a bundle resource provided by your application and must be available in the CMS authoring runtime (specifically, it must be accessible for content author browser requests). Example content: export default { init: (editor) => { // Use editor object here. } }","title":"Registering extension"},{"location":"cms/developers/page-editor/extending-editor/#using-page-editor-extensions","text":"Below you can find examples of Page editor extensions usage.","title":"Using Page editor extensions"},{"location":"cms/developers/page-editor/extending-editor/#editor-events","text":"Page editor uses an API for working with events. You can register a handler for events used in Page editor . To register an event listener use editor.addEventListener and pass the event type and listener function (you can use the event data object parameter if needed). Event type Description Event data component-dom-updated This event is thrown after component's dom is updated. `target` - component Example extension registering the event listener: export default { init: (editor) => { editor.addEventListener('component-dom-updated', () => { // React to DOM update, for example reload edited document: editor.componentTree.get().parentDocument.location.reload(); }); } }","title":"Editor events"},{"location":"cms/developers/page-editor/side-panel/","text":"Side Panel Overview The Side Panel is a part of the Page editor that allows editing of the properties of the selected component. It is displayed on the right side of the Page editor . Its purpose is slightly different from that of the full-blown modal . The Side Panel is more suitable for quick edits to the page content that you want to preview right away, such as changing a font size, a button variant, or a card style. In contrast, with the modal , the focus is on editing the complete configuration of the component at once. Configuration By default, the component's dialog configuration will be used for both the side panel and the dialog. This means that all components support the side panel right away. Since their purposes are different, it is possible to differentiate between the fields and layout for the regular modal and the side panel. This configuration allows developers to decide field-by-field if it should appear in both of the two contexts, or only in one. The mechanism used to achieve this is the ws:disallowedContext parameter (see more details about the mechanism here ). The two contexts that can be disabled are edit:dialog and edit:panel . Example 1 In this example, we're showcasing how to hide a select on the dialog and a toggle on the side panel. { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" }, \"shadows\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"shadows\" , \"label\" : \"Use shadows\" , \"ws:disallowedContext\" : [ \"edit:panel\" ] }, \"style\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select\" , \"label\" : \"Style\" , \"name\" : \"style\" , \"ws:disallowedContext\" : [ \"edit:dialog\" ], \"primary\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Primary\" , \"value\" : \"primary\" }, \"secondary\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Secondary\" , \"selected\" : true , \"value\" : \"secondary\" } } } Result Example 2 In this example, we're defining a completely separate layout and order for the two ways of editing to achieve an even better authoring experience. To accomplish this, we create a configuration of three tabs. The first two will only appear on the modal, while the third one will only appear on the side panel. The third tab includes all three fields that are available on the other two tabs. This allows the author to edit all the properties in the side panel in one tab but defines separation for the fields on the modal. { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"properties\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Properties\" , \"ws:disallowedContext\" : [ \"edit:panel\" ], \"headingLevel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/headinglevel\" }, \"headingSize\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/headingsize\" } }, \"styles\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Styles\" , \"ws:disallowedContext\" : [ \"edit:panel\" ], \"styleVariant\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/stylevariant\" } }, \"sidepanel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Properties\" , \"ws:disallowedContext\" : [ \"edit:dialog\" ], \"headingLevel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/headinglevel\" }, \"headingSize\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/headingsize\" }, \"styleVariant\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/stylevariant\" } } } } Result Saving and error handling The save function for the fields works automatically. There is no need to press a submit button. Some field values (for example, the toggle) are changed with a mouse click. The side panel saves them immediately, and the results are visible almost instantly. Other fields (for example, the text field or the path picker) require typing a new value. It is stored when an author stops typing (based on a debounce method). This approach reduces the number of content updates that could cause page flickering. No matter whether errors happen during the regular editing experience (for example, during validations) or are caused by technical problems, they need to be handled. In the event of any errors during the save process, the side panel resets the modified field to the latest stable state (either the initial one or the last successfully saved one). This is to ensure that the author always sees valid and up-to-date information on the side panel. Validations Since the purpose of the side panel is to provide a lightweight solution for simple editing, it has some limitations compared to the regular modal. Fields that must be validated are not recommended to be displayed and edited on the side panel. Editing such fields with a value that breaks a validation rule will result in an error message and the field will be reset (as described above).","title":"Side Panel"},{"location":"cms/developers/page-editor/side-panel/#side-panel","text":"","title":"Side Panel"},{"location":"cms/developers/page-editor/side-panel/#overview","text":"The Side Panel is a part of the Page editor that allows editing of the properties of the selected component. It is displayed on the right side of the Page editor . Its purpose is slightly different from that of the full-blown modal . The Side Panel is more suitable for quick edits to the page content that you want to preview right away, such as changing a font size, a button variant, or a card style. In contrast, with the modal , the focus is on editing the complete configuration of the component at once.","title":"Overview"},{"location":"cms/developers/page-editor/side-panel/#configuration","text":"By default, the component's dialog configuration will be used for both the side panel and the dialog. This means that all components support the side panel right away. Since their purposes are different, it is possible to differentiate between the fields and layout for the regular modal and the side panel. This configuration allows developers to decide field-by-field if it should appear in both of the two contexts, or only in one. The mechanism used to achieve this is the ws:disallowedContext parameter (see more details about the mechanism here ). The two contexts that can be disabled are edit:dialog and edit:panel .","title":"Configuration"},{"location":"cms/developers/page-editor/side-panel/#example-1","text":"In this example, we're showcasing how to hide a select on the dialog and a toggle on the side panel. { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" }, \"shadows\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"shadows\" , \"label\" : \"Use shadows\" , \"ws:disallowedContext\" : [ \"edit:panel\" ] }, \"style\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select\" , \"label\" : \"Style\" , \"name\" : \"style\" , \"ws:disallowedContext\" : [ \"edit:dialog\" ], \"primary\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Primary\" , \"value\" : \"primary\" }, \"secondary\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Secondary\" , \"selected\" : true , \"value\" : \"secondary\" } } }","title":"Example 1"},{"location":"cms/developers/page-editor/side-panel/#result","text":"","title":"Result"},{"location":"cms/developers/page-editor/side-panel/#example-2","text":"In this example, we're defining a completely separate layout and order for the two ways of editing to achieve an even better authoring experience. To accomplish this, we create a configuration of three tabs. The first two will only appear on the modal, while the third one will only appear on the side panel. The third tab includes all three fields that are available on the other two tabs. This allows the author to edit all the properties in the side panel in one tab but defines separation for the fields on the modal. { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"properties\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Properties\" , \"ws:disallowedContext\" : [ \"edit:panel\" ], \"headingLevel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/headinglevel\" }, \"headingSize\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/headingsize\" } }, \"styles\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Styles\" , \"ws:disallowedContext\" : [ \"edit:panel\" ], \"styleVariant\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/stylevariant\" } }, \"sidepanel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Properties\" , \"ws:disallowedContext\" : [ \"edit:dialog\" ], \"headingLevel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/headinglevel\" }, \"headingSize\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/headingsize\" }, \"styleVariant\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/stylevariant\" } } } }","title":"Example 2"},{"location":"cms/developers/page-editor/side-panel/#result_1","text":"","title":"Result"},{"location":"cms/developers/page-editor/side-panel/#saving-and-error-handling","text":"The save function for the fields works automatically. There is no need to press a submit button. Some field values (for example, the toggle) are changed with a mouse click. The side panel saves them immediately, and the results are visible almost instantly. Other fields (for example, the text field or the path picker) require typing a new value. It is stored when an author stops typing (based on a debounce method). This approach reduces the number of content updates that could cause page flickering. No matter whether errors happen during the regular editing experience (for example, during validations) or are caused by technical problems, they need to be handled. In the event of any errors during the save process, the side panel resets the modified field to the latest stable state (either the initial one or the last successfully saved one). This is to ensure that the author always sees valid and up-to-date information on the side panel.","title":"Saving and error handling"},{"location":"cms/developers/page-editor/side-panel/#validations","text":"Since the purpose of the side panel is to provide a lightweight solution for simple editing, it has some limitations compared to the regular modal. Fields that must be validated are not recommended to be displayed and edited on the side panel. Editing such fields with a value that breaks a validation rule will result in an error message and the field will be reset (as described above).","title":"Validations"},{"location":"cms/developers/publishing/","text":"Content publishing Overview When content (such as pages or assets) is published via actions available in the authoring UI, it is copied from /content to /published within the content tree. Content references (paths saved in JCR) are automatically updated (just as they would be when pages are copied or moved) during publishing. This means that published content references other published content items after publishing. The publishing API allows you to get information about the status of content and to publish/unpublish content. SPI interfaces allow you to take actions before publishing, after publishing, before unpublishing, and after unpublishing. You can also customize published content if needed. By default, the CMS contains the bundle pl.ds.websight:websight-content-push-filesystem which provides the PublishingPostprocessor SPI implementation for saving published content to the file system for backwards compatibility with the previous approach to content publishing. The saved files can be served to end users via an HTTP server. OSGi configurations for the services FileSystemService and ContentPushConfigurationService can be used to change the published content files in the file system. See the blog post about publishing . Using publishing module Dependency: <dependency> <groupId>pl.ds.websight</groupId> <artifactId>websight-publishing-framework-next</artifactId> <version>2.0.6</version> <scope>provided</scope> </dependency> API The API allows you to use the publishing framework. PublishService package pl.ds.websight.publishing.framework ; import java.util.List ; import java.util.function.Predicate ; import javax.jcr.nodetype.NodeTypeDefinition ; import org.apache.sling.api.resource.Resource ; import org.jetbrains.annotations.NotNull ; /** * Provides operations for publishing of resources by copying the resources from * {@value CONTENT_ROOT} to {@value PUBLISHED_ROOT}. Only JCR resources are supported. * <br><br> * It is assumed that read access to {@value PUBLISHED_ROOT} is granted for everyone. Rights for * modification of {@value PUBLISHED_ROOT} nodes by client session is not required; only * {@value PUBLISH_PRIVILEGE} on corresponding {@value CONTENT_ROOT} path is required. * <br><br> * Publication logic uses Node Types Primary Item. If a published node use type has a primary item, * publication (recursive copying to {@value PUBLISHED_ROOT}) is done on the primary item. If the * publishing node uses a type that is not defined as a primary item, only the published resource will be * copied. * <p> * see {@link javax.jcr.Node#getPrimaryItem()} and {@link NodeTypeDefinition#getPrimaryItemName()} * </p> * <br><br> * Parents of published nodes are created with original primary types and required properties only. */ public interface PublishService { /** * JCR privilege for publish action. */ String PUBLISH_PRIVILEGE = \"ws:publish\" ; /** * Root resource for content resources. */ String CONTENT_ROOT = \"/content\" ; /** * Root resource for published resources. */ String PUBLISHED_ROOT = \"/published\" ; /** * Checks if the user associated with the resource resolver has publishing rights for the given * resource. Only resources under {@value CONTENT_ROOT} root can be published. * * @param resource a resource to be verified * @return true if the user associated with the resource resolver has publishing rights for the * given resource */ boolean hasPublishRights ( @NotNull Resource resource ) throws PublishException ; /** * Publishes a single resource. Implementation must ensure that all the preconditions are met. * * @param a resource to be published * @throws PublishException may be thrown if an error occurs trying to publish a resource */ void publish ( @NotNull Resource resource ) throws PublishException ; /** * Optimized publish method for multiple resources. Implementation must ensure that all the * preconditions are met. * * @param resources a resource to be published * @throws PublishException may be thrown if an error occurs trying to publish resources */ void publish ( @NotNull List < Resource > resources ) throws PublishException ; /** * Unpublishes a single resource. Implementation must ensure that all the preconditions are * met. * * @param resource a resource to be unpublished * @throws PublishException may be thrown if an error occurs trying to unpublish a resource */ void unpublish ( @NotNull Resource resource ) throws PublishException ; /** * Optimized unpublish method for multiple resources. Implementation must ensure that all the * preconditions are met. * * @param a resource to be unpublished * @throws PublishException may be thrown if an error occurs trying to unpublish resources */ void unpublish ( @NotNull List < Resource > resources ) throws PublishException ; /** * Get publish view for the given content resource. The method resolves the published version of the * resource from {@link #CONTENT_ROOT} by searching for the corresponding resource under the * {@link #PUBLISHED_ROOT}. * * @param resource content resource * @return publish view */ @NotNull PublishView getPublishView ( @NotNull Resource resource ); /** * Get publish view for the given content resource's parent. The view may contain * {@link PublishStatus#GHOST} resource views. Results are returned only for child resources * that match the predicate. The predicate is also applied to published resources when getting * ghosts. * * @param parent content resources parent * @param filter used to filter the child resources * @return publish views for resources that match the predicate */ @NotNull List < PublishView > getPublishViews ( @NotNull Resource parent , @NotNull Predicate < Resource > filter ); } PublishView package pl.ds.websight.publishing.framework ; import java.util.Calendar ; import org.apache.sling.api.resource.Resource ; import org.jetbrains.annotations.NotNull ; import org.jetbrains.annotations.Nullable ; /** * Class representing the view of a content resource together with the corresponding published * version. See {@link PublishService}. */ public interface PublishView { @Nullable Resource getContentResource (); @Nullable Resource getPublishedResource (); @NotNull PublishStatus getPublishStatus (); @Nullable Calendar getLastPublished (); @Nullable String getLastPublishedBy (); } PublishStatus package pl.ds.websight.publishing.framework ; /** * Represents status of publishing corresponding to content resource and published resource. See * {@link PublishService}. */ public enum PublishStatus { /** * Both content and published versions exist. Content resource contains unpublished changes. */ UNPUBLISHED_CHANGES , /** * Both content and published versions exist. There are no unpublished changes. */ PUBLISHED , /** * Only content version exists. */ NOT_PUBLISHED , /** * Only published version exists. Content resource was removed after publishing. */ GHOST } SPI SPI makes it possible to change behavior and inject additional actions into operations triggered by the publishing framework API. NamedPublishingOperation package pl.ds.websight.publishing.framework.spi ; import org.jetbrains.annotations.NotNull ; /** * Allows you to define operation name. The name of operation service of a particular type must be unique. If * another operation of a given type with the same name is provided, it replaces the previous one. */ public interface NamedPublishingOperation { @NotNull String getName (); } PublishingContext package pl.ds.websight.publishing.framework.spi ; import javax.jcr.Node ; import org.jetbrains.annotations.NotNull ; /** * Context object of JCR content nodes publishing. */ public interface PublishingContext { /** * Returns content root node. * * @return content root node */ @NotNull Node getContentRootNode (); /** * Returns published root node. * * @return published root node */ @NotNull Node getPublishedRootNode (); } PublishingNodeCustomizer package pl.ds.websight.publishing.framework.spi ; import javax.jcr.Node ; import javax.jcr.RepositoryException ; import org.jetbrains.annotations.NotNull ; import pl.ds.websight.publishing.framework.PublishException ; /** * Allows you to customize an already created and published (located under * {@link pl.ds.websight.publishing.framework.PublishService#PUBLISHED_ROOT}) node during * publication of the content. */ public interface PublishingNodeCustomizer extends NamedPublishingOperation { /** * Customizes published node during publication of the content. * * @param context current publishing context * @param node already created, published node (located under * {@link pl.ds.websight.publishing.framework.PublishService#PUBLISHED_ROOT}) */ void customize ( @NotNull PublishingContext context , @NotNull Node node ) throws RepositoryException , PublishException ; } PublishingNodeFilter package pl.ds.websight.publishing.framework.spi ; import javax.jcr.Node ; import javax.jcr.RepositoryException ; import org.jetbrains.annotations.NotNull ; import pl.ds.websight.publishing.framework.PublishException ; /** * Allows you to filter out a content node during publishing. */ public interface PublishingNodeFilter extends NamedPublishingOperation { /** * Accepts a published node during publishing of the content. If the node is not accepted by the filter * it will not be published. * * @param context current publishing context * @param node content node (located under * {@link pl.ds.websight.publishing.framework.PublishService#CONTENT_ROOT}) */ boolean accepts ( @NotNull PublishingContext context , @NotNull Node node ) throws RepositoryException , PublishException ; } PublishingPostprocessor package pl.ds.websight.publishing.framework.spi ; import java.util.List ; import org.apache.sling.api.resource.Resource ; import org.jetbrains.annotations.NotNull ; import pl.ds.websight.publishing.framework.PublishException ; /** * Provides processing logic to be executed after publishing/unpublishing. */ public interface PublishingPostprocessor extends NamedPublishingOperation { /** * Executed after publish. * * @param resources resources that were published */ void afterPublish ( @NotNull List < Resource > resources ) throws PublishException ; /** * Executed after unpublish. * * @param resources resources that were unpublished */ void afterUnpublish ( @NotNull List < Resource > resources ) throws PublishException ; } PublishingPreprocessor package pl.ds.websight.publishing.framework.spi ; import java.util.List ; import org.apache.sling.api.resource.Resource ; import org.jetbrains.annotations.NotNull ; import pl.ds.websight.publishing.framework.PublishException ; /** * Provides processing logic to be executed before publishing or unpublishing. */ public interface PublishingPreprocessor extends NamedPublishingOperation { /** * Executed before publish. If an exception is thrown, the publishing process will be stopped. * * @param resources that will be published */ void beforePublish ( @NotNull List < Resource > resources ) throws PublishException ; /** * Executed before unpublish. If an exception is thrown, the unpublishing process will be stopped. * * @param resources that will be unpublished */ void beforeUnpublish ( @NotNull List < Resource > resources ) throws PublishException ; } PublishingPropertyCustomizer package pl.ds.websight.publishing.framework.spi ; import javax.jcr.Property ; import javax.jcr.RepositoryException ; import org.jetbrains.annotations.NotNull ; import pl.ds.websight.publishing.framework.PublishException ; /** * Allows you to customize an already created and published (located under * {@link pl.ds.websight.publishing.framework.PublishService#PUBLISHED_ROOT}) property during * publication of the content. */ public interface PublishingPropertyCustomizer extends NamedPublishingOperation { /** * Customizes a published property during publication of the content. * * @param context current publishing context * @param property already created, published property (located under * {@link pl.ds.websight.publishing.framework.PublishService#PUBLISHED_ROOT}) */ void customize ( @NotNull PublishingContext context , @NotNull Property property ) throws RepositoryException , PublishException ; } PublishingPropertyFilter package pl.ds.websight.publishing.framework.spi ; import javax.jcr.Property ; import javax.jcr.RepositoryException ; import org.jetbrains.annotations.NotNull ; import pl.ds.websight.publishing.framework.PublishException ; /** * Allows you to filter out content property during publishing. */ public interface PublishingPropertyFilter extends NamedPublishingOperation { /** * Accepts a published property during publication of the content. If the property is not accepted by the * filter, it will not be published. * * @param context current publishing context * @param property content property (located under * {@link pl.ds.websight.publishing.framework.PublishService#CONTENT_ROOT}) */ boolean accepts ( @NotNull PublishingContext context , @NotNull Property property ) throws RepositoryException , PublishException ; }","title":"Content publishing"},{"location":"cms/developers/publishing/#content-publishing","text":"","title":"Content publishing"},{"location":"cms/developers/publishing/#overview","text":"When content (such as pages or assets) is published via actions available in the authoring UI, it is copied from /content to /published within the content tree. Content references (paths saved in JCR) are automatically updated (just as they would be when pages are copied or moved) during publishing. This means that published content references other published content items after publishing. The publishing API allows you to get information about the status of content and to publish/unpublish content. SPI interfaces allow you to take actions before publishing, after publishing, before unpublishing, and after unpublishing. You can also customize published content if needed. By default, the CMS contains the bundle pl.ds.websight:websight-content-push-filesystem which provides the PublishingPostprocessor SPI implementation for saving published content to the file system for backwards compatibility with the previous approach to content publishing. The saved files can be served to end users via an HTTP server. OSGi configurations for the services FileSystemService and ContentPushConfigurationService can be used to change the published content files in the file system. See the blog post about publishing .","title":"Overview"},{"location":"cms/developers/publishing/#using-publishing-module","text":"Dependency: <dependency> <groupId>pl.ds.websight</groupId> <artifactId>websight-publishing-framework-next</artifactId> <version>2.0.6</version> <scope>provided</scope> </dependency>","title":"Using publishing module"},{"location":"cms/developers/publishing/#api","text":"The API allows you to use the publishing framework.","title":"API"},{"location":"cms/developers/publishing/#publishservice","text":"package pl.ds.websight.publishing.framework ; import java.util.List ; import java.util.function.Predicate ; import javax.jcr.nodetype.NodeTypeDefinition ; import org.apache.sling.api.resource.Resource ; import org.jetbrains.annotations.NotNull ; /** * Provides operations for publishing of resources by copying the resources from * {@value CONTENT_ROOT} to {@value PUBLISHED_ROOT}. Only JCR resources are supported. * <br><br> * It is assumed that read access to {@value PUBLISHED_ROOT} is granted for everyone. Rights for * modification of {@value PUBLISHED_ROOT} nodes by client session is not required; only * {@value PUBLISH_PRIVILEGE} on corresponding {@value CONTENT_ROOT} path is required. * <br><br> * Publication logic uses Node Types Primary Item. If a published node use type has a primary item, * publication (recursive copying to {@value PUBLISHED_ROOT}) is done on the primary item. If the * publishing node uses a type that is not defined as a primary item, only the published resource will be * copied. * <p> * see {@link javax.jcr.Node#getPrimaryItem()} and {@link NodeTypeDefinition#getPrimaryItemName()} * </p> * <br><br> * Parents of published nodes are created with original primary types and required properties only. */ public interface PublishService { /** * JCR privilege for publish action. */ String PUBLISH_PRIVILEGE = \"ws:publish\" ; /** * Root resource for content resources. */ String CONTENT_ROOT = \"/content\" ; /** * Root resource for published resources. */ String PUBLISHED_ROOT = \"/published\" ; /** * Checks if the user associated with the resource resolver has publishing rights for the given * resource. Only resources under {@value CONTENT_ROOT} root can be published. * * @param resource a resource to be verified * @return true if the user associated with the resource resolver has publishing rights for the * given resource */ boolean hasPublishRights ( @NotNull Resource resource ) throws PublishException ; /** * Publishes a single resource. Implementation must ensure that all the preconditions are met. * * @param a resource to be published * @throws PublishException may be thrown if an error occurs trying to publish a resource */ void publish ( @NotNull Resource resource ) throws PublishException ; /** * Optimized publish method for multiple resources. Implementation must ensure that all the * preconditions are met. * * @param resources a resource to be published * @throws PublishException may be thrown if an error occurs trying to publish resources */ void publish ( @NotNull List < Resource > resources ) throws PublishException ; /** * Unpublishes a single resource. Implementation must ensure that all the preconditions are * met. * * @param resource a resource to be unpublished * @throws PublishException may be thrown if an error occurs trying to unpublish a resource */ void unpublish ( @NotNull Resource resource ) throws PublishException ; /** * Optimized unpublish method for multiple resources. Implementation must ensure that all the * preconditions are met. * * @param a resource to be unpublished * @throws PublishException may be thrown if an error occurs trying to unpublish resources */ void unpublish ( @NotNull List < Resource > resources ) throws PublishException ; /** * Get publish view for the given content resource. The method resolves the published version of the * resource from {@link #CONTENT_ROOT} by searching for the corresponding resource under the * {@link #PUBLISHED_ROOT}. * * @param resource content resource * @return publish view */ @NotNull PublishView getPublishView ( @NotNull Resource resource ); /** * Get publish view for the given content resource's parent. The view may contain * {@link PublishStatus#GHOST} resource views. Results are returned only for child resources * that match the predicate. The predicate is also applied to published resources when getting * ghosts. * * @param parent content resources parent * @param filter used to filter the child resources * @return publish views for resources that match the predicate */ @NotNull List < PublishView > getPublishViews ( @NotNull Resource parent , @NotNull Predicate < Resource > filter ); }","title":"PublishService"},{"location":"cms/developers/publishing/#publishview","text":"package pl.ds.websight.publishing.framework ; import java.util.Calendar ; import org.apache.sling.api.resource.Resource ; import org.jetbrains.annotations.NotNull ; import org.jetbrains.annotations.Nullable ; /** * Class representing the view of a content resource together with the corresponding published * version. See {@link PublishService}. */ public interface PublishView { @Nullable Resource getContentResource (); @Nullable Resource getPublishedResource (); @NotNull PublishStatus getPublishStatus (); @Nullable Calendar getLastPublished (); @Nullable String getLastPublishedBy (); }","title":"PublishView"},{"location":"cms/developers/publishing/#publishstatus","text":"package pl.ds.websight.publishing.framework ; /** * Represents status of publishing corresponding to content resource and published resource. See * {@link PublishService}. */ public enum PublishStatus { /** * Both content and published versions exist. Content resource contains unpublished changes. */ UNPUBLISHED_CHANGES , /** * Both content and published versions exist. There are no unpublished changes. */ PUBLISHED , /** * Only content version exists. */ NOT_PUBLISHED , /** * Only published version exists. Content resource was removed after publishing. */ GHOST }","title":"PublishStatus"},{"location":"cms/developers/publishing/#spi","text":"SPI makes it possible to change behavior and inject additional actions into operations triggered by the publishing framework API.","title":"SPI"},{"location":"cms/developers/publishing/#namedpublishingoperation","text":"package pl.ds.websight.publishing.framework.spi ; import org.jetbrains.annotations.NotNull ; /** * Allows you to define operation name. The name of operation service of a particular type must be unique. If * another operation of a given type with the same name is provided, it replaces the previous one. */ public interface NamedPublishingOperation { @NotNull String getName (); }","title":"NamedPublishingOperation"},{"location":"cms/developers/publishing/#publishingcontext","text":"package pl.ds.websight.publishing.framework.spi ; import javax.jcr.Node ; import org.jetbrains.annotations.NotNull ; /** * Context object of JCR content nodes publishing. */ public interface PublishingContext { /** * Returns content root node. * * @return content root node */ @NotNull Node getContentRootNode (); /** * Returns published root node. * * @return published root node */ @NotNull Node getPublishedRootNode (); }","title":"PublishingContext"},{"location":"cms/developers/publishing/#publishingnodecustomizer","text":"package pl.ds.websight.publishing.framework.spi ; import javax.jcr.Node ; import javax.jcr.RepositoryException ; import org.jetbrains.annotations.NotNull ; import pl.ds.websight.publishing.framework.PublishException ; /** * Allows you to customize an already created and published (located under * {@link pl.ds.websight.publishing.framework.PublishService#PUBLISHED_ROOT}) node during * publication of the content. */ public interface PublishingNodeCustomizer extends NamedPublishingOperation { /** * Customizes published node during publication of the content. * * @param context current publishing context * @param node already created, published node (located under * {@link pl.ds.websight.publishing.framework.PublishService#PUBLISHED_ROOT}) */ void customize ( @NotNull PublishingContext context , @NotNull Node node ) throws RepositoryException , PublishException ; }","title":"PublishingNodeCustomizer"},{"location":"cms/developers/publishing/#publishingnodefilter","text":"package pl.ds.websight.publishing.framework.spi ; import javax.jcr.Node ; import javax.jcr.RepositoryException ; import org.jetbrains.annotations.NotNull ; import pl.ds.websight.publishing.framework.PublishException ; /** * Allows you to filter out a content node during publishing. */ public interface PublishingNodeFilter extends NamedPublishingOperation { /** * Accepts a published node during publishing of the content. If the node is not accepted by the filter * it will not be published. * * @param context current publishing context * @param node content node (located under * {@link pl.ds.websight.publishing.framework.PublishService#CONTENT_ROOT}) */ boolean accepts ( @NotNull PublishingContext context , @NotNull Node node ) throws RepositoryException , PublishException ; }","title":"PublishingNodeFilter"},{"location":"cms/developers/publishing/#publishingpostprocessor","text":"package pl.ds.websight.publishing.framework.spi ; import java.util.List ; import org.apache.sling.api.resource.Resource ; import org.jetbrains.annotations.NotNull ; import pl.ds.websight.publishing.framework.PublishException ; /** * Provides processing logic to be executed after publishing/unpublishing. */ public interface PublishingPostprocessor extends NamedPublishingOperation { /** * Executed after publish. * * @param resources resources that were published */ void afterPublish ( @NotNull List < Resource > resources ) throws PublishException ; /** * Executed after unpublish. * * @param resources resources that were unpublished */ void afterUnpublish ( @NotNull List < Resource > resources ) throws PublishException ; }","title":"PublishingPostprocessor"},{"location":"cms/developers/publishing/#publishingpreprocessor","text":"package pl.ds.websight.publishing.framework.spi ; import java.util.List ; import org.apache.sling.api.resource.Resource ; import org.jetbrains.annotations.NotNull ; import pl.ds.websight.publishing.framework.PublishException ; /** * Provides processing logic to be executed before publishing or unpublishing. */ public interface PublishingPreprocessor extends NamedPublishingOperation { /** * Executed before publish. If an exception is thrown, the publishing process will be stopped. * * @param resources that will be published */ void beforePublish ( @NotNull List < Resource > resources ) throws PublishException ; /** * Executed before unpublish. If an exception is thrown, the unpublishing process will be stopped. * * @param resources that will be unpublished */ void beforeUnpublish ( @NotNull List < Resource > resources ) throws PublishException ; }","title":"PublishingPreprocessor"},{"location":"cms/developers/publishing/#publishingpropertycustomizer","text":"package pl.ds.websight.publishing.framework.spi ; import javax.jcr.Property ; import javax.jcr.RepositoryException ; import org.jetbrains.annotations.NotNull ; import pl.ds.websight.publishing.framework.PublishException ; /** * Allows you to customize an already created and published (located under * {@link pl.ds.websight.publishing.framework.PublishService#PUBLISHED_ROOT}) property during * publication of the content. */ public interface PublishingPropertyCustomizer extends NamedPublishingOperation { /** * Customizes a published property during publication of the content. * * @param context current publishing context * @param property already created, published property (located under * {@link pl.ds.websight.publishing.framework.PublishService#PUBLISHED_ROOT}) */ void customize ( @NotNull PublishingContext context , @NotNull Property property ) throws RepositoryException , PublishException ; }","title":"PublishingPropertyCustomizer"},{"location":"cms/developers/publishing/#publishingpropertyfilter","text":"package pl.ds.websight.publishing.framework.spi ; import javax.jcr.Property ; import javax.jcr.RepositoryException ; import org.jetbrains.annotations.NotNull ; import pl.ds.websight.publishing.framework.PublishException ; /** * Allows you to filter out content property during publishing. */ public interface PublishingPropertyFilter extends NamedPublishingOperation { /** * Accepts a published property during publication of the content. If the property is not accepted by the * filter, it will not be published. * * @param context current publishing context * @param property content property (located under * {@link pl.ds.websight.publishing.framework.PublishService#CONTENT_ROOT}) */ boolean accepts ( @NotNull PublishingContext context , @NotNull Property property ) throws RepositoryException , PublishException ; }","title":"PublishingPropertyFilter"},{"location":"cms/developers/quick-start/","text":"Developers quick start guide Introduction Important notice Before you complete this guide, we recommend completing the basic quick start guide first so that you understand basic WebSight CMS concepts. This guide uses starter - our sample project which demonstrates various functionality of Websight CMS and pre-configures for you the following features: Demo site project Luna Howlite components library End-to-end testing We will walk through the process of updating a simple Howlite component. In starter for the sake of simplicity, we overrode the Title component included in the Howlite collection in advance and created the Luna Title component inside the demo project. Your task in completing this guide is to update the Luna Title component and extend existing functionality. The sections below explain more detail. Important notice All scripts presented below are designed for Linux-based platforms. If you are a Windows user, please install and configure Windows Subsystem for Linux (WSL) to use this guide. Part A: Prerequisites Install AdoptOpenJDK 17 , make sure to install the version matching your CPU architecture (on macOS use brew install openjdk@17 ): Install Git Optionally , install Docker Desktop . Part B: Setup local environment First, clone the Starter repository and build it within your local environment using the following commands: git clone https://github.com/websight-io/starter.git cd starter Depending on your choice, you can use Docker to build and run the CMS instance or build and run it locally as a JVM application. JVM application ./mvnw clean package distribution/target/dependency/org.apache.sling.feature.launcher/bin/launcher \\ -f distribution/target/slingfeature-tmp/feature-websight-cms-starter-tar.json Docker docker build -t ds/websight-cms-starter . docker run -p 8080 :8080 --name websight-cms --rm \\ --mount source = segment-store-repository,target = /websight/launcher/repository ds/websight-cms-starter Congratulations! Your local environment is now ready. To view it, open http://localhost:8080/ in a Web browser and log in using the credentials wsadmin / wsadmin . Part C: Changing component Hint If you need help navigating inside WebSight, see the basic getting started guide for details. Business requirement Let's imagine the following scenario: A page owner wants you to update the title of the page that describes the company's new Grand Luxor Jewelry Collection. To fulfill this request, you are asked to keep the collection name on one line and decrease the font size for the text Meet our . The expected result is presented below. Technical scope To do this, you need to extend the Title component included in the Howlite library. Before doing that, let's check the original component first to identify the scope of changes. Run WebSight, open the Luna space and edit the home page. Find the Title component that contains the text Meet our New Grand Luxor Jewelry Collection and edit its properties on the sidepanel. Enable the Overline text option, move Meet our from Heading text to Overline text . As you can see, the result comes close to meeting the expectation, but the font size of the overline text is too small. You could prepare a new version of the Title component with a different font size for the overline text. However, this is not a flexible solution. Creating an additional input field to define the font size for the overline text is a better option. Info For simplicity, we overrode the original component in advance and prepared the Luna Title component. It is a part of the demo site project, but it is just a placeholder. It works exactly as the Title . The following sections guide you on how to implement the change. Component update Your task is to enable setup of the overline font size. To start, first you need to add a new field, overlineSize , to the model class LunaTitleComponent.java . Let's define a default size hl-title__heading--size-5 according to the received design as well. The following Java code will do this: application/backend/src/main/java/pl/ds/luna/components/models/LunaTitleComponent.java package pl.ds.luna.components.models ; import javax.inject.Inject ; import org.apache.sling.api.resource.Resource ; import org.apache.sling.models.annotations.Default ; import org.apache.sling.models.annotations.Model ; import pl.ds.howlite.components.models.TitleComponent ; @Model ( adaptables = Resource . class ) public class LunaTitleComponent extends TitleComponent { @Inject @Default ( values = { \"hl-title__heading--size-5\" }) private String overlineSize ; public String getOverlineSize (){ return overlineSize ; } } Next, you need to update the component HTML template. The original one defines the CSS class that determines the font size as hl-title__heading--size-6 . < h6 class = \"hl-title__heading hl-title__heading--size-6\" data-testid = \"overline\" > ${model.subtitle} </ h6 > Because you updated the model class, you can use its property now. application/backend/src/main/resources/apps/luna/components/lunatitle/lunatitle.html < h6 class = \"hl-title__heading ${model.overlineSize}\" data-testid = \"overline\" > ${model.subtitle} </ h6 > The last step is to add the field to the dialog used by authors. They need it to define component properties in the page editor. To enable this, you have to override the dialog definition from Howlite. Do so by creating a new dialog directory and put .content.json file inside. application/backend/src/main/resources/apps/luna/components/lunatitle/dialog/.content.json { \"tabs\" : { \"generalTab\" : { \"container\" : { \"overlineSize\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"sling:orderBefore\" : \"overline\" , \"path\" : \"/libs/howlite/components/common/headingsize\" , \"include\" : { \"sling:resourceSuperType\" : \"/libs/howlite/components/common/headingsize\" , \"label\" : \"Overline size\" , \"name\" : \"overlineSize\" , \"description\" : \"Changes font size\" , \"s\" : { \"selected\" : true }, \"m\" : { \"selected\" : false } } } } } } } The above definition specifies the new overlineSize field. It is placed before the overline field and uses a heading size definition from Howlite, but with small size selected by default. Apply changes Run the following command to apply the changes to your local environment. ./mvnw -f application/backend/pom.xml clean install -P autoInstallBundle Part D: Use updated component Hint If you need help to navigate inside WebSight, see the general getting started for details. The page owner can use the updated component now. Let's verify by checking it out in the admin interface. Switch to WebSight CMS, open the Luna space, and edit the home page. Find the Title with text Meet our New Grand Luxor Jewelry Collection . Then, find the Luna Title in the component tree on the left. Drag and drop the component on the page just below the original one. Edit properties of the Luna Title on the side panel: set Heading level to H2 set Heading size to XL set Heading text to New Grand Luxor Jewelry Collection enable overline text set Overline size to L set Overline text to Meet our The title should appear as expected now. You can delete the original Title component to finalize the change. Part E: Clean-up Stop the environment After completing this guide, you can stop your local environment by hitting Ctrl+C in the terminal window where you started it. The environment will still exist but will no longer be running. Delete environment If you don't need your environment anymore, you can delete it permanently by running the following command (depending on your choice of running the CMS as a JVM application or using Docker): JVM application Remove the launcher directory created by your local environment. Docker docker volume rm tar-repo Next steps This guide walked through the essentials of developing components for WebSight CMS. As a next step, we encourage you to explore additional details about the following: Project setup Application development Components development Dialogs Page editor End-to-end-testing","title":"Developers quick start guide"},{"location":"cms/developers/quick-start/#developers-quick-start-guide","text":"","title":"Developers quick start guide"},{"location":"cms/developers/quick-start/#introduction","text":"Important notice Before you complete this guide, we recommend completing the basic quick start guide first so that you understand basic WebSight CMS concepts. This guide uses starter - our sample project which demonstrates various functionality of Websight CMS and pre-configures for you the following features: Demo site project Luna Howlite components library End-to-end testing We will walk through the process of updating a simple Howlite component. In starter for the sake of simplicity, we overrode the Title component included in the Howlite collection in advance and created the Luna Title component inside the demo project. Your task in completing this guide is to update the Luna Title component and extend existing functionality. The sections below explain more detail. Important notice All scripts presented below are designed for Linux-based platforms. If you are a Windows user, please install and configure Windows Subsystem for Linux (WSL) to use this guide.","title":"Introduction"},{"location":"cms/developers/quick-start/#part-a-prerequisites","text":"Install AdoptOpenJDK 17 , make sure to install the version matching your CPU architecture (on macOS use brew install openjdk@17 ): Install Git Optionally , install Docker Desktop .","title":"Part A: Prerequisites"},{"location":"cms/developers/quick-start/#part-b-setup-local-environment","text":"First, clone the Starter repository and build it within your local environment using the following commands: git clone https://github.com/websight-io/starter.git cd starter Depending on your choice, you can use Docker to build and run the CMS instance or build and run it locally as a JVM application. JVM application ./mvnw clean package distribution/target/dependency/org.apache.sling.feature.launcher/bin/launcher \\ -f distribution/target/slingfeature-tmp/feature-websight-cms-starter-tar.json Docker docker build -t ds/websight-cms-starter . docker run -p 8080 :8080 --name websight-cms --rm \\ --mount source = segment-store-repository,target = /websight/launcher/repository ds/websight-cms-starter Congratulations! Your local environment is now ready. To view it, open http://localhost:8080/ in a Web browser and log in using the credentials wsadmin / wsadmin .","title":"Part B: Setup local environment"},{"location":"cms/developers/quick-start/#part-c-changing-component","text":"Hint If you need help navigating inside WebSight, see the basic getting started guide for details.","title":"Part C: Changing component"},{"location":"cms/developers/quick-start/#business-requirement","text":"Let's imagine the following scenario: A page owner wants you to update the title of the page that describes the company's new Grand Luxor Jewelry Collection. To fulfill this request, you are asked to keep the collection name on one line and decrease the font size for the text Meet our . The expected result is presented below.","title":"Business requirement"},{"location":"cms/developers/quick-start/#technical-scope","text":"To do this, you need to extend the Title component included in the Howlite library. Before doing that, let's check the original component first to identify the scope of changes. Run WebSight, open the Luna space and edit the home page. Find the Title component that contains the text Meet our New Grand Luxor Jewelry Collection and edit its properties on the sidepanel. Enable the Overline text option, move Meet our from Heading text to Overline text . As you can see, the result comes close to meeting the expectation, but the font size of the overline text is too small. You could prepare a new version of the Title component with a different font size for the overline text. However, this is not a flexible solution. Creating an additional input field to define the font size for the overline text is a better option. Info For simplicity, we overrode the original component in advance and prepared the Luna Title component. It is a part of the demo site project, but it is just a placeholder. It works exactly as the Title . The following sections guide you on how to implement the change.","title":"Technical scope"},{"location":"cms/developers/quick-start/#component-update","text":"Your task is to enable setup of the overline font size. To start, first you need to add a new field, overlineSize , to the model class LunaTitleComponent.java . Let's define a default size hl-title__heading--size-5 according to the received design as well. The following Java code will do this: application/backend/src/main/java/pl/ds/luna/components/models/LunaTitleComponent.java package pl.ds.luna.components.models ; import javax.inject.Inject ; import org.apache.sling.api.resource.Resource ; import org.apache.sling.models.annotations.Default ; import org.apache.sling.models.annotations.Model ; import pl.ds.howlite.components.models.TitleComponent ; @Model ( adaptables = Resource . class ) public class LunaTitleComponent extends TitleComponent { @Inject @Default ( values = { \"hl-title__heading--size-5\" }) private String overlineSize ; public String getOverlineSize (){ return overlineSize ; } } Next, you need to update the component HTML template. The original one defines the CSS class that determines the font size as hl-title__heading--size-6 . < h6 class = \"hl-title__heading hl-title__heading--size-6\" data-testid = \"overline\" > ${model.subtitle} </ h6 > Because you updated the model class, you can use its property now. application/backend/src/main/resources/apps/luna/components/lunatitle/lunatitle.html < h6 class = \"hl-title__heading ${model.overlineSize}\" data-testid = \"overline\" > ${model.subtitle} </ h6 > The last step is to add the field to the dialog used by authors. They need it to define component properties in the page editor. To enable this, you have to override the dialog definition from Howlite. Do so by creating a new dialog directory and put .content.json file inside. application/backend/src/main/resources/apps/luna/components/lunatitle/dialog/.content.json { \"tabs\" : { \"generalTab\" : { \"container\" : { \"overlineSize\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"sling:orderBefore\" : \"overline\" , \"path\" : \"/libs/howlite/components/common/headingsize\" , \"include\" : { \"sling:resourceSuperType\" : \"/libs/howlite/components/common/headingsize\" , \"label\" : \"Overline size\" , \"name\" : \"overlineSize\" , \"description\" : \"Changes font size\" , \"s\" : { \"selected\" : true }, \"m\" : { \"selected\" : false } } } } } } } The above definition specifies the new overlineSize field. It is placed before the overline field and uses a heading size definition from Howlite, but with small size selected by default.","title":"Component update"},{"location":"cms/developers/quick-start/#apply-changes","text":"Run the following command to apply the changes to your local environment. ./mvnw -f application/backend/pom.xml clean install -P autoInstallBundle","title":"Apply changes"},{"location":"cms/developers/quick-start/#part-d-use-updated-component","text":"Hint If you need help to navigate inside WebSight, see the general getting started for details. The page owner can use the updated component now. Let's verify by checking it out in the admin interface. Switch to WebSight CMS, open the Luna space, and edit the home page. Find the Title with text Meet our New Grand Luxor Jewelry Collection . Then, find the Luna Title in the component tree on the left. Drag and drop the component on the page just below the original one. Edit properties of the Luna Title on the side panel: set Heading level to H2 set Heading size to XL set Heading text to New Grand Luxor Jewelry Collection enable overline text set Overline size to L set Overline text to Meet our The title should appear as expected now. You can delete the original Title component to finalize the change.","title":"Part D: Use updated component"},{"location":"cms/developers/quick-start/#part-e-clean-up","text":"","title":"Part E: Clean-up"},{"location":"cms/developers/quick-start/#stop-the-environment","text":"After completing this guide, you can stop your local environment by hitting Ctrl+C in the terminal window where you started it. The environment will still exist but will no longer be running.","title":"Stop the environment"},{"location":"cms/developers/quick-start/#delete-environment","text":"If you don't need your environment anymore, you can delete it permanently by running the following command (depending on your choice of running the CMS as a JVM application or using Docker): JVM application Remove the launcher directory created by your local environment. Docker docker volume rm tar-repo","title":"Delete environment"},{"location":"cms/developers/quick-start/#next-steps","text":"This guide walked through the essentials of developing components for WebSight CMS. As a next step, we encourage you to explore additional details about the following: Project setup Application development Components development Dialogs Page editor End-to-end-testing","title":"Next steps"},{"location":"cms/developers/setup/","text":"Project setup This document provides an introduction to working with WebSight projects. It explains how to configure, build and run a new project using Maven Archetype. It also describes the contents of the project build and runtime files. Although the specific contents of your project may vary depending on your needs, the sample project described on this page is a useful starting-point for running Web applications using WebSight CMS. Prerequisites To create and run a project, you will need Java 17 or later, Maven 3.8.5 or later. You can check your Java version in most environments with: java -version openjdk 17.0.2 2022-01-18 OpenJDK Runtime Environment Temurin-17.0.2+8 (build 17.0.2+8) OpenJDK 64-Bit Server VM Temurin-17.0.2+8 (build 17.0.2+8, mixed mode) Check your Maven version with: mvn --version Apache Maven 3.8.5 (3599d3414f046de2324203b78ddcf9b5e4388aa0) Generate a project To create a new project, first open a command prompt and cd to the directory where you want to store your project. Next, use a Maven command to create your project, being sure to declare the desired parameters properly. Use the groupId , artifactId , and version parameters to declare Maven artifacts for your project. Use projectName , projectId and package parameters to define technical requirements (such as application resources paths and Docker image names) and the root package for Java code. Use the archetypeVersion parameter to set the archetype version you want to use. You can check the latest version here . Use the cmsVersion parameter to specify the WebSight CMS version that the project should use. Check the WebSight Release Notes to find the latest available version. Example command: mvn archetype:generate \\ -DarchetypeGroupId=pl.ds.websight \\ -DarchetypeArtifactId=websight-cms-ce-project-archetype \\ -DarchetypeVersion=3 \\ -DgroupId=my.groupId \\ -DartifactId=my-artifactId \\ -Dversion=1.0.0-SNAPSHOT \\ -DprojectName=\"Example Project\" \\ -DprojectId=example-project \\ -Dpackage=com.example.project \\ -DcmsVersion=1.23.0 The above command creates a project with the following structure: . \u2514\u2500\u2500 my-artifactId \u251c\u2500\u2500 README.md \u251c\u2500\u2500 application \u251c\u2500\u2500 content \u251c\u2500\u2500 distribution \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 tests Project structure The contents of the project structure we generated above are an example of what you'd typically include when creating a project for a Web application using WebSight CMS. Note in particular the following modules: application - components code and scripts delivered as OSGi bundles backend - CMS elements (pages, templates, components, etc.), Java models and services frontend - frontend project bundled by webpack content - initial content as a JCR vault module (content_package) distribution - project distribution - Sling feature model and optionally Docker images tests - tests used to validate the distribution content - content for end-to-end tests end-to-end - end-to-end tests It is important to note that the project contains built-in server definitions and configurations. The distribution module is responsible for bundling the application based on the configurations and WebSight CMS modules using Sling Feature Model . Optionally it also prepares the Docker images (however, Docker is out of scope of this guide). Build the application To build the project, use the Maven command: mvn clean package Add e2e profile to execute end-to-end tests: mvn clean verify -P e2e You should see successful end-to-end test execution in the log: Execution should end with a successful build message: Run the instance Once your project build is complete, you can start a local instance by running the following command: java --add-opens java.base/java.lang = ALL-UNNAMED \\ -jar distribution/target/dependency/org.apache.sling.feature.launcher.jar \\ -f distribution/target/slingfeature-tmp/feature-websight-cms-example-project-tar.json The resulting instance runs WebSight CMS with your application at localhost:8080 . The default login is wsadmin / wsadmin . Published content is available locally at localhost:8080/published . See README.md for additional details about the runtime environment. Instance overview After login, you will be redirected to the Spaces list. In WebSight CMS content is organized in Spaces. The Spaces list shows you the generated application and its associated content using the content module: http://localhost:8080/apps/websight/index.html/content::spaces After clicking on the Space name, the Pages dashboard opens with one page delivered in the initial content. You can manage your pages here and navigate to the Assets dashboard (to manage Assets) or open the Page editor to edit page content from within the CMS: http://localhost:8080/apps/websight/index.html/content/example-project/pages In the Right top corner, you will find an Admin tools menu with links to administration tools. Or, the Admin dashboard can be accessed directly using the following link: http://localhost:8080/apps/admin Next steps Now that you know how to set up a new project using WebSight CMS, consider learning more about the following topics: Application development Components development Dialogs Page editor","title":"Project setup"},{"location":"cms/developers/setup/#project-setup","text":"This document provides an introduction to working with WebSight projects. It explains how to configure, build and run a new project using Maven Archetype. It also describes the contents of the project build and runtime files. Although the specific contents of your project may vary depending on your needs, the sample project described on this page is a useful starting-point for running Web applications using WebSight CMS.","title":"Project setup"},{"location":"cms/developers/setup/#prerequisites","text":"To create and run a project, you will need Java 17 or later, Maven 3.8.5 or later. You can check your Java version in most environments with: java -version openjdk 17.0.2 2022-01-18 OpenJDK Runtime Environment Temurin-17.0.2+8 (build 17.0.2+8) OpenJDK 64-Bit Server VM Temurin-17.0.2+8 (build 17.0.2+8, mixed mode) Check your Maven version with: mvn --version Apache Maven 3.8.5 (3599d3414f046de2324203b78ddcf9b5e4388aa0)","title":"Prerequisites"},{"location":"cms/developers/setup/#generate-a-project","text":"To create a new project, first open a command prompt and cd to the directory where you want to store your project. Next, use a Maven command to create your project, being sure to declare the desired parameters properly. Use the groupId , artifactId , and version parameters to declare Maven artifacts for your project. Use projectName , projectId and package parameters to define technical requirements (such as application resources paths and Docker image names) and the root package for Java code. Use the archetypeVersion parameter to set the archetype version you want to use. You can check the latest version here . Use the cmsVersion parameter to specify the WebSight CMS version that the project should use. Check the WebSight Release Notes to find the latest available version. Example command: mvn archetype:generate \\ -DarchetypeGroupId=pl.ds.websight \\ -DarchetypeArtifactId=websight-cms-ce-project-archetype \\ -DarchetypeVersion=3 \\ -DgroupId=my.groupId \\ -DartifactId=my-artifactId \\ -Dversion=1.0.0-SNAPSHOT \\ -DprojectName=\"Example Project\" \\ -DprojectId=example-project \\ -Dpackage=com.example.project \\ -DcmsVersion=1.23.0 The above command creates a project with the following structure: . \u2514\u2500\u2500 my-artifactId \u251c\u2500\u2500 README.md \u251c\u2500\u2500 application \u251c\u2500\u2500 content \u251c\u2500\u2500 distribution \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 tests","title":"Generate a project"},{"location":"cms/developers/setup/#project-structure","text":"The contents of the project structure we generated above are an example of what you'd typically include when creating a project for a Web application using WebSight CMS. Note in particular the following modules: application - components code and scripts delivered as OSGi bundles backend - CMS elements (pages, templates, components, etc.), Java models and services frontend - frontend project bundled by webpack content - initial content as a JCR vault module (content_package) distribution - project distribution - Sling feature model and optionally Docker images tests - tests used to validate the distribution content - content for end-to-end tests end-to-end - end-to-end tests It is important to note that the project contains built-in server definitions and configurations. The distribution module is responsible for bundling the application based on the configurations and WebSight CMS modules using Sling Feature Model . Optionally it also prepares the Docker images (however, Docker is out of scope of this guide).","title":"Project structure"},{"location":"cms/developers/setup/#build-the-application","text":"To build the project, use the Maven command: mvn clean package Add e2e profile to execute end-to-end tests: mvn clean verify -P e2e You should see successful end-to-end test execution in the log: Execution should end with a successful build message:","title":"Build the application"},{"location":"cms/developers/setup/#run-the-instance","text":"Once your project build is complete, you can start a local instance by running the following command: java --add-opens java.base/java.lang = ALL-UNNAMED \\ -jar distribution/target/dependency/org.apache.sling.feature.launcher.jar \\ -f distribution/target/slingfeature-tmp/feature-websight-cms-example-project-tar.json The resulting instance runs WebSight CMS with your application at localhost:8080 . The default login is wsadmin / wsadmin . Published content is available locally at localhost:8080/published . See README.md for additional details about the runtime environment.","title":"Run the instance"},{"location":"cms/developers/setup/#instance-overview","text":"After login, you will be redirected to the Spaces list. In WebSight CMS content is organized in Spaces. The Spaces list shows you the generated application and its associated content using the content module: http://localhost:8080/apps/websight/index.html/content::spaces After clicking on the Space name, the Pages dashboard opens with one page delivered in the initial content. You can manage your pages here and navigate to the Assets dashboard (to manage Assets) or open the Page editor to edit page content from within the CMS: http://localhost:8080/apps/websight/index.html/content/example-project/pages In the Right top corner, you will find an Admin tools menu with links to administration tools. Or, the Admin dashboard can be accessed directly using the following link: http://localhost:8080/apps/admin","title":"Instance overview"},{"location":"cms/developers/setup/#next-steps","text":"Now that you know how to set up a new project using WebSight CMS, consider learning more about the following topics: Application development Components development Dialogs Page editor","title":"Next steps"},{"location":"cms/developers/wcm-mode/","text":"WCM mode Overview Web Content Management (WCM) mode configures information related to how content is requested. In other words, it refers to the mode through which content is to be used. Available modes are: disabled - for end-user requests edit - for content editing preview - for previews of content editing To set the WCM mode, add the request parameter wcmmode to the URL that points to any resource under the /content/* path. For example: /content/test/pages/some-page.html?wcmmode=disabled . The default mode is disabled . Checking WCM mode It is possible to test the current WCM mode and respond depending on the mode value. You can achieve this using both HTL and the Java API. HTL In Sling Scripting, including HTL, WCM mode flags are available. They can be used to evaluate conditions via, for example, a data-sly-test . <sly data-sly-test=\"${wcmmode.disabled}\"> This will be printed only if the current mode is 'disabled'. </sly> <sly data-sly-test=\"${wcmmode.edit}\"> This will be printed only if the current mode is 'edit'. </sly> <sly data-sly-test=\"${wcmmode.preview}\"> This will be printed only if the current mode is 'preview'. </sly> Java API In the Java API, the WCM mode is represented by the pl.ds.websight.pages.foundation.WcmMode enum and delivered by pl.ds.websight:websight-pages-foundation-bundle . The enum value is set within the request attribute WcmMode.REQUEST_ATTRIBUTE_NAME and is used to resolve the WCM mode from the request during request processing. The mode can be tested using the WcmMode enum methods. Forcing WCM mode in HTL If you include resources or scripts in HTL using data-sly-resource or data-sly-include , you can set the WCM mode to a specific value using the requestAttributes option and the wcmmode object available in HTL. Read more about data-sly-resource and data-sly-include here . <sly data-sly-resource=\"${'title' @ requestAttributes = wcmmode.disabledModeAttribute}\"></sly> <sly data-sly-resource=\"${'title' @ requestAttributes = wcmmode.editModeAttribute}\"></sly> <sly data-sly-resource=\"${'title' @ requestAttributes = wcmmode.previewModeAttribute}\"></sly>","title":"WCM mode"},{"location":"cms/developers/wcm-mode/#wcm-mode","text":"","title":"WCM mode"},{"location":"cms/developers/wcm-mode/#overview","text":"Web Content Management (WCM) mode configures information related to how content is requested. In other words, it refers to the mode through which content is to be used. Available modes are: disabled - for end-user requests edit - for content editing preview - for previews of content editing To set the WCM mode, add the request parameter wcmmode to the URL that points to any resource under the /content/* path. For example: /content/test/pages/some-page.html?wcmmode=disabled . The default mode is disabled .","title":"Overview"},{"location":"cms/developers/wcm-mode/#checking-wcm-mode","text":"It is possible to test the current WCM mode and respond depending on the mode value. You can achieve this using both HTL and the Java API.","title":"Checking WCM mode"},{"location":"cms/developers/wcm-mode/#htl","text":"In Sling Scripting, including HTL, WCM mode flags are available. They can be used to evaluate conditions via, for example, a data-sly-test . <sly data-sly-test=\"${wcmmode.disabled}\"> This will be printed only if the current mode is 'disabled'. </sly> <sly data-sly-test=\"${wcmmode.edit}\"> This will be printed only if the current mode is 'edit'. </sly> <sly data-sly-test=\"${wcmmode.preview}\"> This will be printed only if the current mode is 'preview'. </sly>","title":"HTL"},{"location":"cms/developers/wcm-mode/#java-api","text":"In the Java API, the WCM mode is represented by the pl.ds.websight.pages.foundation.WcmMode enum and delivered by pl.ds.websight:websight-pages-foundation-bundle . The enum value is set within the request attribute WcmMode.REQUEST_ATTRIBUTE_NAME and is used to resolve the WCM mode from the request during request processing. The mode can be tested using the WcmMode enum methods.","title":"Java API"},{"location":"cms/developers/wcm-mode/#forcing-wcm-mode-in-htl","text":"If you include resources or scripts in HTL using data-sly-resource or data-sly-include , you can set the WCM mode to a specific value using the requestAttributes option and the wcmmode object available in HTL. Read more about data-sly-resource and data-sly-include here . <sly data-sly-resource=\"${'title' @ requestAttributes = wcmmode.disabledModeAttribute}\"></sly> <sly data-sly-resource=\"${'title' @ requestAttributes = wcmmode.editModeAttribute}\"></sly> <sly data-sly-resource=\"${'title' @ requestAttributes = wcmmode.previewModeAttribute}\"></sly>","title":"Forcing WCM mode in HTL"},{"location":"cms/intro/","text":"Intro This documentation contains all technical details related to the setting up, deploying and customizing WebSight CMS. Community Roadmap Are you interested in what is coming? See our public roadmap . The roadmap presents what features we are working on and ideas we are exploring and analyzing. Have any suggestions, comments, or questions? Share them via GitHub discussions . Support To support WebSight and engage with our community please use the following channels: WebSight Starter repository feel free to star the repository to be notified about new releases, Project issues to request new feature or let us know about any bugs you find, Project discussions to ask questions, share ideas or disucss use cases, LinkedIn/websight-io to follow us on LinkedIn, @websight_io to follow us on Twitter. Updates WebSight blog page is the place you can find such information like articles, technology insights and release announcements. We recommend also to follow our @websight_io Twitter and LinkedIn/websight-io accounts if you are interested in news and updates notifications.","title":"Intro"},{"location":"cms/intro/#intro","text":"This documentation contains all technical details related to the setting up, deploying and customizing WebSight CMS.","title":"Intro"},{"location":"cms/intro/#community","text":"","title":"Community"},{"location":"cms/intro/#roadmap","text":"Are you interested in what is coming? See our public roadmap . The roadmap presents what features we are working on and ideas we are exploring and analyzing. Have any suggestions, comments, or questions? Share them via GitHub discussions .","title":"Roadmap"},{"location":"cms/intro/#support","text":"To support WebSight and engage with our community please use the following channels: WebSight Starter repository feel free to star the repository to be notified about new releases, Project issues to request new feature or let us know about any bugs you find, Project discussions to ask questions, share ideas or disucss use cases, LinkedIn/websight-io to follow us on LinkedIn, @websight_io to follow us on Twitter.","title":"Support"},{"location":"cms/intro/#updates","text":"WebSight blog page is the place you can find such information like articles, technology insights and release announcements. We recommend also to follow our @websight_io Twitter and LinkedIn/websight-io accounts if you are interested in news and updates notifications.","title":"Updates"},{"location":"cms/quick-start/","text":"Quick start guide Follow this guide to run a local instance of WebSight CMS using Docker. The local instance serves as a testing instance where you can check out our demo site Luna . You can also use Howlite , our example components library, to create or update pages within the local instance. This guide is a starting-point for developing custom components for WebSight CMS. After you've mastered the concepts explained on this page, you can move onto our quick start for developers for a deeper dive into components development for WebSight CMS. Prerequisites Before going any further, please ensure you have Docker Desktop installed and launched on your machine. Docker Desktop supports Windows, macOS, and Linux. Part A: Run a local instance using Docker Quick setup with curl If you have curl installed, you can set up the local environment using the following command. Then, you can go directly to Part B below. curl https://docs.websight.io/scripts/get.sh | sh If this method doesn't work for you, follow the step (1) below to set up the WebSight CMS instance manually. 1. Create Docker container environment Run the following command to start a Docker container with WebSight CMS: docker run -p 8080 :8080 --name websight-cms --rm \\ --mount source = segment-store-repository,target = /websight/launcher/repository \\ europe-docker.pkg.dev/websight-io/public/websight-cms-starter:1.23.0 A fresh WebSight instance will start within a couple of seconds. After it launches, you can open a Web browser to the URL http://localhost:8080/ to view the WebSight admin panel. Log in with wsadmin username and wsadmin as the password. Tip To turn off the local environment, use the ctrl + c key combination in the terminal that you used to launch your Docker instance. You can restart the instance by repeating the steps you used to launch it initially. Part B: Publish demo site At this point, your local environment is running, but you still need to publish the demo site that is included in the distribution. Do this by following the steps below. 1. Open the Websight admin panel In the local instance, the WebSight admin panel is accessible by navigating to http://localhost:8080/ in a Web browser. Log in with wsadmin username and wsadmin as the password. 2. Select space for the demo site We use Spaces to organise content. In the WebSight admin panel, open the space for the demo site Luna - custom code . 3. Publish assets and the demo site Open the list of Assets using the left sidebar. Select the folder images and then click Publish . Open the list of Pages using the left sidebar. Select all pages and click Publish . 4. View the demo site Congratulations! The demo site is now available by navigating to http://localhost:8080/published/luna/pages/Homepage.html in a Web browser. Additional sample sites The distribution contains other demo sites. After assets and pages publication, they are available at: http://localhost:8080/published/kyanite/pages/Personal.html Personal page created with the Kyanite components library http://localhost:8080/lowcodeluna/pages/Homepage.html Luna - low code http://localhost:8080/published/nocodeluna/pages/Homepage.html Luna - no code Part C: Update a page Now that your local demo site is published, you can experiment with making basic changes to pages. As an example, the following steps show how to update the home page for the demo site that is built into WebSight. 1. Open the Websight admin panel The WebSight admin panel runs at http://localhost:8080/ . Log in with wsadmin username and wsadmin as the password. 2. Select space for the demo site We use Spaces to organise content. Please open the space for the demo site Luna - custom code . 3. Edit the home page Use the Pencil icon to open the Page editor for the home page. Scroll down the content to the section Custom Made Engagement Rings . Find the Rich text editor on the tab Components and use the drag-and-drop feature to place it just below the section title. Click on the new component to check its properties on the side panel on the right. Copy & paste the following text into the Text field on the General tab. Every couple is unique and we want to deliver an engagement ring that is unique too \u2013 taking the tastes of the couple into account. We love having couples visit the store and work with them to create a unique custom engagement ring according to their tastes. 4. Publish changes At this point, you've updated the page. However, unpublished changes are not visible on the site yet. To apply them, open the dropdown in the right corner of the admin interface and select action Publish . 5. View the updated page Congratulations! Your changes should be visible now at http://localhost:8080/published/luna/pages/Homepage.html . Next steps This page demonstrated the basics of editing pages with WebSight CMS. As a next step, we encourage you to explore more technical details about WebSight: Howlite documentation to browse components available in the library we used to create the Luna site, Kyanite components for the WebSight CMS . It is a general set of components inspired by Bulma framework. You can use the collection and build your site without any code development, Quick start tutorial for developers to check how to implement custom components. The Luna site (i.e., Luna - custom code ) you looked through utilizes the Howlite components library. However, the distribution contains other demo sites, and we recommend exploring them too. Before you open the following links, visit the admin panel , and publish pages and assets for a given space. Kyanite - personal template . It is a sample inspired by the Portfolio page . We created it using the Kyanite components . Luna - no code . We authored the Luna site with the Kyanite components without additional custom code or development. Luna - low code . We added some custom styling and implemented only components missing in the Kyanite library.","title":"Quick start guide"},{"location":"cms/quick-start/#quick-start-guide","text":"Follow this guide to run a local instance of WebSight CMS using Docker. The local instance serves as a testing instance where you can check out our demo site Luna . You can also use Howlite , our example components library, to create or update pages within the local instance. This guide is a starting-point for developing custom components for WebSight CMS. After you've mastered the concepts explained on this page, you can move onto our quick start for developers for a deeper dive into components development for WebSight CMS. Prerequisites Before going any further, please ensure you have Docker Desktop installed and launched on your machine. Docker Desktop supports Windows, macOS, and Linux.","title":"Quick start guide"},{"location":"cms/quick-start/#part-a-run-a-local-instance-using-docker","text":"Quick setup with curl If you have curl installed, you can set up the local environment using the following command. Then, you can go directly to Part B below. curl https://docs.websight.io/scripts/get.sh | sh If this method doesn't work for you, follow the step (1) below to set up the WebSight CMS instance manually.","title":"Part A: Run a local instance using Docker"},{"location":"cms/quick-start/#1-create-docker-container-environment","text":"Run the following command to start a Docker container with WebSight CMS: docker run -p 8080 :8080 --name websight-cms --rm \\ --mount source = segment-store-repository,target = /websight/launcher/repository \\ europe-docker.pkg.dev/websight-io/public/websight-cms-starter:1.23.0 A fresh WebSight instance will start within a couple of seconds. After it launches, you can open a Web browser to the URL http://localhost:8080/ to view the WebSight admin panel. Log in with wsadmin username and wsadmin as the password. Tip To turn off the local environment, use the ctrl + c key combination in the terminal that you used to launch your Docker instance. You can restart the instance by repeating the steps you used to launch it initially.","title":"1. Create Docker container environment"},{"location":"cms/quick-start/#part-b-publish-demo-site","text":"At this point, your local environment is running, but you still need to publish the demo site that is included in the distribution. Do this by following the steps below.","title":"Part B: Publish demo site"},{"location":"cms/quick-start/#1-open-the-websight-admin-panel","text":"In the local instance, the WebSight admin panel is accessible by navigating to http://localhost:8080/ in a Web browser. Log in with wsadmin username and wsadmin as the password.","title":"1. Open the Websight admin panel"},{"location":"cms/quick-start/#2-select-space-for-the-demo-site","text":"We use Spaces to organise content. In the WebSight admin panel, open the space for the demo site Luna - custom code .","title":"2. Select space for the demo site"},{"location":"cms/quick-start/#3-publish-assets-and-the-demo-site","text":"Open the list of Assets using the left sidebar. Select the folder images and then click Publish . Open the list of Pages using the left sidebar. Select all pages and click Publish .","title":"3. Publish assets and the demo site"},{"location":"cms/quick-start/#4-view-the-demo-site","text":"Congratulations! The demo site is now available by navigating to http://localhost:8080/published/luna/pages/Homepage.html in a Web browser. Additional sample sites The distribution contains other demo sites. After assets and pages publication, they are available at: http://localhost:8080/published/kyanite/pages/Personal.html Personal page created with the Kyanite components library http://localhost:8080/lowcodeluna/pages/Homepage.html Luna - low code http://localhost:8080/published/nocodeluna/pages/Homepage.html Luna - no code","title":"4. View the demo site"},{"location":"cms/quick-start/#part-c-update-a-page","text":"Now that your local demo site is published, you can experiment with making basic changes to pages. As an example, the following steps show how to update the home page for the demo site that is built into WebSight.","title":"Part C: Update a page"},{"location":"cms/quick-start/#1-open-the-websight-admin-panel_1","text":"The WebSight admin panel runs at http://localhost:8080/ . Log in with wsadmin username and wsadmin as the password.","title":"1. Open the Websight admin panel"},{"location":"cms/quick-start/#2-select-space-for-the-demo-site_1","text":"We use Spaces to organise content. Please open the space for the demo site Luna - custom code .","title":"2. Select space for the demo site"},{"location":"cms/quick-start/#3-edit-the-home-page","text":"Use the Pencil icon to open the Page editor for the home page. Scroll down the content to the section Custom Made Engagement Rings . Find the Rich text editor on the tab Components and use the drag-and-drop feature to place it just below the section title. Click on the new component to check its properties on the side panel on the right. Copy & paste the following text into the Text field on the General tab. Every couple is unique and we want to deliver an engagement ring that is unique too \u2013 taking the tastes of the couple into account. We love having couples visit the store and work with them to create a unique custom engagement ring according to their tastes.","title":"3. Edit the home page"},{"location":"cms/quick-start/#4-publish-changes","text":"At this point, you've updated the page. However, unpublished changes are not visible on the site yet. To apply them, open the dropdown in the right corner of the admin interface and select action Publish .","title":"4. Publish changes"},{"location":"cms/quick-start/#5-view-the-updated-page","text":"Congratulations! Your changes should be visible now at http://localhost:8080/published/luna/pages/Homepage.html .","title":"5. View the updated page"},{"location":"cms/quick-start/#next-steps","text":"This page demonstrated the basics of editing pages with WebSight CMS. As a next step, we encourage you to explore more technical details about WebSight: Howlite documentation to browse components available in the library we used to create the Luna site, Kyanite components for the WebSight CMS . It is a general set of components inspired by Bulma framework. You can use the collection and build your site without any code development, Quick start tutorial for developers to check how to implement custom components. The Luna site (i.e., Luna - custom code ) you looked through utilizes the Howlite components library. However, the distribution contains other demo sites, and we recommend exploring them too. Before you open the following links, visit the admin panel , and publish pages and assets for a given space. Kyanite - personal template . It is a sample inspired by the Portfolio page . We created it using the Kyanite components . Luna - no code . We authored the Luna site with the Kyanite components without additional custom code or development. Luna - low code . We added some custom styling and implemented only components missing in the Kyanite library.","title":"Next steps"},{"location":"cms/release-notes/","text":"WebSight CMS release notes 1.22.0 Nov 6, 2023 Page Management Fixed the extra loading state display. Fixed jumping resource selector in the content tree. Page Editor Added multiple viewport support. Improved hierarchy levels representation in the content tree. Improved drag-and-drop reordering components in the content tree. Fixed #139 possibility of dropping component into ancestors of an empty containers. Fixed element selectors alignment. 1.21.2 Oct 13, 2023 Page Editor Fixed component drag-and-drop performance issues. 1.21.1 Oct 10, 2023 Page Editor Fixed page scrolling to the top after any update. 1.21.0 Oct 4, 2023 Page and Asset Management Fixed the invisible last-row actions when the table has many items. Fixed flickering loading state in the page and assets trees. Page Editor Added direct component reordering in the content tree. Improved drag-and-drop for containers. Improved switching between edit and preview modes - page position in the workspace remains the same now. Fixed the unexpected error notification after changing page properties in the preview mode. Fixed the outdated publication status after inline editing. Admin tools Added advanced options for package installation during upload. Other Fixed broken link to the terms of use on the login page. Removed browser-based field validation messages as they duplicate the ones from CMS. 1.20.1 Sep 21, 2023 Page and Asset Management Fixed #179 - the broken preview of a selected asset. Fixed the lack of an icon for the page action view as published . Page Editor Improved UX for version management - added a dedicated icon on the top bar. 1.20.0 Sep 13, 2023 Page and Asset Management Added an action to view a page as published before its publication. Improved the move action - added a step to rename a page, an asset, or a folder as a part of the action. Added loading states for the page tree and the asset tree. Added drag-and-drop support for asset upload. Improved UX for uploading the same assets again - simplified dialog options. Page Editor Added an ability to view a page as published before its publication #98 . Fixed the right-side panel refresh after a user clears a property in a dialog. Fixed missing trailing new lines in the rich text editor input field in the right side panel. Admin tools Fixed the ability to re-upload a package in the package manager when the override option is not selected. Fixed the download link for binary JCR properties in the resource browser. 1.19.0 Aug 23, 2023 Page and Asset Management Added skeleton for the general tab. Added clearing the section in the dashboard table by escape button. Page Management Added the possibility to see \"ghost\" pages. Added the possibility to unpublish \"ghost\" pages. Groovy Console Fixed help content: presenting content with code examples. Page Editor Improved listing available components: overlayed components (with the same resource type) are listed just once, components with the same name but different types have additional information about type. Package Manager Fixed uninstalling packages. Resource Browser Fixed saving many resources positions changes at once. 1.18.0 Aug 2, 2023 Page and Asset Management Removed the information about the size for the selected folder(s) as it is unavailable. Added an ability to copy a JCR path(s) for selected pages and assets. Improved UX for filtering - an action execution doesn't clear user-defined criteria. Fixed visibility of the last row actions when a table has a lot of items. Fixed an issue with page creation when a user doesn't provide a unique name. Fixed the \"Cannot get actions\" warning when a user deleted or moved a page using the top bar actions. Fixed the return to template selection when creating a new page and providing its properties. Fixed the name generation for a new page when a user adjusted the name for a previous page. Improved updating of the last modification date for pages and assets. Page versioning Added confirmation message before restoring a page version. Added time to creation date presented in the versions table. Page Editor Added loading states for the workspace, when its content requires refreshing, starting inline editing for the Rich Text Editor , the publication status dropdown. Added workspace refresh after page properties updates. Fixed drag-and-drop of a component close to the left border of a container. Fixed disappearing \"Drag components here\" placeholder for containers included in many page sections. Admin tools Fixed UI issues in the package manager when a user selects advanced options during installation. Fixed text overlap issues in the resource browser when a user expands a property with a long value. Fixed the cursor landing at the end of the text when editing a property in the resource browser. Fixed paths presented in the swagger view. Dialogs Fixed the position of the date picker modal when it is the first input field in a dialog. 1.17.0 Jul 11, 2023 Page Versioning Added page versioning feature to the Page editor Added possibility to create page version manually Added functionality to create page version automatically on page publishing Added possibility to drop unpublished changes Spaces Added possibility to edit space properties Fixed issue related to breaking dashboard layout when description is too long Page and Asset Management Added loading states for topbar and table actions Fixed scalability for dashboards Fixed validation error message if folder or page already exists Fixed loading tree when editor closed by back button in the browser Page Management Fixed taking into account allowed children restrictions when copying and moving pages Page Editor Added blocking when action is in progress Groovy Console Fixed code snippets in the help panel Dialogs Added red highlight on the tab when contains validation error Removed support for default values 1.16.0 Jun 14, 2023 Page and Asset Management Fixed asset types presented on the list of assets. Improved the loading state for the list of pages. Improved refreshing of the list of pages after action execution. Page Editor Fixed additional corner cases for the issue with vh styles in the edit mode . Fixed an issue with shifted workspace when an author expands a dropdown in the side panel. 1.15.0 May 30, 2023 Page and Asset Management Fixed the publication status for new pages created as a copy. Removed the publication status for folders. Page Editor Added an ability to update the page properties directly in the editor. Improved the loading state for the side panel when a user selects a component for the first time. Dialogs Fixed the visibility of fields that depend on a default value of the select input field. Admin tools Fixed the issue with inserting an empty resource name while creating a new item. Fixed the issue for creating new items in the Resource Browser - the resource name can't be empty now. Fixed #158 - the issue with the resource path input. Other Changed the API and implementation of the publishing framework. Pushing the published content to the file system works as before but will be changed to a request-replay approach in the next release. 1.14.0 May 10, 2023 Page Editor Improved UX for inline editing. Authors can start the action using double-click (if configured as a default action for a given component). Added a skeleton screen for the workspace while it is loading. Dialogs Fixed #159 - saving a multifield by a modal and the side panel leads to conflicts. Admin tools Fixed the issue with providing a resource name while creating a new item. Other Updated Howlite components (RTE, Title, Quote, CTA) - removed the mandatoriness of fields having an initial content. 1.13.0 April 19, 2023 Page Editor New feature from the roadmap #1 - added inline editing for text input fields. Improved UX for keyboard shortcuts to copy and paste components - selection keeps the focus on the workspace (no autofocus on the first editable field in the right side panel). 1.12.0 March 29, 2023 Page Editor Added keyboard shortcuts to copy, cut and paste components. Components Added the ability to define items reloaded after a component is updated by the author . Dialogs Changed and extended Rich Text Editor configuration options . Other Fixed the blinking space icons and space types on load. Fixed the size of the clickable area for item selection on the list of pages and assets. 1.11.2 March 23, 2023 Page Editor Fixed the lack of refresh for the side panel with component properties after the user updated them in the modal. Dialogs Fixed modal closing with ESC button after changing a tab. 1.11.1 March 21, 2023 Page Editor Fixed blinking component selection and toolbar after changing component properties in the side panel. Improved selected component loading state after changing component properties in the side panel. Fixed the lack of component selection after changing component properties in the modal. Dialogs Fixed #63 and #149 - toggle , select , checkbox , radio , rich text editor , and text area work right in the multifield now. Additionally, the description for the input field included in the multifield is presented on hover. 1.11.0 March 15, 2023 Page Editor New feature from the roadmap #2 - added the side panel with component properties. Improved workspace refresh after edit action - only the updated component is reloaded now. Added #140 - the ability to set WCM mode in HTL. Improved UX for concurrent assets management - opening the list of assets from the assets panel in the page editor. 1.10.0 March 1, 2023 Page and Asset Management Fixed crash when a user uploads multiple assets at the same time. Fixed broken list of pages for a space when its first node in the resource browser contains an object other than pages, for example, policies. Fixed blinking space dropdown when a user removed a space, and not available anymore. Fixed #133 - page name generated from the tile is lowercase now. Improved #15 - clicking a page name opens the page editor now. Improved the expandable panel with the tree on the left - added icons for pages and folders. Improved the preview of assets containing white objects on a transparent background (changed preview background to grey). Admin tools Fixed page reordering in the resource browser. Fixed the broken order of pages after re-creating the content from JCR vault package in the Package Manager . Fixed the missing icon for the deny permission in the user manager. Dialogs Fixed an issue with closing the Button Dropdown for the Rich Text Editor . Other Fixed inconsistency of a new space name generated from the title. Fixed an issue with loading the manifest file by a browser. 1.9.1 February 15, 2023 Page Editor Improved the style for the page publication status dropdown. Page and Asset Management Fixed the lack of scroll when returning from the page editor. Admin tools Fixed the issue with renaming nodes in the resource browser. Fixed the issue with saving changes in the resource browser. Unified action buttons order for dialogs. Other Fixed the issue with entering Title and Name for a new space - changing the value moves the cursor to the end of the fields. 1.8.0 February 1, 2023 Page Editor Fixed the misaligned cursor and component during drag-and-drop (Chrome). Other Updated paddings for the lists of spaces, pages, and assets. Fixed the scroll for the list of pages and assets - always visible even when there was no need. Improved stability of front-end tests (Cypress). 1.7.0 January 18, 2023 Page Editor Added ability to refresh the workspace on component changes. Fixed the issues with misaligned overlays on component changes. Fixed the issues with vh styles in the edit mode . Fixed the issue with additional space generated at the end of the workspace after zoom-in and zoom-out. Page and Asset Management Fixed #25 - SVG files are displayed properly now. Dialogs Fixed the issue for the Date Picker input field - presented a wrong value. Fixed the issue on pressing enter - didn't close a modal in some cases. Admin Tools Fixed #12 - updated layout of the landing page for Admin Tools. Other Unified UX for the left side panel for all views. 1.6.0 December 21, 2022 Page Editor Improved collapsing and expanding of the left side panel. Fixed the lack of the scroll for page preview. Fixed the missing indicator when drag-and-drop of a component is not allowed. Admin Tools Fixed #13 - updated keyboard shortcut for script execution. Other Improved UX for the list of spaces. Improved UX for the modal to move/copy pages. 1.5.0 December 7, 2022 Page Editor Improved the placeholder text for empty containers to guide users on how to add components. Fixed issues with overlays for components. Fixed #33 - reduced panel size leads to cropped images thumbnails. Path picker input field: Fixed #19 - updated placeholder text to guide on how to choose a path. Added an arrow to expand the dropdown for selection. Fixed an issue with the rootPath property. 1.4.0 November 23, 2022 Page Editor Added ability to drag-and-drop a component between others included in a container. Added #22 - scrolling the page to a component when the user clicks it in the content tree. Improved UX for the component list. It contains only items allowed for a given page (based on its template). Fixed an issue with misaligned overlays when the user resized the window. Page and Asset Management Added actions in the breadcrumb for assets. Added Edit action in the breadcrumb for pages. Fixed an issue with page creation when the action was interrupted previously. Other Added loading indicator for the Create Space modal. 1.3.0 November 09, 2022 Page Editor Fixed an issue with component drag-and-drop - in some cases component can't be dropped on a selected container. Fixed an issue with the editor layout caused by a faulty component included on a page. Page and Asset Management Fixed #26 - asset preview dropdown is cut off and has no icons. Other Improved UX for the Create Space modal. Added keyboard shortcuts for all modals - submitting changes with Enter / Return and cancelation with Esc , X icon or clicking outside of the modal. 1.2.0 October 26, 2022 Page Editor Improved UX for components drag-and-drop - indicating if the drop is not allowed. Fixed the issue for the Asset Reference input field - impossible to remove image and save empty value. Page and Asset Management Improved messages for asset publication. Fixed the page and assets tree refresh when the current space switched. Admin Tools Fixed #14 and #16 - removed the artificial footer for Package Manager, User Manager, Groovy Console and Swagger Browser. 1.1.0 October 11, 2022 Page Editor Fixed the component dragging indicator. Page and Asset Management Improved assets publication. Publish and unpublish actions include assets in sub-folders. Fixed #24 : assets download has no effect. Fixed the hidden top bar with actions for pages and assets (when scrolling). Other Added HTL cache cleanup after deployment of bundles. 1.0.0 September 28, 2022 First public release of the WebSight CMS Community Edition. See our blog post","title":"WebSight CMS release notes"},{"location":"cms/release-notes/#websight-cms-release-notes","text":"","title":"WebSight CMS release notes"},{"location":"cms/release-notes/#1220-nov-6-2023","text":"Page Management Fixed the extra loading state display. Fixed jumping resource selector in the content tree. Page Editor Added multiple viewport support. Improved hierarchy levels representation in the content tree. Improved drag-and-drop reordering components in the content tree. Fixed #139 possibility of dropping component into ancestors of an empty containers. Fixed element selectors alignment.","title":"1.22.0 Nov 6, 2023"},{"location":"cms/release-notes/#1212-oct-13-2023","text":"Page Editor Fixed component drag-and-drop performance issues.","title":"1.21.2 Oct 13, 2023"},{"location":"cms/release-notes/#1211-oct-10-2023","text":"Page Editor Fixed page scrolling to the top after any update.","title":"1.21.1 Oct 10, 2023"},{"location":"cms/release-notes/#1210-oct-4-2023","text":"Page and Asset Management Fixed the invisible last-row actions when the table has many items. Fixed flickering loading state in the page and assets trees. Page Editor Added direct component reordering in the content tree. Improved drag-and-drop for containers. Improved switching between edit and preview modes - page position in the workspace remains the same now. Fixed the unexpected error notification after changing page properties in the preview mode. Fixed the outdated publication status after inline editing. Admin tools Added advanced options for package installation during upload. Other Fixed broken link to the terms of use on the login page. Removed browser-based field validation messages as they duplicate the ones from CMS.","title":"1.21.0 Oct 4, 2023"},{"location":"cms/release-notes/#1201-sep-21-2023","text":"Page and Asset Management Fixed #179 - the broken preview of a selected asset. Fixed the lack of an icon for the page action view as published . Page Editor Improved UX for version management - added a dedicated icon on the top bar.","title":"1.20.1 Sep 21, 2023"},{"location":"cms/release-notes/#1200-sep-13-2023","text":"Page and Asset Management Added an action to view a page as published before its publication. Improved the move action - added a step to rename a page, an asset, or a folder as a part of the action. Added loading states for the page tree and the asset tree. Added drag-and-drop support for asset upload. Improved UX for uploading the same assets again - simplified dialog options. Page Editor Added an ability to view a page as published before its publication #98 . Fixed the right-side panel refresh after a user clears a property in a dialog. Fixed missing trailing new lines in the rich text editor input field in the right side panel. Admin tools Fixed the ability to re-upload a package in the package manager when the override option is not selected. Fixed the download link for binary JCR properties in the resource browser.","title":"1.20.0 Sep 13, 2023"},{"location":"cms/release-notes/#1190-aug-23-2023","text":"Page and Asset Management Added skeleton for the general tab. Added clearing the section in the dashboard table by escape button. Page Management Added the possibility to see \"ghost\" pages. Added the possibility to unpublish \"ghost\" pages. Groovy Console Fixed help content: presenting content with code examples. Page Editor Improved listing available components: overlayed components (with the same resource type) are listed just once, components with the same name but different types have additional information about type. Package Manager Fixed uninstalling packages. Resource Browser Fixed saving many resources positions changes at once.","title":"1.19.0 Aug 23, 2023"},{"location":"cms/release-notes/#1180-aug-2-2023","text":"Page and Asset Management Removed the information about the size for the selected folder(s) as it is unavailable. Added an ability to copy a JCR path(s) for selected pages and assets. Improved UX for filtering - an action execution doesn't clear user-defined criteria. Fixed visibility of the last row actions when a table has a lot of items. Fixed an issue with page creation when a user doesn't provide a unique name. Fixed the \"Cannot get actions\" warning when a user deleted or moved a page using the top bar actions. Fixed the return to template selection when creating a new page and providing its properties. Fixed the name generation for a new page when a user adjusted the name for a previous page. Improved updating of the last modification date for pages and assets. Page versioning Added confirmation message before restoring a page version. Added time to creation date presented in the versions table. Page Editor Added loading states for the workspace, when its content requires refreshing, starting inline editing for the Rich Text Editor , the publication status dropdown. Added workspace refresh after page properties updates. Fixed drag-and-drop of a component close to the left border of a container. Fixed disappearing \"Drag components here\" placeholder for containers included in many page sections. Admin tools Fixed UI issues in the package manager when a user selects advanced options during installation. Fixed text overlap issues in the resource browser when a user expands a property with a long value. Fixed the cursor landing at the end of the text when editing a property in the resource browser. Fixed paths presented in the swagger view. Dialogs Fixed the position of the date picker modal when it is the first input field in a dialog.","title":"1.18.0 Aug 2, 2023"},{"location":"cms/release-notes/#1170-jul-11-2023","text":"Page Versioning Added page versioning feature to the Page editor Added possibility to create page version manually Added functionality to create page version automatically on page publishing Added possibility to drop unpublished changes Spaces Added possibility to edit space properties Fixed issue related to breaking dashboard layout when description is too long Page and Asset Management Added loading states for topbar and table actions Fixed scalability for dashboards Fixed validation error message if folder or page already exists Fixed loading tree when editor closed by back button in the browser Page Management Fixed taking into account allowed children restrictions when copying and moving pages Page Editor Added blocking when action is in progress Groovy Console Fixed code snippets in the help panel Dialogs Added red highlight on the tab when contains validation error Removed support for default values","title":"1.17.0 Jul 11, 2023"},{"location":"cms/release-notes/#1160-jun-14-2023","text":"Page and Asset Management Fixed asset types presented on the list of assets. Improved the loading state for the list of pages. Improved refreshing of the list of pages after action execution. Page Editor Fixed additional corner cases for the issue with vh styles in the edit mode . Fixed an issue with shifted workspace when an author expands a dropdown in the side panel.","title":"1.16.0 Jun 14, 2023"},{"location":"cms/release-notes/#1150-may-30-2023","text":"Page and Asset Management Fixed the publication status for new pages created as a copy. Removed the publication status for folders. Page Editor Added an ability to update the page properties directly in the editor. Improved the loading state for the side panel when a user selects a component for the first time. Dialogs Fixed the visibility of fields that depend on a default value of the select input field. Admin tools Fixed the issue with inserting an empty resource name while creating a new item. Fixed the issue for creating new items in the Resource Browser - the resource name can't be empty now. Fixed #158 - the issue with the resource path input. Other Changed the API and implementation of the publishing framework. Pushing the published content to the file system works as before but will be changed to a request-replay approach in the next release.","title":"1.15.0 May 30, 2023"},{"location":"cms/release-notes/#1140-may-10-2023","text":"Page Editor Improved UX for inline editing. Authors can start the action using double-click (if configured as a default action for a given component). Added a skeleton screen for the workspace while it is loading. Dialogs Fixed #159 - saving a multifield by a modal and the side panel leads to conflicts. Admin tools Fixed the issue with providing a resource name while creating a new item. Other Updated Howlite components (RTE, Title, Quote, CTA) - removed the mandatoriness of fields having an initial content.","title":"1.14.0 May 10, 2023"},{"location":"cms/release-notes/#1130-april-19-2023","text":"Page Editor New feature from the roadmap #1 - added inline editing for text input fields. Improved UX for keyboard shortcuts to copy and paste components - selection keeps the focus on the workspace (no autofocus on the first editable field in the right side panel).","title":"1.13.0 April 19, 2023"},{"location":"cms/release-notes/#1120-march-29-2023","text":"Page Editor Added keyboard shortcuts to copy, cut and paste components. Components Added the ability to define items reloaded after a component is updated by the author . Dialogs Changed and extended Rich Text Editor configuration options . Other Fixed the blinking space icons and space types on load. Fixed the size of the clickable area for item selection on the list of pages and assets.","title":"1.12.0 March 29, 2023"},{"location":"cms/release-notes/#1112-march-23-2023","text":"Page Editor Fixed the lack of refresh for the side panel with component properties after the user updated them in the modal. Dialogs Fixed modal closing with ESC button after changing a tab.","title":"1.11.2 March 23, 2023"},{"location":"cms/release-notes/#1111-march-21-2023","text":"Page Editor Fixed blinking component selection and toolbar after changing component properties in the side panel. Improved selected component loading state after changing component properties in the side panel. Fixed the lack of component selection after changing component properties in the modal. Dialogs Fixed #63 and #149 - toggle , select , checkbox , radio , rich text editor , and text area work right in the multifield now. Additionally, the description for the input field included in the multifield is presented on hover.","title":"1.11.1 March 21, 2023"},{"location":"cms/release-notes/#1110-march-15-2023","text":"Page Editor New feature from the roadmap #2 - added the side panel with component properties. Improved workspace refresh after edit action - only the updated component is reloaded now. Added #140 - the ability to set WCM mode in HTL. Improved UX for concurrent assets management - opening the list of assets from the assets panel in the page editor.","title":"1.11.0 March 15, 2023"},{"location":"cms/release-notes/#1100-march-1-2023","text":"Page and Asset Management Fixed crash when a user uploads multiple assets at the same time. Fixed broken list of pages for a space when its first node in the resource browser contains an object other than pages, for example, policies. Fixed blinking space dropdown when a user removed a space, and not available anymore. Fixed #133 - page name generated from the tile is lowercase now. Improved #15 - clicking a page name opens the page editor now. Improved the expandable panel with the tree on the left - added icons for pages and folders. Improved the preview of assets containing white objects on a transparent background (changed preview background to grey). Admin tools Fixed page reordering in the resource browser. Fixed the broken order of pages after re-creating the content from JCR vault package in the Package Manager . Fixed the missing icon for the deny permission in the user manager. Dialogs Fixed an issue with closing the Button Dropdown for the Rich Text Editor . Other Fixed inconsistency of a new space name generated from the title. Fixed an issue with loading the manifest file by a browser.","title":"1.10.0 March 1, 2023"},{"location":"cms/release-notes/#191-february-15-2023","text":"Page Editor Improved the style for the page publication status dropdown. Page and Asset Management Fixed the lack of scroll when returning from the page editor. Admin tools Fixed the issue with renaming nodes in the resource browser. Fixed the issue with saving changes in the resource browser. Unified action buttons order for dialogs. Other Fixed the issue with entering Title and Name for a new space - changing the value moves the cursor to the end of the fields.","title":"1.9.1 February 15, 2023"},{"location":"cms/release-notes/#180-february-1-2023","text":"Page Editor Fixed the misaligned cursor and component during drag-and-drop (Chrome). Other Updated paddings for the lists of spaces, pages, and assets. Fixed the scroll for the list of pages and assets - always visible even when there was no need. Improved stability of front-end tests (Cypress).","title":"1.8.0 February 1, 2023"},{"location":"cms/release-notes/#170-january-18-2023","text":"Page Editor Added ability to refresh the workspace on component changes. Fixed the issues with misaligned overlays on component changes. Fixed the issues with vh styles in the edit mode . Fixed the issue with additional space generated at the end of the workspace after zoom-in and zoom-out. Page and Asset Management Fixed #25 - SVG files are displayed properly now. Dialogs Fixed the issue for the Date Picker input field - presented a wrong value. Fixed the issue on pressing enter - didn't close a modal in some cases. Admin Tools Fixed #12 - updated layout of the landing page for Admin Tools. Other Unified UX for the left side panel for all views.","title":"1.7.0 January 18, 2023"},{"location":"cms/release-notes/#160-december-21-2022","text":"Page Editor Improved collapsing and expanding of the left side panel. Fixed the lack of the scroll for page preview. Fixed the missing indicator when drag-and-drop of a component is not allowed. Admin Tools Fixed #13 - updated keyboard shortcut for script execution. Other Improved UX for the list of spaces. Improved UX for the modal to move/copy pages.","title":"1.6.0 December 21, 2022"},{"location":"cms/release-notes/#150-december-7-2022","text":"Page Editor Improved the placeholder text for empty containers to guide users on how to add components. Fixed issues with overlays for components. Fixed #33 - reduced panel size leads to cropped images thumbnails. Path picker input field: Fixed #19 - updated placeholder text to guide on how to choose a path. Added an arrow to expand the dropdown for selection. Fixed an issue with the rootPath property.","title":"1.5.0 December 7, 2022"},{"location":"cms/release-notes/#140-november-23-2022","text":"Page Editor Added ability to drag-and-drop a component between others included in a container. Added #22 - scrolling the page to a component when the user clicks it in the content tree. Improved UX for the component list. It contains only items allowed for a given page (based on its template). Fixed an issue with misaligned overlays when the user resized the window. Page and Asset Management Added actions in the breadcrumb for assets. Added Edit action in the breadcrumb for pages. Fixed an issue with page creation when the action was interrupted previously. Other Added loading indicator for the Create Space modal.","title":"1.4.0 November 23, 2022"},{"location":"cms/release-notes/#130-november-09-2022","text":"Page Editor Fixed an issue with component drag-and-drop - in some cases component can't be dropped on a selected container. Fixed an issue with the editor layout caused by a faulty component included on a page. Page and Asset Management Fixed #26 - asset preview dropdown is cut off and has no icons. Other Improved UX for the Create Space modal. Added keyboard shortcuts for all modals - submitting changes with Enter / Return and cancelation with Esc , X icon or clicking outside of the modal.","title":"1.3.0 November 09, 2022"},{"location":"cms/release-notes/#120-october-26-2022","text":"Page Editor Improved UX for components drag-and-drop - indicating if the drop is not allowed. Fixed the issue for the Asset Reference input field - impossible to remove image and save empty value. Page and Asset Management Improved messages for asset publication. Fixed the page and assets tree refresh when the current space switched. Admin Tools Fixed #14 and #16 - removed the artificial footer for Package Manager, User Manager, Groovy Console and Swagger Browser.","title":"1.2.0 October 26, 2022"},{"location":"cms/release-notes/#110-october-11-2022","text":"Page Editor Fixed the component dragging indicator. Page and Asset Management Improved assets publication. Publish and unpublish actions include assets in sub-folders. Fixed #24 : assets download has no effect. Fixed the hidden top bar with actions for pages and assets (when scrolling). Other Added HTL cache cleanup after deployment of bundles.","title":"1.1.0 October 11, 2022"},{"location":"cms/release-notes/#100-september-28-2022","text":"First public release of the WebSight CMS Community Edition. See our blog post","title":"1.0.0 September 28, 2022"},{"location":"product/cla/corporate/v1/","text":"Dynamic Solutions Software Grant and Corporate Contributor License Agreement In order to clarify the intellectual property license granted with Contributions from any person or entity, Dynamic Solutions sp. z o.o. sp. k. (\"Dynamic Solutions\") must have a Contributor License Agreement (CLA) on file that has been signed by each Contributor, indicating agreement to the license terms below. This license is for your protection as a Contributor as well as the protection of Dynamic Solutions and its users; it does not change your rights to use your own Contributions for any other purpose. This version of the Agreement allows an entity (the \"Corporation\") to submit Contributions to Dynamic Solutions, to authorize Contributions submitted by its designated employees to Dynamic Solutions, and to grant copyright and patent licenses thereto. You accept and agree to the following terms and conditions for Your present and future Contributions submitted to Dynamic Solutions. Except for the license granted herein to Dynamic Solutions and recipients of software distributed by Dynamic Solutions, You reserve all right, title, and interest in and to Your Contributions. Definitions. \"You\" (or \"Your\") shall mean the copyright owner or legal entity authorized by the copyright owner that is making this Agreement with Dynamic Solutions. For legal entities, the entity making a Contribution and all other entities that control, are controlled by, or are under common control with that entity are considered to be a single Contributor. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"Contribution\" shall mean the code, documentation or any original work of authorship, including any modifications or additions to an existing work, that is intentionally submitted by You to Dynamic Solutions for inclusion in, or documentation of, any of the products owned or managed by Dynamic Solutions (the \"Work\"). For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to Dynamic Solutions or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Dynamic Solutions for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by You as \"Not a Contribution.\" Grant of Copyright License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute Your Contributions and such derivative works. Grant of Patent License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by You that are necessarily infringed by Your Contribution(s) alone or by combination of Your Contribution(s) with the Work to which such Contribution(s) was submitted. If any entity institutes patent litigation against You or any other entity (including a cross-claim or counterclaim in a lawsuit) alleging that your Contribution, or the Work to which you have contributed, constitutes direct or contributory patent infringement, then any patent licenses granted to that entity under this Agreement for that Contribution or Work shall terminate as of the date such litigation is filed. You represent that You are legally entitled to grant the above license. You represent further that each employee of the Corporation designated by You is authorized to submit Contributions on behalf of the Corporation. You represent that each of Your Contributions is Your original creation (see section 7 for submissions on behalf of others). You are not expected to provide support for Your Contributions, except to the extent You desire to provide support. You may provide support for free, for a fee, or not at all. Unless required by applicable law or agreed to in writing, You provide Your Contributions on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. Should You wish to submit work that is not Your original creation, You may submit it to Dynamic Solutions separately from any Contribution, identifying the complete details of its source and of any license or other restriction (including, but not limited to, related patents, trademarks, and license agreements) of which you are personally aware, and conspicuously marking the work as \"Submitted on behalf of a third-party: [named here]\". It is your responsibility to notify Dynamic Solutions when any change is required to the list of designated employees authorized to submit Contributions on behalf of the Corporation, or to the Corporation's Point of Contact with Dynamic Solutions.","title":"Dynamic Solutions Software Grant and Corporate Contributor License Agreement"},{"location":"product/cla/corporate/v1/#dynamic-solutions-software-grant-and-corporate-contributor-license-agreement","text":"In order to clarify the intellectual property license granted with Contributions from any person or entity, Dynamic Solutions sp. z o.o. sp. k. (\"Dynamic Solutions\") must have a Contributor License Agreement (CLA) on file that has been signed by each Contributor, indicating agreement to the license terms below. This license is for your protection as a Contributor as well as the protection of Dynamic Solutions and its users; it does not change your rights to use your own Contributions for any other purpose. This version of the Agreement allows an entity (the \"Corporation\") to submit Contributions to Dynamic Solutions, to authorize Contributions submitted by its designated employees to Dynamic Solutions, and to grant copyright and patent licenses thereto. You accept and agree to the following terms and conditions for Your present and future Contributions submitted to Dynamic Solutions. Except for the license granted herein to Dynamic Solutions and recipients of software distributed by Dynamic Solutions, You reserve all right, title, and interest in and to Your Contributions. Definitions. \"You\" (or \"Your\") shall mean the copyright owner or legal entity authorized by the copyright owner that is making this Agreement with Dynamic Solutions. For legal entities, the entity making a Contribution and all other entities that control, are controlled by, or are under common control with that entity are considered to be a single Contributor. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"Contribution\" shall mean the code, documentation or any original work of authorship, including any modifications or additions to an existing work, that is intentionally submitted by You to Dynamic Solutions for inclusion in, or documentation of, any of the products owned or managed by Dynamic Solutions (the \"Work\"). For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to Dynamic Solutions or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Dynamic Solutions for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by You as \"Not a Contribution.\" Grant of Copyright License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute Your Contributions and such derivative works. Grant of Patent License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by You that are necessarily infringed by Your Contribution(s) alone or by combination of Your Contribution(s) with the Work to which such Contribution(s) was submitted. If any entity institutes patent litigation against You or any other entity (including a cross-claim or counterclaim in a lawsuit) alleging that your Contribution, or the Work to which you have contributed, constitutes direct or contributory patent infringement, then any patent licenses granted to that entity under this Agreement for that Contribution or Work shall terminate as of the date such litigation is filed. You represent that You are legally entitled to grant the above license. You represent further that each employee of the Corporation designated by You is authorized to submit Contributions on behalf of the Corporation. You represent that each of Your Contributions is Your original creation (see section 7 for submissions on behalf of others). You are not expected to provide support for Your Contributions, except to the extent You desire to provide support. You may provide support for free, for a fee, or not at all. Unless required by applicable law or agreed to in writing, You provide Your Contributions on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. Should You wish to submit work that is not Your original creation, You may submit it to Dynamic Solutions separately from any Contribution, identifying the complete details of its source and of any license or other restriction (including, but not limited to, related patents, trademarks, and license agreements) of which you are personally aware, and conspicuously marking the work as \"Submitted on behalf of a third-party: [named here]\". It is your responsibility to notify Dynamic Solutions when any change is required to the list of designated employees authorized to submit Contributions on behalf of the Corporation, or to the Corporation's Point of Contact with Dynamic Solutions.","title":"Dynamic Solutions Software Grant and Corporate Contributor License Agreement"},{"location":"product/cla/individual/v1/","text":"Dynamic Solutions Individual Contributor License Agreement In order to clarify the intellectual property license granted with Contributions from any person or entity, Dynamic Solutions sp. z o.o. sp. k. (\"Dynamic Solutions\") must have a Contributor License Agreement (\"CLA\") on file that has been signed by each Contributor, indicating agreement to the license terms below. This license is for your protection as a Contributor as well as the protection of Dynamic Solutions; it does not change your rights to use your own Contributions for any other purpose. You accept and agree to the following terms and conditions for Your present and future Contributions submitted to Dynamic Solutions. Except for the license granted herein to Dynamic Solutions and recipients of software distributed by Dynamic Solutions, You reserve all right, title, and interest in and to Your Contributions. Definitions. \"You\" (or \"Your\") shall mean the copyright owner or legal entity authorized by the copyright owner that is making this Agreement with Dynamic Solutions. For legal entities, the entity making a Contribution and all other entities that control, are controlled by, or are under common control with that entity are considered to be a single Contributor. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"Contribution\" shall mean any original work of authorship, including any modifications or additions to an existing work, that is intentionally submitted by You to Dynamic Solutions for inclusion in, or documentation of, any of the products owned or managed by Dynamic Solutions (the \"Work\"). For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to Dynamic Solutions or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Dynamic Solutions for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by You as \"Not a Contribution.\" Grant of Copyright License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute Your Contributions and such derivative works. Grant of Patent License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by You that are necessarily infringed by Your Contribution(s) alone or by combination of Your Contribution(s) with the Work to which such Contribution(s) was submitted. If any entity institutes patent litigation against You or any other entity (including a cross-claim or counterclaim in a lawsuit) alleging that your Contribution, or the Work to which you have contributed, constitutes direct or contributory patent infringement, then any patent licenses granted to that entity under this Agreement for that Contribution or Work shall terminate as of the date such litigation is filed. You represent that you are legally entitled to grant the above license. If your employer(s) has rights to intellectual property that you create that includes your Contributions, you represent that you have received permission to make Contributions on behalf of that employer, that your employer has waived such rights for your Contributions to Dynamic Solutions, or that your employer has executed a separate Corporate CLA with Dynamic Solutions. You represent that each of Your Contributions is Your original creation (see section 7 for submissions on behalf of others). You represent that Your Contribution submissions include complete details of any third-party license or other restriction (including, but not limited to, related patents and trademarks) of which you are personally aware and which are associated with any part of Your Contributions. You are not expected to provide support for Your Contributions, except to the extent You desire to provide support. You may provide support for free, for a fee, or not at all. Unless required by applicable law or agreed to in writing, You provide Your Contributions on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON- INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. Should You wish to submit work that is not Your original creation, You may submit it to Dynamic Solutions separately from any Contribution, identifying the complete details of its source and of any license or other restriction (including, but not limited to, related patents, trademarks, and license agreements) of which you are personally aware, and conspicuously marking the work as \"Submitted on behalf of a third-party: [named here]\". You agree to notify Dynamic Solutions of any facts or circumstances of which you become aware that would make these representations inaccurate in any respect.","title":"Dynamic Solutions Individual Contributor License Agreement"},{"location":"product/cla/individual/v1/#dynamic-solutions-individual-contributor-license-agreement","text":"In order to clarify the intellectual property license granted with Contributions from any person or entity, Dynamic Solutions sp. z o.o. sp. k. (\"Dynamic Solutions\") must have a Contributor License Agreement (\"CLA\") on file that has been signed by each Contributor, indicating agreement to the license terms below. This license is for your protection as a Contributor as well as the protection of Dynamic Solutions; it does not change your rights to use your own Contributions for any other purpose. You accept and agree to the following terms and conditions for Your present and future Contributions submitted to Dynamic Solutions. Except for the license granted herein to Dynamic Solutions and recipients of software distributed by Dynamic Solutions, You reserve all right, title, and interest in and to Your Contributions. Definitions. \"You\" (or \"Your\") shall mean the copyright owner or legal entity authorized by the copyright owner that is making this Agreement with Dynamic Solutions. For legal entities, the entity making a Contribution and all other entities that control, are controlled by, or are under common control with that entity are considered to be a single Contributor. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"Contribution\" shall mean any original work of authorship, including any modifications or additions to an existing work, that is intentionally submitted by You to Dynamic Solutions for inclusion in, or documentation of, any of the products owned or managed by Dynamic Solutions (the \"Work\"). For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to Dynamic Solutions or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Dynamic Solutions for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by You as \"Not a Contribution.\" Grant of Copyright License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute Your Contributions and such derivative works. Grant of Patent License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by You that are necessarily infringed by Your Contribution(s) alone or by combination of Your Contribution(s) with the Work to which such Contribution(s) was submitted. If any entity institutes patent litigation against You or any other entity (including a cross-claim or counterclaim in a lawsuit) alleging that your Contribution, or the Work to which you have contributed, constitutes direct or contributory patent infringement, then any patent licenses granted to that entity under this Agreement for that Contribution or Work shall terminate as of the date such litigation is filed. You represent that you are legally entitled to grant the above license. If your employer(s) has rights to intellectual property that you create that includes your Contributions, you represent that you have received permission to make Contributions on behalf of that employer, that your employer has waived such rights for your Contributions to Dynamic Solutions, or that your employer has executed a separate Corporate CLA with Dynamic Solutions. You represent that each of Your Contributions is Your original creation (see section 7 for submissions on behalf of others). You represent that Your Contribution submissions include complete details of any third-party license or other restriction (including, but not limited to, related patents and trademarks) of which you are personally aware and which are associated with any part of Your Contributions. You are not expected to provide support for Your Contributions, except to the extent You desire to provide support. You may provide support for free, for a fee, or not at all. Unless required by applicable law or agreed to in writing, You provide Your Contributions on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON- INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. Should You wish to submit work that is not Your original creation, You may submit it to Dynamic Solutions separately from any Contribution, identifying the complete details of its source and of any license or other restriction (including, but not limited to, related patents, trademarks, and license agreements) of which you are personally aware, and conspicuously marking the work as \"Submitted on behalf of a third-party: [named here]\". You agree to notify Dynamic Solutions of any facts or circumstances of which you become aware that would make these representations inaccurate in any respect.","title":"Dynamic Solutions Individual Contributor License Agreement"},{"location":"terms-of-use/","text":"Terms of Use Service Agreement Subject to your complying with the terms hereof, Dynamic Solutions hereby grants you a limited, non-exclusive, non-transferable, non-sublicensable license during the applicable Subscription Term to download, install and use the Service for personal, educational, and commercial purposes. If any part of the Service contains or utilizes Open Source Software then such Open Source Software is distributed or made available under the terms of the open source license agreements referenced in the applicable distribution or the applicable help, notices, about or source files. Copyrights and other proprietary rights to the Open Source Software are held by the copyright holders identified in the applicable distribution or the applicable help, notices, about or source files. BY INSTALLING, DOWNLOADING, OR OTHERWISE ACCESSING THE SERVICE YOU EXPRESSLY ACCEPT AND AGREE TO THE TERMS OF THIS AGREEMENT. IF YOU ARE AN INDIVIDUAL AGREEING TO THE TERMS OF THIS AGREEMENT ON BEHALF OF AN ENTITY, SUCH AS YOUR EMPLOYER, YOU REPRESENT THAT YOU HAVE THE LEGAL AUTHORITY TO BIND THAT ENTITY. IF YOU DO NOT HAVE SUCH AUTHORITY, OR IF YOU DO NOT AGREE WITH THE TERMS OF THIS AGREEMENT, YOU MAY NOT USE THE SERVICE EITHER YOURSELF OR ON BEHALF OF THE ENTITY. THE LICENSED WORK IS PROVIDED ON AN \u201cAS IS\u201d BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND TITLE Licenses Copyright (c) 2019-present Dynamic Solutions sp. z o.o. sp. k. ( Dynamic Solutions ) Portions of the WebSight software are licensed as follows: All projects hosted on WebSight-io GitHub are licensed under the license defined in LICENSE file in the project root directory. If the file does not exist, the fallback license is Apache-2.0 Closed source projects hosted on internal Dynamic Solutions repositories are licensed under Dynamic Solutions License Modules which are not developed by Dynamic Solutions are a part of the Apache Sling Project , therefore are licensed under Apache-2.0 compatible licenses. Note Dynamic Solutions is in the process of adopting Business Source License (BSL 1.1) for the remaining internal modules. Our goal is to standarize licensing model with full access to the project source code. To get a commercial offering/support use Contact Us form","title":"Terms of Use"},{"location":"terms-of-use/#terms-of-use","text":"","title":"Terms of Use"},{"location":"terms-of-use/#service-agreement","text":"Subject to your complying with the terms hereof, Dynamic Solutions hereby grants you a limited, non-exclusive, non-transferable, non-sublicensable license during the applicable Subscription Term to download, install and use the Service for personal, educational, and commercial purposes. If any part of the Service contains or utilizes Open Source Software then such Open Source Software is distributed or made available under the terms of the open source license agreements referenced in the applicable distribution or the applicable help, notices, about or source files. Copyrights and other proprietary rights to the Open Source Software are held by the copyright holders identified in the applicable distribution or the applicable help, notices, about or source files. BY INSTALLING, DOWNLOADING, OR OTHERWISE ACCESSING THE SERVICE YOU EXPRESSLY ACCEPT AND AGREE TO THE TERMS OF THIS AGREEMENT. IF YOU ARE AN INDIVIDUAL AGREEING TO THE TERMS OF THIS AGREEMENT ON BEHALF OF AN ENTITY, SUCH AS YOUR EMPLOYER, YOU REPRESENT THAT YOU HAVE THE LEGAL AUTHORITY TO BIND THAT ENTITY. IF YOU DO NOT HAVE SUCH AUTHORITY, OR IF YOU DO NOT AGREE WITH THE TERMS OF THIS AGREEMENT, YOU MAY NOT USE THE SERVICE EITHER YOURSELF OR ON BEHALF OF THE ENTITY. THE LICENSED WORK IS PROVIDED ON AN \u201cAS IS\u201d BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND TITLE","title":"Service Agreement"},{"location":"terms-of-use/#licenses","text":"Copyright (c) 2019-present Dynamic Solutions sp. z o.o. sp. k. ( Dynamic Solutions ) Portions of the WebSight software are licensed as follows: All projects hosted on WebSight-io GitHub are licensed under the license defined in LICENSE file in the project root directory. If the file does not exist, the fallback license is Apache-2.0 Closed source projects hosted on internal Dynamic Solutions repositories are licensed under Dynamic Solutions License Modules which are not developed by Dynamic Solutions are a part of the Apache Sling Project , therefore are licensed under Apache-2.0 compatible licenses.","title":"Licenses"},{"location":"terms-of-use/#note","text":"Dynamic Solutions is in the process of adopting Business Source License (BSL 1.1) for the remaining internal modules. Our goal is to standarize licensing model with full access to the project source code. To get a commercial offering/support use Contact Us form","title":"Note"}]}