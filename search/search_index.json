{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"blog/","text":"WebSight Blog Insights, work approaches, ideas related to enterprise-grade CMS. We got it all. {{ blog_content }}","title":"WebSight Blog"},{"location":"blog/#websight-blog","text":"Insights, work approaches, ideas related to enterprise-grade CMS. We got it all. {{ blog_content }}","title":"WebSight Blog"},{"location":"blog/2022/achieving-quality-with-no-dedicated-qa-engineers/","tags":["WebSight","QA","Cypress"],"text":"Published at: 23.08.2022 by Radek Lawgmin Making sure that a product conforms to its specification is always a challenge. Defining quality, agreeing on KPIs and planning subsequent steps is a thing. So is having an efficient QA process that helps to achieve it (not block the team from reaching their goals nor demotivate them). It is even more demanding to make the whole development team really care about the quality and make each member feel responsible for it when we move from quality assurance to quality assistance and want to share some of typical QA duties between each team member. So is it possible to have the whole team (not a single quality hero) that ensures the manufactured product meets requirements and keeps guard over quality standards? How and when we do it in our project? How we care about the quality We want to create a new and cutting-edge product. That\u2019s something we strongly believe in but apart from the final effect that, we hope, will positively struck our clients, it is also a kind of innovative approach to our every day work. How we do this? Once we agreed on the main purpose of the product (what it should do and how) we also started our discussion about what the quality means to us and how we are going to make sure that we build a high quality product. Next step was to start creating a QA plan and QA process that would evolve and adapt in time but would also help us to take care about quality from the very beginning. Putting there main ideas like the definition of the quality, and what we should do and how we should work to be able to say that our product meets quality requirements was our main objective here but apart from it we also needed to think how to engage everyone from the team in the process to let this really happen. Working on definition at the same time having quality in the back of our mind was the first step to do at this stage but we wanted to do more. Apart from delivering units and integration, code-reviews and cross-testing (which we actually try to facilitate by experimenting with extreme programming techniques like pair-programming and making the whole process continuous), we decided to create a suite of automated functional checks with Cypress.io that we could make use of to regression test our product at various stages. So we have started with applying it to check each PR. Thanks to the architecture approach that we have adopted, we work with small, separate limited liability modules, which allows for thorough tests in isolation - in other words, a single PR can be deployed to a dedicated environment where it can be tested first. As a result we don't need to run full regression tests against everything we release each time, which in turn accelerates our software development lifecycle. What is more, we can use automated functional checks when launching a new environment and/or as a nightly regression suite against the latest version of the application. Well, it is still worth mentioning that it is a part of our pipeline to automatically, efficiently and reliably build and deploy code. Here what we mean by saying \u2018reliably\u2019 is that whenever a given release causes any failures it is rejected until any discovered issue has been analyzed and resolved. So we not only think about the future and do our best to plan quality around it but we are also reactive and address issues we come across in our everyday work. This suite of automated checks is also a part of the code we are going to share with our clients and community allowing them to quickly check if their deployments were successful and/or the product still works once they expanded it by adding new features or components. When we start to care about quality Let\u2019s get back to our definition for a while. That is the moment we, apart from focusing on strictly business requirements, plan other activities, including automated checks. Referring to our still evolving DoR (Definition of Ready) and DoD (Definition of Done) where we have added automated functional checks as a part of requirements we hold each team member working on a given feature responsible for creating automated checks that will allow us to regression test this feature later on, according to our processes. As a result we do not need a dedicated role of a quality assurance engineer nor automation engineer that would be responsible for creating and maintaining automated checks. We invest some effort at the beginning but it always pays back, as having automated checks automatically running as a part of the CI process allows us to ultimately save much time needed to re-check feature by feature later. Summary Quality assurance should be a high priority when we think of building a successful product. Building an effective process around it helps much when it starts from the very beginning and lasts until its end. However, delivering quality is a healthy procedure only when there is the whole development team engaged in it, not a single role. And of course, it is always more effective when an implemented, tested and deployed feature can be checked automatically within a few seconds as a part of the CI process instead of struggling to find a person and time for reproducing repeatable regression test cases again and again.","title":"Achieving quality with no dedicated QA Engineers"},{"location":"blog/2022/achieving-quality-with-no-dedicated-qa-engineers/#how-we-care-about-the-quality","text":"We want to create a new and cutting-edge product. That\u2019s something we strongly believe in but apart from the final effect that, we hope, will positively struck our clients, it is also a kind of innovative approach to our every day work. How we do this? Once we agreed on the main purpose of the product (what it should do and how) we also started our discussion about what the quality means to us and how we are going to make sure that we build a high quality product. Next step was to start creating a QA plan and QA process that would evolve and adapt in time but would also help us to take care about quality from the very beginning. Putting there main ideas like the definition of the quality, and what we should do and how we should work to be able to say that our product meets quality requirements was our main objective here but apart from it we also needed to think how to engage everyone from the team in the process to let this really happen. Working on definition at the same time having quality in the back of our mind was the first step to do at this stage but we wanted to do more. Apart from delivering units and integration, code-reviews and cross-testing (which we actually try to facilitate by experimenting with extreme programming techniques like pair-programming and making the whole process continuous), we decided to create a suite of automated functional checks with Cypress.io that we could make use of to regression test our product at various stages. So we have started with applying it to check each PR. Thanks to the architecture approach that we have adopted, we work with small, separate limited liability modules, which allows for thorough tests in isolation - in other words, a single PR can be deployed to a dedicated environment where it can be tested first. As a result we don't need to run full regression tests against everything we release each time, which in turn accelerates our software development lifecycle. What is more, we can use automated functional checks when launching a new environment and/or as a nightly regression suite against the latest version of the application. Well, it is still worth mentioning that it is a part of our pipeline to automatically, efficiently and reliably build and deploy code. Here what we mean by saying \u2018reliably\u2019 is that whenever a given release causes any failures it is rejected until any discovered issue has been analyzed and resolved. So we not only think about the future and do our best to plan quality around it but we are also reactive and address issues we come across in our everyday work. This suite of automated checks is also a part of the code we are going to share with our clients and community allowing them to quickly check if their deployments were successful and/or the product still works once they expanded it by adding new features or components.","title":"How we care about the quality"},{"location":"blog/2022/achieving-quality-with-no-dedicated-qa-engineers/#when-we-start-to-care-about-quality","text":"Let\u2019s get back to our definition for a while. That is the moment we, apart from focusing on strictly business requirements, plan other activities, including automated checks. Referring to our still evolving DoR (Definition of Ready) and DoD (Definition of Done) where we have added automated functional checks as a part of requirements we hold each team member working on a given feature responsible for creating automated checks that will allow us to regression test this feature later on, according to our processes. As a result we do not need a dedicated role of a quality assurance engineer nor automation engineer that would be responsible for creating and maintaining automated checks. We invest some effort at the beginning but it always pays back, as having automated checks automatically running as a part of the CI process allows us to ultimately save much time needed to re-check feature by feature later.","title":"When we start to care about quality"},{"location":"blog/2022/achieving-quality-with-no-dedicated-qa-engineers/#summary","text":"Quality assurance should be a high priority when we think of building a successful product. Building an effective process around it helps much when it starts from the very beginning and lasts until its end. However, delivering quality is a healthy procedure only when there is the whole development team engaged in it, not a single role. And of course, it is always more effective when an implemented, tested and deployed feature can be checked automatically within a few seconds as a part of the CI process instead of struggling to find a person and time for reproducing repeatable regression test cases again and again.","title":"Summary"},{"location":"blog/2022/are-jcr-nodes-and-sling-resources-the-same-thing/","tags":["WebSight","AEM","CMS","Sling"],"text":"Published at: 17.09.2022 by Micha\u0142 Cukierman Are JCR Nodes and Sling Resources the same thing accessed by different APIs? Some developers would say 'Yes' and their solutions would work... sometimes. I've decided to write a post about it because I often see people misunderstand Sling abstraction in relation to JCR. WebSight Resource Browser with non-JCR Resources on WebSight Community Edition When I started to learn AEM more than 10 years ago, my favorite tool was CRXDE. I used it together with a web browser to observe how changes made in a repository affect the resource tree and the site. Once you are familiar with CRXDE, you can start using Maven and a content-package plugin to produce FileVault packages which can be installed on AEM. Such packages may contain code, configurations, users, permissions, and content. Once a package is installed, you can view it in the resource tree. Changes can be previewed in a web browser by entering a resource path with an extension (a default Sling GET servlet offers JSON, text, and XML renderers mapped to .json, .txt, and .xml extensions respectively). So what seems to be the problem here? From my experience, the main issue is the lack of visibility of resources other than JCR in the standard AEM tooling. You've probably heard the golden rule of the Sling community - \"Everything is a Resource\" a million times. The visible resources are sites, pages, assets, users, components, configurations, and bundles... and all are in JCR. Hence it is natural to conclude that a Sling Resource is a JCR Node, well it is a wrong conclusion. At Dynamic Solutions, we work on a generic Sling Resource Browser as a part of WebSight Community Edition (formerly part of WebSight.Admin tools suite). Apart from the support for reading/writing the JCR Resources, it allows users to browse ALL registered resources. Sling comes with 3, WebSight with 4 and AEM with 9 Out Of the Box Resource Providers. For the purpose of this blog post, I've installed WebSight Resource Browser on AEM 6.5 to demonstrate available providers. Note that we don't maintain AEM compatible distribution of WebSight.Admin tools anymore. Sites, pages, DAM, data, users, components, configurations, and bundles come from JCR, but there are others like servlets, scripts, Bundle Resources, File Resources, and Cloud Resources we should know about. JCR is considered to be the most important resource provider. However, in theory, it's possible to run and work on Sling without JCR at all, simply by using other available resource providers. Resources come in a variety of 'shapes and forms', some resource types are read-only, some allow writing data and some allow creating nodes. Our WebSight Resource Browser supports all resource types with a special extension to enable provider-specific features (therefore with full JCR support). OK, so how do I work with resources? First of all, start using them. Whenever you need to integrate Sling with an external system or need to access a custom resource, implementing your own resource provider may be a proper approach. Furthermore, there already exist implementations of some custom resource providers: NoSQL Resource Providers Filesystem Resource Provider Using extended/custom resource providers is definitely the most elegant way of working with resources in a \"Sling way\" (once again - Everything is a Resource). Secondly, it's important to follow certain rules during our day-to-day work: Use Sling Resource API instead of the JCR API, always when possible. The entire hierarchy would be: CMS API > Sling API > JCR API > OAK API, however, it is a subject for a separate post. Encapsulate usage of the JCR API by creating OSGi services and keep them separated from the generic Sling-based code. Use the JCR API only if you need to access JCR-specific features, Sling does not abstract, for example, User Management, Version Management, Permission Management, complex Nodes definitions, FileVault, and indices are only available when using JCR or Oak API. Think of the entire pool of resources, not only ones based on JCR. Remember that resource.adaptTo(Node.class) may simply not work. Summary This blog post is about Sling, but the topics raised here are very important while developing and working with other Sling-based platforms like WebSight, AEM, or Peregrine. This is a preface for further evaluation of an \u201cEverything is a Resource\u201d statement. Is it still valid in 2022? Containerized, serverless world requires us to re-think our architectures and the way we distribute code, configurations, and content. Stay tuned if you wanna hear more.","title":"Are JCR Nodes and Sling Resources the same thing?"},{"location":"blog/2022/are-jcr-nodes-and-sling-resources-the-same-thing/#are-jcr-nodes-and-sling-resources-the-same-thing-accessed-by-different-apis","text":"Some developers would say 'Yes' and their solutions would work... sometimes. I've decided to write a post about it because I often see people misunderstand Sling abstraction in relation to JCR. WebSight Resource Browser with non-JCR Resources on WebSight Community Edition When I started to learn AEM more than 10 years ago, my favorite tool was CRXDE. I used it together with a web browser to observe how changes made in a repository affect the resource tree and the site. Once you are familiar with CRXDE, you can start using Maven and a content-package plugin to produce FileVault packages which can be installed on AEM. Such packages may contain code, configurations, users, permissions, and content. Once a package is installed, you can view it in the resource tree. Changes can be previewed in a web browser by entering a resource path with an extension (a default Sling GET servlet offers JSON, text, and XML renderers mapped to .json, .txt, and .xml extensions respectively). So what seems to be the problem here? From my experience, the main issue is the lack of visibility of resources other than JCR in the standard AEM tooling. You've probably heard the golden rule of the Sling community - \"Everything is a Resource\" a million times. The visible resources are sites, pages, assets, users, components, configurations, and bundles... and all are in JCR. Hence it is natural to conclude that a Sling Resource is a JCR Node, well it is a wrong conclusion. At Dynamic Solutions, we work on a generic Sling Resource Browser as a part of WebSight Community Edition (formerly part of WebSight.Admin tools suite). Apart from the support for reading/writing the JCR Resources, it allows users to browse ALL registered resources. Sling comes with 3, WebSight with 4 and AEM with 9 Out Of the Box Resource Providers. For the purpose of this blog post, I've installed WebSight Resource Browser on AEM 6.5 to demonstrate available providers. Note that we don't maintain AEM compatible distribution of WebSight.Admin tools anymore. Sites, pages, DAM, data, users, components, configurations, and bundles come from JCR, but there are others like servlets, scripts, Bundle Resources, File Resources, and Cloud Resources we should know about. JCR is considered to be the most important resource provider. However, in theory, it's possible to run and work on Sling without JCR at all, simply by using other available resource providers. Resources come in a variety of 'shapes and forms', some resource types are read-only, some allow writing data and some allow creating nodes. Our WebSight Resource Browser supports all resource types with a special extension to enable provider-specific features (therefore with full JCR support).","title":"Are JCR Nodes and Sling Resources the same thing accessed by different APIs?"},{"location":"blog/2022/are-jcr-nodes-and-sling-resources-the-same-thing/#ok-so-how-do-i-work-with-resources","text":"First of all, start using them. Whenever you need to integrate Sling with an external system or need to access a custom resource, implementing your own resource provider may be a proper approach. Furthermore, there already exist implementations of some custom resource providers: NoSQL Resource Providers Filesystem Resource Provider Using extended/custom resource providers is definitely the most elegant way of working with resources in a \"Sling way\" (once again - Everything is a Resource). Secondly, it's important to follow certain rules during our day-to-day work: Use Sling Resource API instead of the JCR API, always when possible. The entire hierarchy would be: CMS API > Sling API > JCR API > OAK API, however, it is a subject for a separate post. Encapsulate usage of the JCR API by creating OSGi services and keep them separated from the generic Sling-based code. Use the JCR API only if you need to access JCR-specific features, Sling does not abstract, for example, User Management, Version Management, Permission Management, complex Nodes definitions, FileVault, and indices are only available when using JCR or Oak API. Think of the entire pool of resources, not only ones based on JCR. Remember that resource.adaptTo(Node.class) may simply not work.","title":"OK, so how do I work with resources?"},{"location":"blog/2022/are-jcr-nodes-and-sling-resources-the-same-thing/#summary","text":"This blog post is about Sling, but the topics raised here are very important while developing and working with other Sling-based platforms like WebSight, AEM, or Peregrine. This is a preface for further evaluation of an \u201cEverything is a Resource\u201d statement. Is it still valid in 2022? Containerized, serverless world requires us to re-think our architectures and the way we distribute code, configurations, and content. Stay tuned if you wanna hear more.","title":"Summary"},{"location":"blog/2022/building-osgi-apps-with-sling-feature-model/","tags":["WebSight","OSGi","Sling Feature Model"],"text":"Published at: 15.07.2022 by Tomasz Michalak Living in a city, we care about the streets and parks inside it. However, the city is not something permanent. It is constantly changing within its borders. City planners should replan internal city roads easily, adapting them to new requirements. However, for provincial and municipal roads, all changes should be approved by the provincial executive planners. The same rules are valid in IT. As long as we change our private functions, the impact on the overall system is low. However, by changing module interfaces, we can break other modules. We expect a mechanism to define and constantly validate our national, provincial, city and private application roads. In this article, you will learn how we can benefit from OSGi modularity and Sling Feature Model. OSGi Bundles Components are the main building blocks for OSGi applications. With single annotation, we can make a POJO an OSGi component and let the OSGi manage its lifecycle. However, if we want to reference it within our application, we need to declare it as a service . The OSGI implements a service component model - a declarative model for publishing, finding and binding services. This model assumes that all services can expose their functionalities to others. A service implements some API and registers itself in the OSGi service registry. This way, other services can reference other services via APIs, allowing a more dynamic binding. It is how logically we compose the application from small building blocks. On the other hand, we need to group our services into more granular modules, called bundles. A bundle is an identifiable module containing such details as requirements and capabilities - so we initially declare what we need and offer from/to the other registered OSGi bundles. Instead of saying that services communicate with other services, we can say that bundles communicate and collaborate using services. It means that the client of a service is always a bundle. A bundle may register/use zero or more services. While services are the main building blocks for OSGi applications, bundles are the main deployment blocks. With services, we can define loosely coupled objects. With bundles, we organize them into modules with an independent development lifecycle. There are obvious benefits of decomposing an application into modules. A good modularization optimizes the impact of expected changes to only a low percentage of the modules. Cohesive modules containing limited sizes are easy to understand and clearly minimize communication between development teams, thus reducing errors. So It is natural for experienced developers to split their code into smaller pieces with well-defined contracts. 7\u00b12 things However, keeping things small comes with a price - with high granularity, we lose the capability of understanding high-level functionalities. This problem is described in Miller's law , known as 7\u00b12 \u2018things\u2019 . It simply says that we humans have limited cognition and our brains can recall only a few \u2018things\u2019 immediately. That is, up to about 3 or 4 \u2018things\u2019 do not require counting. Over the 7\u00b12 limit, we need to chunk . Miller's law says: Chunking is used by the brain's short-term memory as a method for keeping groups of information accessible for easy recall. Our brain is chunking things based on some common characteristics such as a shape or color. In development, chunking appears at the very low level. Objects and packages are higher-level concepts that group underlying code. Packages are organized into modules (bundles). And having in mind such principles as single-responsibility, we try to keep the number of objects per package small, the same with packages per module. With such a definition, we can easily notice that both modularity and chunking should always be applied together, at every abstraction level. Focusing only on modularity can increase the system complexity drastically. Having that in mind there is an open question: how can we apply chunking at the bundles level. Would it be possible to group bundles into higher level \u2018things\u2019, and then once again group these higher level things into more generic ones, and so on? This is exactly what Sling OSGi Feature Model provides. Sling feature model The feature model is an identifiable JSON-based definition containing bundles, OSGi framework properties and configurations. With these, we can easily define more granular functionalities. What is more, features can be declared from scratch or they can use another pre-existing feature as a prototype . It is especially useful to make minor adjustments to an existing feature and use the new feature instead of the original one. For example, we can replace a single bundle or add a bundle with, for example, testing data However, the Sling OSGI Feature Model is more than the declaration. It also supplies a maven plugin with features validation and aggregation capabilities. The tool that checks all features for completeness and correctness is named the Feature Model Analyser . We can ensure that our declared feature model contains all required bundles during the compilation stage. Once we deliver a feature, we can trust that there are no missing imports (requirements) and that all feature bundles are active. However, there is also a tradeoff - a feature model is declared in advance, so a list of bundles must be complete and final . Example It is time for a short example. Our WebSight CMS is composed of features such as a page editor, package and resource managers, groovy console, assets management etc. In some cases, we want to be able to aggregate some features into the bigger one. The admin tools feature is a good example: It aggregates package manager, resource manager and groovy console. This newly defined feature can be easily used by other teams building more custom applications for our clients. While our development team can deliver a new functionality in the page editor feature without worrying about other admin tools, our CI can check either more high level features for correctness and completeness. Higher-level features work like contracts for more granular features. It is the real benefit of chunking. With the above approach, aggregating higher and higher features, we finally declare the top-level feature as an application-level feature . We keep two base WebSight features: one with local filesystem storage and the second with MongoDB. They differ only in the kind of storage. Finally, we see the feature model as a perfect solution for customization. We keep a separate team delivering a demo website with custom components, styling and templates, called Howlite. This team is reusing the application-level WebSight feature and adding only a single Howlite feature. It is the way we want our clients to work with WebSight. Summary In this article, we presented the idea of features - higher-level blocks of functionalities that build modern OSGi applications. WebSight is composed of multiple features, such as a page editor, assets management, and admin tools. In addition, we are using features aggregation as a starting point for building a client-specific application on top of WebSight. And the last thing to add is that developers can still focus only on small single-purpose building blocks - bundles. Features are nothing but groups of bundles and configs with a higher-level purpose and name.","title":"Building OSGi applications with Sling Feature Model"},{"location":"blog/2022/building-osgi-apps-with-sling-feature-model/#osgi-bundles","text":"Components are the main building blocks for OSGi applications. With single annotation, we can make a POJO an OSGi component and let the OSGi manage its lifecycle. However, if we want to reference it within our application, we need to declare it as a service . The OSGI implements a service component model - a declarative model for publishing, finding and binding services. This model assumes that all services can expose their functionalities to others. A service implements some API and registers itself in the OSGi service registry. This way, other services can reference other services via APIs, allowing a more dynamic binding. It is how logically we compose the application from small building blocks. On the other hand, we need to group our services into more granular modules, called bundles. A bundle is an identifiable module containing such details as requirements and capabilities - so we initially declare what we need and offer from/to the other registered OSGi bundles. Instead of saying that services communicate with other services, we can say that bundles communicate and collaborate using services. It means that the client of a service is always a bundle. A bundle may register/use zero or more services. While services are the main building blocks for OSGi applications, bundles are the main deployment blocks. With services, we can define loosely coupled objects. With bundles, we organize them into modules with an independent development lifecycle. There are obvious benefits of decomposing an application into modules. A good modularization optimizes the impact of expected changes to only a low percentage of the modules. Cohesive modules containing limited sizes are easy to understand and clearly minimize communication between development teams, thus reducing errors. So It is natural for experienced developers to split their code into smaller pieces with well-defined contracts.","title":"OSGi Bundles"},{"location":"blog/2022/building-osgi-apps-with-sling-feature-model/#72-things","text":"However, keeping things small comes with a price - with high granularity, we lose the capability of understanding high-level functionalities. This problem is described in Miller's law , known as 7\u00b12 \u2018things\u2019 . It simply says that we humans have limited cognition and our brains can recall only a few \u2018things\u2019 immediately. That is, up to about 3 or 4 \u2018things\u2019 do not require counting. Over the 7\u00b12 limit, we need to chunk . Miller's law says: Chunking is used by the brain's short-term memory as a method for keeping groups of information accessible for easy recall. Our brain is chunking things based on some common characteristics such as a shape or color. In development, chunking appears at the very low level. Objects and packages are higher-level concepts that group underlying code. Packages are organized into modules (bundles). And having in mind such principles as single-responsibility, we try to keep the number of objects per package small, the same with packages per module. With such a definition, we can easily notice that both modularity and chunking should always be applied together, at every abstraction level. Focusing only on modularity can increase the system complexity drastically. Having that in mind there is an open question: how can we apply chunking at the bundles level. Would it be possible to group bundles into higher level \u2018things\u2019, and then once again group these higher level things into more generic ones, and so on? This is exactly what Sling OSGi Feature Model provides.","title":"7\u00b12 things"},{"location":"blog/2022/building-osgi-apps-with-sling-feature-model/#sling-feature-model","text":"The feature model is an identifiable JSON-based definition containing bundles, OSGi framework properties and configurations. With these, we can easily define more granular functionalities. What is more, features can be declared from scratch or they can use another pre-existing feature as a prototype . It is especially useful to make minor adjustments to an existing feature and use the new feature instead of the original one. For example, we can replace a single bundle or add a bundle with, for example, testing data However, the Sling OSGI Feature Model is more than the declaration. It also supplies a maven plugin with features validation and aggregation capabilities. The tool that checks all features for completeness and correctness is named the Feature Model Analyser . We can ensure that our declared feature model contains all required bundles during the compilation stage. Once we deliver a feature, we can trust that there are no missing imports (requirements) and that all feature bundles are active. However, there is also a tradeoff - a feature model is declared in advance, so a list of bundles must be complete and final .","title":"Sling feature model"},{"location":"blog/2022/building-osgi-apps-with-sling-feature-model/#example","text":"It is time for a short example. Our WebSight CMS is composed of features such as a page editor, package and resource managers, groovy console, assets management etc. In some cases, we want to be able to aggregate some features into the bigger one. The admin tools feature is a good example: It aggregates package manager, resource manager and groovy console. This newly defined feature can be easily used by other teams building more custom applications for our clients. While our development team can deliver a new functionality in the page editor feature without worrying about other admin tools, our CI can check either more high level features for correctness and completeness. Higher-level features work like contracts for more granular features. It is the real benefit of chunking. With the above approach, aggregating higher and higher features, we finally declare the top-level feature as an application-level feature . We keep two base WebSight features: one with local filesystem storage and the second with MongoDB. They differ only in the kind of storage. Finally, we see the feature model as a perfect solution for customization. We keep a separate team delivering a demo website with custom components, styling and templates, called Howlite. This team is reusing the application-level WebSight feature and adding only a single Howlite feature. It is the way we want our clients to work with WebSight.","title":"Example"},{"location":"blog/2022/building-osgi-apps-with-sling-feature-model/#summary","text":"In this article, we presented the idea of features - higher-level blocks of functionalities that build modern OSGi applications. WebSight is composed of multiple features, such as a page editor, assets management, and admin tools. In addition, we are using features aggregation as a starting point for building a client-specific application on top of WebSight. And the last thing to add is that developers can still focus only on small single-purpose building blocks - bundles. Features are nothing but groups of bundles and configs with a higher-level purpose and name.","title":"Summary"},{"location":"blog/2022/configuration-application-data-in-websight-cms/","tags":["WebSight","CMS","Architecture"],"text":"Published at: 21.12.2022 by Maciej Laskowski In this blog, I will explain how the WebSight CMS team approaches the twelve-factor app principles of separating codebase, data, and configuration with containerization. CMS CMS stands for Content Management System. The content (titles/paragraphs/labels, but sometimes also assets like images, PDFs, etc.) is the first citizen in CMS. In short words, the application enables content authors to manage (add, update, delete, and finally publish) the content that is later served to the end users by the channel of their choice (e.g., website, mobile app, smart TV). In the previous blog on containerizing the OSGi application , I focused mainly on the system architecture qualities. Today, we will look at the WebSight CMS in the aspect of the working environment (e.g., development, test, acceptance, production) that consists of three separate layers. WebSight CMS is built on top of Apache Sling. As we already noted in the post on understanding Sling Resources , in the Sling world - everything is a resource , including apps, configs, and data. Deploying and scaling the Apache Sling app in the cloud is possible using the Oak Composite NodeStore . However, we decided to take a different approach and implement a custom Bundle Resource Provider . But that\u2019s a topic for a dedicated blog. Now, let\u2019s consider the configuration, application, and data in WebSight CMS. Configuration There are two types of configuration: Application configuration defines the foundation and does not vary between environments (e.g., which modules application starts). Environment configuration is everything likely to vary between environments (including confidential data like passwords or API tokens). In this article, we will focus on the latter. There are multiple practices to provide environment-specific configuration to the application, naming a few: environment variables (language- and OS-agnostic standard), secrets (used in Docker or Kubernetes), files (e.g., attached via Kubernetes ConfigMaps ). Some advantages of using environment configurations independent of the application: The team can change settings without the need to release (or sometimes even without restarting) the application (e.g., thanks to OSGi configuration watching). When we were containerizing the WebSight CMS (which runs on the Apache Sling), we found Felix-dev Interpolation Plugin very handy. Vulnerable configs access is limited to administrators, who set it as secrets in CI or Secrets Manager (e.g., AWS Secret Manager or HashiCorp Vault) and securely mount it to the environment. Application The application (created from the codebase) represents the logic with all necessary add-ons (like models, connectivity with database, or network requests) that delivers business value. In the case of WebSight CMS, we decided to build a stateless application. We keep the data outside the application (e.g., in DB or other persistent forms). That approach enabled the team to gain the following benefits: The application can be destroyed and recreated on demand (in seconds). Horizontal scaling up and down is easy to achieve, thanks to containers. Data The data in CMS (and probably on any other system) is the most precious resource. It is usually not possible to recreate it easily. That is why we treat it in different ways than application or configuration. And the separation enables us to do so. Data could be regularly backed up (depending on desired Recovery Point Objective - RPO) and restored in case of trouble. The time to provide the operational environment ( Recovery Time Objective - RTO) depends on the volume of data because the application and configuration are ready almost instantly after the infrastructure is ready (which is also very fast in the case of cloud providers). Another benefit of data separation is the ability to use different data sets during development and testing. That means we could easily create the application (build an image), test it against corner cases, and later attach it to the production data. The same is true for the opposite direction. The team can easily import the production data into the developer environment to investigate and fix encountered problems. Summary In this blog, we focused on WebSight CMS in the aspect of three separate ingredients that, together with underlying infrastructure, compose a fully working environment. Separation of the configuration, application, and data enables development teams to: Create reusable releases and independent deployment cycles - build an application once, and deploy anywhere, anytime. Gain high confidence in the released application (image tested once, deployed everywhere will be the same). Achieve a high level of security (vulnerable data stored as secrets). Benefit from continuous integration - dedicated content (data) to test edge cases on the same image that travels to the higher environments (acceptance, production). Scale up and down the application (business logic) in an easy and automated way. Improve disaster recovery by optimizing RPO and RTO metrics. References The twelve-factor app - a set of principles for building software-as-a-service apps. Most of those methods are considered the best practice for any modern web application, including separation of the codebase, configuration, and data. Kubernetes ConfigMap - a common technique for separating the application (image) from the configuration. ConfigMaps should not contain sensitive information. Kubernetes Secrets - when the configuration contains sensitive information like passwords or tokens, secrets isolate the application (image) from the configs in a secure way.","title":"Configuration, application, and data in WebSight CMS"},{"location":"blog/2022/configuration-application-data-in-websight-cms/#cms","text":"CMS stands for Content Management System. The content (titles/paragraphs/labels, but sometimes also assets like images, PDFs, etc.) is the first citizen in CMS. In short words, the application enables content authors to manage (add, update, delete, and finally publish) the content that is later served to the end users by the channel of their choice (e.g., website, mobile app, smart TV). In the previous blog on containerizing the OSGi application , I focused mainly on the system architecture qualities. Today, we will look at the WebSight CMS in the aspect of the working environment (e.g., development, test, acceptance, production) that consists of three separate layers. WebSight CMS is built on top of Apache Sling. As we already noted in the post on understanding Sling Resources , in the Sling world - everything is a resource , including apps, configs, and data. Deploying and scaling the Apache Sling app in the cloud is possible using the Oak Composite NodeStore . However, we decided to take a different approach and implement a custom Bundle Resource Provider . But that\u2019s a topic for a dedicated blog. Now, let\u2019s consider the configuration, application, and data in WebSight CMS.","title":"CMS"},{"location":"blog/2022/configuration-application-data-in-websight-cms/#configuration","text":"There are two types of configuration: Application configuration defines the foundation and does not vary between environments (e.g., which modules application starts). Environment configuration is everything likely to vary between environments (including confidential data like passwords or API tokens). In this article, we will focus on the latter. There are multiple practices to provide environment-specific configuration to the application, naming a few: environment variables (language- and OS-agnostic standard), secrets (used in Docker or Kubernetes), files (e.g., attached via Kubernetes ConfigMaps ). Some advantages of using environment configurations independent of the application: The team can change settings without the need to release (or sometimes even without restarting) the application (e.g., thanks to OSGi configuration watching). When we were containerizing the WebSight CMS (which runs on the Apache Sling), we found Felix-dev Interpolation Plugin very handy. Vulnerable configs access is limited to administrators, who set it as secrets in CI or Secrets Manager (e.g., AWS Secret Manager or HashiCorp Vault) and securely mount it to the environment.","title":"Configuration"},{"location":"blog/2022/configuration-application-data-in-websight-cms/#application","text":"The application (created from the codebase) represents the logic with all necessary add-ons (like models, connectivity with database, or network requests) that delivers business value. In the case of WebSight CMS, we decided to build a stateless application. We keep the data outside the application (e.g., in DB or other persistent forms). That approach enabled the team to gain the following benefits: The application can be destroyed and recreated on demand (in seconds). Horizontal scaling up and down is easy to achieve, thanks to containers.","title":"Application"},{"location":"blog/2022/configuration-application-data-in-websight-cms/#data","text":"The data in CMS (and probably on any other system) is the most precious resource. It is usually not possible to recreate it easily. That is why we treat it in different ways than application or configuration. And the separation enables us to do so. Data could be regularly backed up (depending on desired Recovery Point Objective - RPO) and restored in case of trouble. The time to provide the operational environment ( Recovery Time Objective - RTO) depends on the volume of data because the application and configuration are ready almost instantly after the infrastructure is ready (which is also very fast in the case of cloud providers). Another benefit of data separation is the ability to use different data sets during development and testing. That means we could easily create the application (build an image), test it against corner cases, and later attach it to the production data. The same is true for the opposite direction. The team can easily import the production data into the developer environment to investigate and fix encountered problems.","title":"Data"},{"location":"blog/2022/configuration-application-data-in-websight-cms/#summary","text":"In this blog, we focused on WebSight CMS in the aspect of three separate ingredients that, together with underlying infrastructure, compose a fully working environment. Separation of the configuration, application, and data enables development teams to: Create reusable releases and independent deployment cycles - build an application once, and deploy anywhere, anytime. Gain high confidence in the released application (image tested once, deployed everywhere will be the same). Achieve a high level of security (vulnerable data stored as secrets). Benefit from continuous integration - dedicated content (data) to test edge cases on the same image that travels to the higher environments (acceptance, production). Scale up and down the application (business logic) in an easy and automated way. Improve disaster recovery by optimizing RPO and RTO metrics.","title":"Summary"},{"location":"blog/2022/configuration-application-data-in-websight-cms/#references","text":"The twelve-factor app - a set of principles for building software-as-a-service apps. Most of those methods are considered the best practice for any modern web application, including separation of the codebase, configuration, and data. Kubernetes ConfigMap - a common technique for separating the application (image) from the configuration. ConfigMaps should not contain sensitive information. Kubernetes Secrets - when the configuration contains sensitive information like passwords or tokens, secrets isolate the application (image) from the configs in a secure way.","title":"References"},{"location":"blog/2022/customizing-rich-text-editor/","tags":["WebSight","Rich Text Editor"],"text":"Published at: 20.10.2022 by Pawel Jozwicki , Kamil Kwarciak Customising Rich Text Editor in WebSight CMS Ensuring site consistency is very important to provide an excellent experience for visitors. You can achieve the goal with page templates and components. They implement a structure that authors have to follow. However, a total lack of flexibility would require a lot of development effort to cover every case presented in designs. Rich Text Editor (RTE) can be a sweet spot. It is an input field that provides a rich editing experience and offers extra formatting options like bold, italic, or bullet points. Moreover, RTE can deliver additional functionalities for edited content, for example, link definition, undo/redo. Finally, you can customize and extend RTE to provide the desired level of flexibility. This article presents how to use and configure RTE in WebSight CMS. WebSight RTE formatting functionalities WebSight Rich Text Editor provides multiple content editing functionalities with possibilities to adjust and extend them. Each functionality requires a definition of two elements: UI component added to the menu bar; a plugin component that implements various styling or content processing feature. The above separation enables adjustment of the RTE toolbar according to the desired level of freedom. You can configure the editing options as separate buttons, group them in a dropdown or prepare a dropdown list. Moreover, you can extend the set of existing functionalities and create additional UI components or implement different plugins. Then, you can mix them all and include them in the toolbar to provide new options. WebSight CMS delivers the following UI components for the RTE toolbar: Button with a caption or displayed as an icon (if provided); Button Dropdown that groups several buttons in a dropdown; Dropdown that contains a list of options; Link that opens a dialog for a link setup. The list of available plugin components is as follows: Bold Italic Underline Strikethrough Bullet list Ordered list Paragraph Heading Link Unset link Clear formatting Hard Break Text Align Undo Redo Using RTE as a dialog field RTE is not a stand-alone content editor in WebSight CMS. You need to add it in a dialog definition for a component. Use wcm/dialogs/components/richtext as the resource type. Once completed, you can drag and drop the component on a page, open its dialog and enter the content. /libs/howlite/components/richtext/dialog/.content.json ... \"text\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"text\" , \"label\" : \"Text\" } ... RTE defined above uses a default configuration. See the regular options available in the toolbar on the image below. It presents an application in the Rich text editor component that is a part of the Howlite library. Components development See our component development guide and documentation for dialogs to learn more on how to use input fields and define dialogs for components. RTE customization Configuration of components You can modify RTE by defining a custom configuration. Thus, let's review its structure first. RTE configuration should include entries for all functionalities available in the editor. Each entry consists of UI component details, and the plugin runs when a user clicks the UI component. See a sample configuration for Bold functionality below: { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } } The configuration contains a path to UI Component , its title and icon, and a path to plugin component See the result on the screen presented below. You may need to group buttons in a dropdown, for example, text alignment options. Let's assume the expected result is as follows. You can use the following configuration to implement it. { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/buttondropdown\" , \"title\" : \"Text Alignment\" , \"left\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Left Align\" , \"icon\" : \"format_align_left\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"left\" } }, \"center\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Center Align\" , \"icon\" : \"format_align_center\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"center\" } }, \"right\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Right Align\" , \"icon\" : \"format_align_right\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"right\" } }, \"justify\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Justify Align\" , \"icon\" : \"format_align_justify\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"justify\" } } } The above scenario requires embedding button components in buttondropdown . Moreover, textalign plugin requires alignment type as a parameter. Sample configuration file It is required to define a proper resource type for the RTE configuration. It should be wcm/dialogs/components/richtext/configuration . Additionally, the configuration should contain definitions for all components as described above. /apps/myapp/components/rte/configuration { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/configuration\" , \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }, \"italic\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Italic\" , \"icon\" : \"format_italic\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/italic\" } }, \"underline\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Underline\" , \"icon\" : \"format_underlined\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/underline\" } }, \"strikethrough\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Strikethrough\" , \"icon\" : \"format_strikethrough\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/strikethrough\" } } } The above configuration includes just four simple font styles. Its application results in the following RTE. Using custom configuration You can change the RTE configuration in two ways. Firstly, by adding a property with a path to a custom configuration. \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" , \"configuration\" : \"/apps/myapp/components/rte/configuration\" } Another option is to define the configuration explicitly under the field definition. \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" , \"configuration\" : { ... } } Summary Page templates may determine the overall layout of components. However, one of them can be RTE. It gives users some flexibility in the content authoring for a given area on the page. We presented how to adjust the flexibility level granted to authors. You can use a collection of plugins to customize the functionalities of RTE. Moreover, you can implement your UI or plugin components as well. We will cover this advanced topic in one of my next blog posts. You can find more details on RTE customization in our documentation .","title":"Customising Rich Text Editor in WebSight CMS"},{"location":"blog/2022/customizing-rich-text-editor/#customising-rich-text-editor-in-websight-cms","text":"Ensuring site consistency is very important to provide an excellent experience for visitors. You can achieve the goal with page templates and components. They implement a structure that authors have to follow. However, a total lack of flexibility would require a lot of development effort to cover every case presented in designs. Rich Text Editor (RTE) can be a sweet spot. It is an input field that provides a rich editing experience and offers extra formatting options like bold, italic, or bullet points. Moreover, RTE can deliver additional functionalities for edited content, for example, link definition, undo/redo. Finally, you can customize and extend RTE to provide the desired level of flexibility. This article presents how to use and configure RTE in WebSight CMS.","title":"Customising Rich Text Editor in WebSight CMS"},{"location":"blog/2022/customizing-rich-text-editor/#websight-rte-formatting-functionalities","text":"WebSight Rich Text Editor provides multiple content editing functionalities with possibilities to adjust and extend them. Each functionality requires a definition of two elements: UI component added to the menu bar; a plugin component that implements various styling or content processing feature. The above separation enables adjustment of the RTE toolbar according to the desired level of freedom. You can configure the editing options as separate buttons, group them in a dropdown or prepare a dropdown list. Moreover, you can extend the set of existing functionalities and create additional UI components or implement different plugins. Then, you can mix them all and include them in the toolbar to provide new options. WebSight CMS delivers the following UI components for the RTE toolbar: Button with a caption or displayed as an icon (if provided); Button Dropdown that groups several buttons in a dropdown; Dropdown that contains a list of options; Link that opens a dialog for a link setup. The list of available plugin components is as follows: Bold Italic Underline Strikethrough Bullet list Ordered list Paragraph Heading Link Unset link Clear formatting Hard Break Text Align Undo Redo","title":"WebSight RTE formatting functionalities"},{"location":"blog/2022/customizing-rich-text-editor/#using-rte-as-a-dialog-field","text":"RTE is not a stand-alone content editor in WebSight CMS. You need to add it in a dialog definition for a component. Use wcm/dialogs/components/richtext as the resource type. Once completed, you can drag and drop the component on a page, open its dialog and enter the content. /libs/howlite/components/richtext/dialog/.content.json ... \"text\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"text\" , \"label\" : \"Text\" } ... RTE defined above uses a default configuration. See the regular options available in the toolbar on the image below. It presents an application in the Rich text editor component that is a part of the Howlite library. Components development See our component development guide and documentation for dialogs to learn more on how to use input fields and define dialogs for components.","title":"Using RTE as a dialog field"},{"location":"blog/2022/customizing-rich-text-editor/#rte-customization","text":"","title":"RTE customization"},{"location":"blog/2022/customizing-rich-text-editor/#configuration-of-components","text":"You can modify RTE by defining a custom configuration. Thus, let's review its structure first. RTE configuration should include entries for all functionalities available in the editor. Each entry consists of UI component details, and the plugin runs when a user clicks the UI component. See a sample configuration for Bold functionality below: { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } } The configuration contains a path to UI Component , its title and icon, and a path to plugin component See the result on the screen presented below. You may need to group buttons in a dropdown, for example, text alignment options. Let's assume the expected result is as follows. You can use the following configuration to implement it. { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/buttondropdown\" , \"title\" : \"Text Alignment\" , \"left\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Left Align\" , \"icon\" : \"format_align_left\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"left\" } }, \"center\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Center Align\" , \"icon\" : \"format_align_center\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"center\" } }, \"right\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Right Align\" , \"icon\" : \"format_align_right\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"right\" } }, \"justify\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Justify Align\" , \"icon\" : \"format_align_justify\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"justify\" } } } The above scenario requires embedding button components in buttondropdown . Moreover, textalign plugin requires alignment type as a parameter.","title":"Configuration of components"},{"location":"blog/2022/customizing-rich-text-editor/#sample-configuration-file","text":"It is required to define a proper resource type for the RTE configuration. It should be wcm/dialogs/components/richtext/configuration . Additionally, the configuration should contain definitions for all components as described above. /apps/myapp/components/rte/configuration { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/configuration\" , \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }, \"italic\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Italic\" , \"icon\" : \"format_italic\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/italic\" } }, \"underline\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Underline\" , \"icon\" : \"format_underlined\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/underline\" } }, \"strikethrough\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Strikethrough\" , \"icon\" : \"format_strikethrough\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/strikethrough\" } } } The above configuration includes just four simple font styles. Its application results in the following RTE.","title":"Sample configuration file"},{"location":"blog/2022/customizing-rich-text-editor/#using-custom-configuration","text":"You can change the RTE configuration in two ways. Firstly, by adding a property with a path to a custom configuration. \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" , \"configuration\" : \"/apps/myapp/components/rte/configuration\" } Another option is to define the configuration explicitly under the field definition. \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" , \"configuration\" : { ... } }","title":"Using custom configuration"},{"location":"blog/2022/customizing-rich-text-editor/#summary","text":"Page templates may determine the overall layout of components. However, one of them can be RTE. It gives users some flexibility in the content authoring for a given area on the page. We presented how to adjust the flexibility level granted to authors. You can use a collection of plugins to customize the functionalities of RTE. Moreover, you can implement your UI or plugin components as well. We will cover this advanced topic in one of my next blog posts. You can find more details on RTE customization in our documentation .","title":"Summary"},{"location":"blog/2022/how-has-cms-evolved-into-dxp/","tags":["DXP","CMS"],"text":"Published at: 06.10.2022 by Michal Papciak There are multiple articles on the internet that touch the definitions of CMS and DXP and attempt to draw a line between them. And of course the line can vary from one definition to another. In this blogpost, I would like to look into how the web has changed from web 1.0 to what it is right now and how these changes and business needs have impacted the evolution of content management systems. The evolution of WWW and its impact on content management systems The first website in history was published on August the 6th, 1991 by Tim Berners Lee. While working at CERN, Berners Lee was frustrated with the fact that there is so much knowledge spread with the thousands of researchers employed at CERN and yet\u2026 it is near impossible to access and use it. In his own words: \u201cI found myself answering the same questions asked frequently of me by different people. It would be so much easier if everyone could just read my database.\u201d It took some serious work and negotiations from the London-born physicist to convince his boss to allow him to work on the project then called \u201cInformation Management\u201d (later changed to WorldWideWeb). The website below is the key milestone of that project: The first webpage ( source ) This simple compilation of links and text started everything. Fast forward about 5 - 6 years and the WWW grew to over 200.000 websites . Nothing compared to near 2 billion we have in 2022 1 . But what was noticed then, is that producing new content with HTML authoring tools will simply not scale up to the needs. Wise observation for the time, considering that the websites of tech giants like Microsoft or IBM still looked something like this: Microsoft \u201cwrite us\u201d page in late 1996 ( source ) IBM homepage in October 1996 ( source ) All this was still in the mid of web 1.0 era, Internet Explorer had just learned to support CSS and shortly after Document Object Model was born. Pages like above shaped the early requirements of the CMS: Having one, central repository where content authors would collaborate efficiently; Easing the process of content creation by removing pure HTML creation. More consistency between pages needed; Rudimentary set of permissions for content authors, so that it is clear who can work on which parts of the website; Some basic security over our content and the information we want and potentially do not want to publish. That was really it. And early content management systems allowed for exactly that. Server side scripting transformed simple templates filled in by authors to HTML. One database stored all the content and managed permissions. Only one distribution channel - the desktop, only static pages served, and finally, only one way communication: from the content authors to the web. Things were simple. Fast forward to the Web 2.0 era. This is when users started generating content. Pages were no longer static, e-commerce had arrived and soon social media started becoming very relevant . The web users now communicate with the businesses in digital. And they expect to be heard. Around that time (2008 - 2010) your CMS should: Support WYSIWYG content authoring; Support complex, publishing workflows; Allow for bi-directional communication with your users; Store and serve various media types, including rich media. Things became much trickier - your CMS then had to support some complex processes and integrate with a lot of different applications (think about all the Wordpress app-like plugins). And this is something it was not designed to do initially. One more jump in time and we are in 2015 - 2017. 2017 was the first year when mobile traffic overtook the desktop . And it has remained so until now. The WWW users now expect a consistent experience between desktop and mobile. There are 1 billion websites in the world. Your CMS has become more of a platform that: Supports all devices; Gathers data and customer intelligence; Is context aware and serves personalized content; Supports multiple infrastructure and deployment models; Integrates seamlessly with 3rd party software. Even though monolithic CMS are still standing strong, it is becoming apparent that at some point, the amount of data, touchpoints and users will become a challenge. Scaling monoliths will be complicated or costly but most likely both. And this is actually how we enter the DXP. DXP - a revolution or \u201cjust\u201d next step? I do not like definitions, so I will not quote Gartner Glossary here. Allow me to list the challenges I think a DXP should address: The ability to deliver contextualized experiences to digital channels (web, mobile, apps, social media, email, IoT devices\u2026) and scale up quickly and at low cost . Consistency between all channels and devices for a full, end to end customer journey. There is nothing more annoying than an empty basket on your mobile app when you've just completed it on a website. One to one personalization. 75% of consumers are likely to buy from companies that are able to suggest a product based on their previous interest, buys and journeys 2 . The ability to extend your customer\u2019s profile by easily connecting other systems - CRM, CDP and similar. Using any tools you like. Due to the architecture of a DXP, you should not be subject to vendor - locking. Instead you are able to build the best digital marketing suite out of the tools and systems you feel are best. You could argue that some of the same issues we were trying to solve as early as in 2016. And I would agree. There is a major factor to consider here though, which is the volume . There is a fantastic book by Vaclav Smil called Numbers don\u2019t lie (I\u2019d recommend you give the entire book a read) and one of the chapters touches on the volume of data we produce. Some facts: In 2018 in the United States, the internet users have downloaded 97000 hours of movies and series from Netflix every minute . They watched 4.5 million Youtube movies and generally transferred a total of 3.1 petabytes of data (that is 3.1 x 10 15 bytes). Again that is every minute . In 2016, the pace in which we produced data was estimated to be 16 zettabytes a year, which is 16 * 10 21 bytes. To put that into perspective: you would have to download the 4k Braveheart movie about 400.000.000.000 times to generate the same volume. It is estimated that by 2025 this number will be ten times higher - 160 zettabytes a year (which is 160 * 10 21 bytes). Somewhere in all of this, is your digital estate and your CMS. So what is a DXP? In essence, a DXP is a technological suite, at heart of which could be the CMS. The suite should be powered by an architecture with loosely - coupled elements that allows you to easily plug in tools (personalization engines, marketing automation, CRM etc.) that improve your user and customer experience. Most importantly however, that architecture should be able to serve all your visitors, channels and data volume now, tomorrow and three years from now, when it becomes even more challenging (as indicated by Professor Smil in his book). Is DXP a revolution then? In my opinion no, it is the next step, just like Web 2.0 CMS was the next step from Web 1.0 CMS. Does it require a shift in technical design from what it initially was? Yes, definitely. DXP - should you care? Yes, you should. Here is why: Digital Experience Platform market size will be worth $15.80 Billion by 2025 3 , 4 65% of North American consumers say they trust a business less when they experience a problem using a website or mobile app 5 55% of customers prefer digital channels over traditional channels 5 32% consumers say they will walk away from a brand they love after just one bad experience 6 If a company has a digital presence and wants to keep up with user\u2019s growing expectations - a DXP should be on their radar. Summary The goal of this post is to give the reader an overview of how the needs of the businesses in WWW have shaped content management systems. We went from its early days to explaining the explosion of data and delivery channels and what challenges they have brought. In the next blogpost, I would like to introduce how our product - WebSight is designed to fit the demanding digital environment today. We will take a closer, more technical look into the features and architecture that is able to power the next generation of Customer Experience.","title":"How has CMS evolved into DXP? What is the difference? Should you care?"},{"location":"blog/2022/how-has-cms-evolved-into-dxp/#the-evolution-of-www-and-its-impact-on-content-management-systems","text":"The first website in history was published on August the 6th, 1991 by Tim Berners Lee. While working at CERN, Berners Lee was frustrated with the fact that there is so much knowledge spread with the thousands of researchers employed at CERN and yet\u2026 it is near impossible to access and use it. In his own words: \u201cI found myself answering the same questions asked frequently of me by different people. It would be so much easier if everyone could just read my database.\u201d It took some serious work and negotiations from the London-born physicist to convince his boss to allow him to work on the project then called \u201cInformation Management\u201d (later changed to WorldWideWeb). The website below is the key milestone of that project: The first webpage ( source ) This simple compilation of links and text started everything. Fast forward about 5 - 6 years and the WWW grew to over 200.000 websites . Nothing compared to near 2 billion we have in 2022 1 . But what was noticed then, is that producing new content with HTML authoring tools will simply not scale up to the needs. Wise observation for the time, considering that the websites of tech giants like Microsoft or IBM still looked something like this: Microsoft \u201cwrite us\u201d page in late 1996 ( source ) IBM homepage in October 1996 ( source ) All this was still in the mid of web 1.0 era, Internet Explorer had just learned to support CSS and shortly after Document Object Model was born. Pages like above shaped the early requirements of the CMS: Having one, central repository where content authors would collaborate efficiently; Easing the process of content creation by removing pure HTML creation. More consistency between pages needed; Rudimentary set of permissions for content authors, so that it is clear who can work on which parts of the website; Some basic security over our content and the information we want and potentially do not want to publish. That was really it. And early content management systems allowed for exactly that. Server side scripting transformed simple templates filled in by authors to HTML. One database stored all the content and managed permissions. Only one distribution channel - the desktop, only static pages served, and finally, only one way communication: from the content authors to the web. Things were simple. Fast forward to the Web 2.0 era. This is when users started generating content. Pages were no longer static, e-commerce had arrived and soon social media started becoming very relevant . The web users now communicate with the businesses in digital. And they expect to be heard. Around that time (2008 - 2010) your CMS should: Support WYSIWYG content authoring; Support complex, publishing workflows; Allow for bi-directional communication with your users; Store and serve various media types, including rich media. Things became much trickier - your CMS then had to support some complex processes and integrate with a lot of different applications (think about all the Wordpress app-like plugins). And this is something it was not designed to do initially. One more jump in time and we are in 2015 - 2017. 2017 was the first year when mobile traffic overtook the desktop . And it has remained so until now. The WWW users now expect a consistent experience between desktop and mobile. There are 1 billion websites in the world. Your CMS has become more of a platform that: Supports all devices; Gathers data and customer intelligence; Is context aware and serves personalized content; Supports multiple infrastructure and deployment models; Integrates seamlessly with 3rd party software. Even though monolithic CMS are still standing strong, it is becoming apparent that at some point, the amount of data, touchpoints and users will become a challenge. Scaling monoliths will be complicated or costly but most likely both. And this is actually how we enter the DXP.","title":"The evolution of WWW and its impact on content management systems"},{"location":"blog/2022/how-has-cms-evolved-into-dxp/#dxp-a-revolution-or-just-next-step","text":"I do not like definitions, so I will not quote Gartner Glossary here. Allow me to list the challenges I think a DXP should address: The ability to deliver contextualized experiences to digital channels (web, mobile, apps, social media, email, IoT devices\u2026) and scale up quickly and at low cost . Consistency between all channels and devices for a full, end to end customer journey. There is nothing more annoying than an empty basket on your mobile app when you've just completed it on a website. One to one personalization. 75% of consumers are likely to buy from companies that are able to suggest a product based on their previous interest, buys and journeys 2 . The ability to extend your customer\u2019s profile by easily connecting other systems - CRM, CDP and similar. Using any tools you like. Due to the architecture of a DXP, you should not be subject to vendor - locking. Instead you are able to build the best digital marketing suite out of the tools and systems you feel are best. You could argue that some of the same issues we were trying to solve as early as in 2016. And I would agree. There is a major factor to consider here though, which is the volume . There is a fantastic book by Vaclav Smil called Numbers don\u2019t lie (I\u2019d recommend you give the entire book a read) and one of the chapters touches on the volume of data we produce. Some facts: In 2018 in the United States, the internet users have downloaded 97000 hours of movies and series from Netflix every minute . They watched 4.5 million Youtube movies and generally transferred a total of 3.1 petabytes of data (that is 3.1 x 10 15 bytes). Again that is every minute . In 2016, the pace in which we produced data was estimated to be 16 zettabytes a year, which is 16 * 10 21 bytes. To put that into perspective: you would have to download the 4k Braveheart movie about 400.000.000.000 times to generate the same volume. It is estimated that by 2025 this number will be ten times higher - 160 zettabytes a year (which is 160 * 10 21 bytes). Somewhere in all of this, is your digital estate and your CMS. So what is a DXP? In essence, a DXP is a technological suite, at heart of which could be the CMS. The suite should be powered by an architecture with loosely - coupled elements that allows you to easily plug in tools (personalization engines, marketing automation, CRM etc.) that improve your user and customer experience. Most importantly however, that architecture should be able to serve all your visitors, channels and data volume now, tomorrow and three years from now, when it becomes even more challenging (as indicated by Professor Smil in his book). Is DXP a revolution then? In my opinion no, it is the next step, just like Web 2.0 CMS was the next step from Web 1.0 CMS. Does it require a shift in technical design from what it initially was? Yes, definitely.","title":"DXP - a revolution or \u201cjust\u201d next step?"},{"location":"blog/2022/how-has-cms-evolved-into-dxp/#dxp-should-you-care","text":"Yes, you should. Here is why: Digital Experience Platform market size will be worth $15.80 Billion by 2025 3 , 4 65% of North American consumers say they trust a business less when they experience a problem using a website or mobile app 5 55% of customers prefer digital channels over traditional channels 5 32% consumers say they will walk away from a brand they love after just one bad experience 6 If a company has a digital presence and wants to keep up with user\u2019s growing expectations - a DXP should be on their radar.","title":"DXP - should you care?"},{"location":"blog/2022/how-has-cms-evolved-into-dxp/#summary","text":"The goal of this post is to give the reader an overview of how the needs of the businesses in WWW have shaped content management systems. We went from its early days to explaining the explosion of data and delivery channels and what challenges they have brought. In the next blogpost, I would like to introduce how our product - WebSight is designed to fit the demanding digital environment today. We will take a closer, more technical look into the features and architecture that is able to power the next generation of Customer Experience.","title":"Summary"},{"location":"blog/2022/on-the-road-to-the-perfect-dxp/","tags":["WebSight","DXP"],"text":"Published at: 01.07.2022 by Micha\u0142 Cukierman THE PROBLEM It is very easy to get lost when it comes to choosing the technology stack driving your digital projects. It may be surprising, but WordPress, Joomla, and Drupal are still the most popular options for small and medium companies. Larger ones often choose full-flagged DXPs like Adobe Experience Manager, Sitecore, or Magnolia to fulfill their enterprise needs. All of the solutions above are mature and battle-tested, they adapt to changing world but still use best practices from previous decades. I am not the first one who noticed it. We need applications that are more secure, faster, easier to scale and at the same time cheaper to run and simpler. There are many emerging players available on the market including Jamstack-compatible solutions like Contentful, Webiny, Strapi, and so on. Single Page Applications' popularity and requirements of supporting multiple channels helped Headless CMSs to successfully enter the market. The only problem is that there is always a tradeoff. Headless solutions are often designed to solve certain problems and operate in cloud-native environments, but at the same time are lacking enterprise features (like WYSIWYG authoring, granular role-based security, and multi-site management to name a few), mostly because of simplified underlying data structure (designed for structured content), lightweight programming models, and lack of maturity. We asked ourselves if it is possible to have a solution that combines the advantages of both approaches?? Have mature, tested, and feature-rich platforms and the ability to deliver experiences at web-scale in cloud-native architectures? THE OBSERVATION Like many things in technology, we can search for analogies in real life. The beer is brewed in breweries, but later distributed to bars to make more people enjoy it in a better environment Food comes from multiple sources like farmlands or sea but is later processed and delivered to groceries or served in restaurants A movie is created in a studio, and later watched in multiple places like a cinema or at home Games are developed in studios, but people enjoy it using game consoles or PCs The critical point here is that the place where you create and develop is different from where you consume it. It\u2019s done for multiple reasons: scalability, security, performance, cost, and overall experience. THE IDEA To deliver enterprise experiences at a web scale we decided to resolve the core problem of recent platforms. When you take a look at mature CMS systems like WordPress or AEM, you\u2019ll see that publishers or renderers are almost always technological copies of authoring environments. Of course, it was a natural step, if one instance is not enough to deliver the content, you multiply it and eventually add caching layers to hide architecture limitations. But is it the way it should be? In our vision, CMS has to focus purely on the authoring experience. From the programmer's point of view, we see it as a distributed IDE for content authors. Optimized for content creation, management, and integration of multiple data sources. It should be created to provide a unified environment for preparing customer experiences. What\u2019s important - data itself may come from internal data storage (which should be designed to handle structured and unstructured data) or external sources. Examples of data sources are PIM systems, enterprise applications, or external databases. Everything has to be managed in (not served by) CMS, which plays the role of the content hub. Experiences, once created, should be delivered to the end-users via another, dedicated environment - the runtime. At the same time, we want to avoid any runtime dependencies between runtime and authoring environments. Here the push model comes to play. Runtime should be designed to serve experiences at a true web scale. No more publishers, content synchronization, dispatchers, read-only replicas, and instance multiplication. What could be the ideal place to do that? The answer is simple, the cloud. THE SOLUTION A simplified diagram presents the options we have now. We can choose mature, feature-rich enterprise solutions (on the left), which are often part of closed, proprietary ecosystems, or choose lighter cloud-native alternatives (on the right). Mature CMS\u2019es seem to not keep up with the progress, because of server-oriented architectures which were designed in the 2000s to work on physical machines in dedicated data centers. New headless systems are limited and not complete solutions. They are lacking the integration layer, and the dynamic content is orchestrated directly in the browser, which calls microservices. What if we merge two and take the best from two worlds? Well, we did it and the result is WebSight . As we already know it has two major parts: WebSight CMS - enterprise-grade authoring system created using battle-tested technologies. Apache Sling, Apache Felix, and Apache Oak are a foundation that allows us to take advantage of years of experience from other players. At the same time, we had a chance to avoid many pitfalls and use only components which are ready to work in a container-oriented world. We took the advantage of being able to create our solution from the ground. WebSight Runtime - cloud-native architecture designed to serve experiences in a secure, scalable, and performant way. Its core is cloud-agnostic, but our first implementation is based on AWS. The difference with Jamstack is that the integration and rendering layers are in the cloud, not in a browser. Serverless functions give us more flexibility and fully replace the need for publisher instances at runtime. NEXT STEPS At the time of writing this post, WebSight is a functional product. We use it internally to create the first projects and work on the first public release. We\u2019ll be sharing here the insights into the architecture and development process, so stay tuned, because there's more to come.","title":"On the road to the perfect DXP"},{"location":"blog/2022/on-the-road-to-the-perfect-dxp/#the-problem","text":"It is very easy to get lost when it comes to choosing the technology stack driving your digital projects. It may be surprising, but WordPress, Joomla, and Drupal are still the most popular options for small and medium companies. Larger ones often choose full-flagged DXPs like Adobe Experience Manager, Sitecore, or Magnolia to fulfill their enterprise needs. All of the solutions above are mature and battle-tested, they adapt to changing world but still use best practices from previous decades. I am not the first one who noticed it. We need applications that are more secure, faster, easier to scale and at the same time cheaper to run and simpler. There are many emerging players available on the market including Jamstack-compatible solutions like Contentful, Webiny, Strapi, and so on. Single Page Applications' popularity and requirements of supporting multiple channels helped Headless CMSs to successfully enter the market. The only problem is that there is always a tradeoff. Headless solutions are often designed to solve certain problems and operate in cloud-native environments, but at the same time are lacking enterprise features (like WYSIWYG authoring, granular role-based security, and multi-site management to name a few), mostly because of simplified underlying data structure (designed for structured content), lightweight programming models, and lack of maturity. We asked ourselves if it is possible to have a solution that combines the advantages of both approaches?? Have mature, tested, and feature-rich platforms and the ability to deliver experiences at web-scale in cloud-native architectures?","title":"THE PROBLEM"},{"location":"blog/2022/on-the-road-to-the-perfect-dxp/#the-observation","text":"Like many things in technology, we can search for analogies in real life. The beer is brewed in breweries, but later distributed to bars to make more people enjoy it in a better environment Food comes from multiple sources like farmlands or sea but is later processed and delivered to groceries or served in restaurants A movie is created in a studio, and later watched in multiple places like a cinema or at home Games are developed in studios, but people enjoy it using game consoles or PCs The critical point here is that the place where you create and develop is different from where you consume it. It\u2019s done for multiple reasons: scalability, security, performance, cost, and overall experience.","title":"THE OBSERVATION"},{"location":"blog/2022/on-the-road-to-the-perfect-dxp/#the-idea","text":"To deliver enterprise experiences at a web scale we decided to resolve the core problem of recent platforms. When you take a look at mature CMS systems like WordPress or AEM, you\u2019ll see that publishers or renderers are almost always technological copies of authoring environments. Of course, it was a natural step, if one instance is not enough to deliver the content, you multiply it and eventually add caching layers to hide architecture limitations. But is it the way it should be? In our vision, CMS has to focus purely on the authoring experience. From the programmer's point of view, we see it as a distributed IDE for content authors. Optimized for content creation, management, and integration of multiple data sources. It should be created to provide a unified environment for preparing customer experiences. What\u2019s important - data itself may come from internal data storage (which should be designed to handle structured and unstructured data) or external sources. Examples of data sources are PIM systems, enterprise applications, or external databases. Everything has to be managed in (not served by) CMS, which plays the role of the content hub. Experiences, once created, should be delivered to the end-users via another, dedicated environment - the runtime. At the same time, we want to avoid any runtime dependencies between runtime and authoring environments. Here the push model comes to play. Runtime should be designed to serve experiences at a true web scale. No more publishers, content synchronization, dispatchers, read-only replicas, and instance multiplication. What could be the ideal place to do that? The answer is simple, the cloud.","title":"THE IDEA"},{"location":"blog/2022/on-the-road-to-the-perfect-dxp/#the-solution","text":"A simplified diagram presents the options we have now. We can choose mature, feature-rich enterprise solutions (on the left), which are often part of closed, proprietary ecosystems, or choose lighter cloud-native alternatives (on the right). Mature CMS\u2019es seem to not keep up with the progress, because of server-oriented architectures which were designed in the 2000s to work on physical machines in dedicated data centers. New headless systems are limited and not complete solutions. They are lacking the integration layer, and the dynamic content is orchestrated directly in the browser, which calls microservices. What if we merge two and take the best from two worlds? Well, we did it and the result is WebSight . As we already know it has two major parts: WebSight CMS - enterprise-grade authoring system created using battle-tested technologies. Apache Sling, Apache Felix, and Apache Oak are a foundation that allows us to take advantage of years of experience from other players. At the same time, we had a chance to avoid many pitfalls and use only components which are ready to work in a container-oriented world. We took the advantage of being able to create our solution from the ground. WebSight Runtime - cloud-native architecture designed to serve experiences in a secure, scalable, and performant way. Its core is cloud-agnostic, but our first implementation is based on AWS. The difference with Jamstack is that the integration and rendering layers are in the cloud, not in a browser. Serverless functions give us more flexibility and fully replace the need for publisher instances at runtime.","title":"THE SOLUTION"},{"location":"blog/2022/on-the-road-to-the-perfect-dxp/#next-steps","text":"At the time of writing this post, WebSight is a functional product. We use it internally to create the first projects and work on the first public release. We\u2019ll be sharing here the insights into the architecture and development process, so stay tuned, because there's more to come.","title":"NEXT STEPS"},{"location":"blog/2022/quality-transformation-in-websight/","tags":["WebSight","DevOps","ci","qa"],"text":"Published at: 06.12.2022 by Maciej Laskowski and Radek Lawgmin Last Friday (02.12.2022) we had much pleasure speaking at the ConSelenium conference in Warsaw. And what was the presentation like? We started by introducing some basic concepts including what the DXP is and how it has grown out of the constraints CMS started to place in regard to building modern customer experience. Next, we talked about milestones in the history of WebSight - from the general idea for a new system, through developing a platform prototype, forming a product team responsible for delivering features to releasing the Early Preview version and its Community Edition. We mentioned those stages in the context of the challenges we came across while developing it, including solutions and tools we had used to address them. Solving problems and adding new items one by one made us evolve so much that now we think about this evolution in terms of the revolution. No doubt, automation turned out to be one of the key points here. Apart from making the whole team work more efficient it has also helped us to transform the QA role within it. More or less traditional quality assurance engineer started to be a quality assistant i.e. an advisor, educator and facilitator with some automation help replaced attended aspects of testing we struggled with before, especially during ineffective regression sessions. And now our quality assistant supports the dev team in their work in the field of testing and automation including strategy, designing, promoting best practices and addressing edge cases. Another point we touched was Selenium or rather why we preferred Cypress. Having a great number of positive experiences from the past, this time we needed a framework that we could launch instantly and that is ready to use and stable. It was also a matter of reaching a compromise and enabling each team member to cover the functionalities and bugfixes she/he delivered with automated checks and as a result growing the culture of developing automated checks within the team. We also gave a short demo of WebSight focused mainly on how and where we make use of automated checking tools when delivering a product. Being a team that builds platforms for delivering Digital Experience, we want the future project based on WebSight to take advantage of our developers' experience and make their start even easier. That\u2019s why starting a new project from our archetype includes fully integrated units and end-to-end (functional + visual) tests. With our approach you can easily launch a product in a cloud environment within a minute and have it validated with automated checks run as a part of the GitHub Actions pipeline. But that\u2019s not the end - we will be extending the template in the future to give the dev team even more ready-to-use quality patterns and techniques (e.g. such as CI configuration or automated performance checks as a part of CI). The QA transformation we did, turned out to be revolutionary but we know it is still not over yet, and there is so much more for us to do\u2026 If you want to read more about this topic, please visit Radek's post on Achieving quality with no dedicated QA Engineers . As for the conference itself, we must admit that the program board made an effort and chose really interesting and diverse subjects thanks to which the content was, as always, at a very high level and its organization was just excellent (the organizers really cared not only about the participants, but also made every effort to make the speakers feel at home). Thanks again, and stay tuned!","title":"Quality transformation in WebSight"},{"location":"blog/2022/shipping-and-developing-osgi-application-in-container/","tags":["WebSight","Containers","Docker","Sling"],"text":"Published at: 02.08.2022 by Maciej Laskowski Modern distributed software systems consist of multiple cooperating software applications. However, to run the application, the software we develop is only one part. The second one is the environment (e.g., JVM and OS). In this article, I will focus on building an OSGi application and explain five benefits we gained thanks to containerizing it. Modularity In the previous article \u201c Building OSGi applications with Sling Feature Model \u201d we discussed modularity on the bundles and features (micro) level. In this article, we analyze another level - application/container. Thanks to containers, we can benefit from micro-level modularity at the application (macro) level. Containers allow us to set up a new, minimal but self-sufficient environment to run the OSGi platform. And because it is so simple, we can prepare many single-purpose, containerized applications. Container images are immutable after creation. And here comes the first tradeoff - modification of applications is no longer an option when the container run. We are not able to use OSGi bundles pluggability in full. We install all necessary bundles in the build time, but no changes or additions are later allowed in the run time. But there is good news. Instead of adding more bundles to the existing applications, we can add entirely new specialized containers and plug them into the system. This approach improves the system architecture by keeping it modular and enables the delivery of the extra piece of functionality independently. Let\u2019s take an example. When running an OSGi environment on a VM was expensive, we were tempted to pack all features into a single application to minimize the setup and management costs. Thanks to containerization we create separate, specialized applications that can combine features and deliver limited functionality. That is a massive step towards a distributed system with applications that have their life cycle and can scale up and down independently. Deployability We already know that the container is immutable. That means all applications inside the container are immutable too. Preparing a container image requires extra effort (e.g., gathering all dependencies the application needs to run). However, we might use the Sling OSGi Feature Model in the case of OSGi applications and let it handle stuff like downloading dependencies. The gain here is confidence. Once the image is ready, it will behave the same way anywhere we deploy it. Of course, there are tradeoffs here too. We will no longer be able to hot reload/install bundles and change configs manually on the production setups. (We can still do it for development purposes, to improve developer experience). The question here is: do we want to do manual changes on production anymore? Imagine having 100 containers to update. Does applying change on all the containers manually even make sense? To be fair, one thing is best practices, and another is having the possibility to do it in emergencies. Let's think about how we can deal with this tradeoff. The answer can be automation. We can implement Continuous Integration and Delivery pipelines to perform changes quickly when necessary and roll back to the previous version in a matter of minutes (which is usually much faster than manual fixes in multiple places). Portability JVM and OSGi give us some level of portability. We can run an OSGi application independently of the operating system (assuming the compatibility of the Java version etc.). Containers give us another level of portability. Once built, we can run a container on our local machine, deploy it to Kubernetes (locally, on-premise, or in the cloud), or use managed container orchestration service, like AWS ECS, and stop worrying about the infrastructure underneath. Containers enable the portability of applications between cloud providers, acting as a runtime standard. Maintainability Another advantage of containers is that they make you think of applications as stateless. Containers should be able to stop or start at any moment for no reason. Since they are self-sufficient, no manual actions are required to spawn a new instance, and no additional downloads happen (it should be done already during the build phase and embedded into the image). That means, having a closed, immutable application, we can test it once and deploy it many times. Also, performing a rollback is an easy operation. From the system\u2019s perspective, it is switching to the previous application version like using an undo shortcut. All those factors make the containerized application easier to maintain. Security Last but not least - the security. Containers give us additional control over the environment like the Operating System and version/type of the Java. Managing it via Dockerfile is considered a standard and low-effort operation nowadays. Additionally, a lot of tooling on the market helps keep containers safe, like vulnerability scanners executed during Continuous Integration. Since we have all dependencies (JARs) inside the container, we can release applications regularly with security updates. There are also other best practices. For example, distroless containers minimize the attack vector (the fewer tools installed in the container, the fewer opportunities to hack in). On the other hand, using managed cloud services to run containers in comparison to running virtual machines limits significantly the number of topics we need to worry about (like patching OS, managing firewall, etc.). Summary In this article, I went through five main system qualities that we improved significantly after switching the development and delivery of our OSGi applications to containers. Containers are no silver bullet, and there were tradeoffs we had to sort out. Yet, we were able to keep the most important benefits of developing OSGi applications like high modularisation and good developer experience. In our situation, the benefits outweighed the costs of containerizing applications.","title":"Why we decided to ship and develop the OSGi application in containers"},{"location":"blog/2022/shipping-and-developing-osgi-application-in-container/#modularity","text":"In the previous article \u201c Building OSGi applications with Sling Feature Model \u201d we discussed modularity on the bundles and features (micro) level. In this article, we analyze another level - application/container. Thanks to containers, we can benefit from micro-level modularity at the application (macro) level. Containers allow us to set up a new, minimal but self-sufficient environment to run the OSGi platform. And because it is so simple, we can prepare many single-purpose, containerized applications. Container images are immutable after creation. And here comes the first tradeoff - modification of applications is no longer an option when the container run. We are not able to use OSGi bundles pluggability in full. We install all necessary bundles in the build time, but no changes or additions are later allowed in the run time. But there is good news. Instead of adding more bundles to the existing applications, we can add entirely new specialized containers and plug them into the system. This approach improves the system architecture by keeping it modular and enables the delivery of the extra piece of functionality independently. Let\u2019s take an example. When running an OSGi environment on a VM was expensive, we were tempted to pack all features into a single application to minimize the setup and management costs. Thanks to containerization we create separate, specialized applications that can combine features and deliver limited functionality. That is a massive step towards a distributed system with applications that have their life cycle and can scale up and down independently.","title":"Modularity"},{"location":"blog/2022/shipping-and-developing-osgi-application-in-container/#deployability","text":"We already know that the container is immutable. That means all applications inside the container are immutable too. Preparing a container image requires extra effort (e.g., gathering all dependencies the application needs to run). However, we might use the Sling OSGi Feature Model in the case of OSGi applications and let it handle stuff like downloading dependencies. The gain here is confidence. Once the image is ready, it will behave the same way anywhere we deploy it. Of course, there are tradeoffs here too. We will no longer be able to hot reload/install bundles and change configs manually on the production setups. (We can still do it for development purposes, to improve developer experience). The question here is: do we want to do manual changes on production anymore? Imagine having 100 containers to update. Does applying change on all the containers manually even make sense? To be fair, one thing is best practices, and another is having the possibility to do it in emergencies. Let's think about how we can deal with this tradeoff. The answer can be automation. We can implement Continuous Integration and Delivery pipelines to perform changes quickly when necessary and roll back to the previous version in a matter of minutes (which is usually much faster than manual fixes in multiple places).","title":"Deployability"},{"location":"blog/2022/shipping-and-developing-osgi-application-in-container/#portability","text":"JVM and OSGi give us some level of portability. We can run an OSGi application independently of the operating system (assuming the compatibility of the Java version etc.). Containers give us another level of portability. Once built, we can run a container on our local machine, deploy it to Kubernetes (locally, on-premise, or in the cloud), or use managed container orchestration service, like AWS ECS, and stop worrying about the infrastructure underneath. Containers enable the portability of applications between cloud providers, acting as a runtime standard.","title":"Portability"},{"location":"blog/2022/shipping-and-developing-osgi-application-in-container/#maintainability","text":"Another advantage of containers is that they make you think of applications as stateless. Containers should be able to stop or start at any moment for no reason. Since they are self-sufficient, no manual actions are required to spawn a new instance, and no additional downloads happen (it should be done already during the build phase and embedded into the image). That means, having a closed, immutable application, we can test it once and deploy it many times. Also, performing a rollback is an easy operation. From the system\u2019s perspective, it is switching to the previous application version like using an undo shortcut. All those factors make the containerized application easier to maintain.","title":"Maintainability"},{"location":"blog/2022/shipping-and-developing-osgi-application-in-container/#security","text":"Last but not least - the security. Containers give us additional control over the environment like the Operating System and version/type of the Java. Managing it via Dockerfile is considered a standard and low-effort operation nowadays. Additionally, a lot of tooling on the market helps keep containers safe, like vulnerability scanners executed during Continuous Integration. Since we have all dependencies (JARs) inside the container, we can release applications regularly with security updates. There are also other best practices. For example, distroless containers minimize the attack vector (the fewer tools installed in the container, the fewer opportunities to hack in). On the other hand, using managed cloud services to run containers in comparison to running virtual machines limits significantly the number of topics we need to worry about (like patching OS, managing firewall, etc.).","title":"Security"},{"location":"blog/2022/shipping-and-developing-osgi-application-in-container/#summary","text":"In this article, I went through five main system qualities that we improved significantly after switching the development and delivery of our OSGi applications to containers. Containers are no silver bullet, and there were tradeoffs we had to sort out. Yet, we were able to keep the most important benefits of developing OSGi applications like high modularisation and good developer experience. In our situation, the benefits outweighed the costs of containerizing applications.","title":"Summary"},{"location":"blog/2022/websight-cms-ce-1-0-0/","tags":["WebSight","release","CMS"],"text":"Published at: 29.09.2022 by WebSight Team Today we announce the release of WebSight CMS Community Edition 1.0, the first part of the WebSight Digital Experience Platform (DXP). You can start your adventure with WebSight CMS Quick Start Guide . What is WebSight CMS WebSight CMS is an enterprise-grade content management system created using battle-tested technologies that allow us to take advantage of years of experience from other players. At the same time, WebSight leverages a modern technology mix of cloud and containers. If you want to know more about the project's history, please visit the On the road to the perfect DXP blog post. Getting started All you need to start an adventure with WebSight CMS is Docker installed on your machine. Please visit the Authoring Quick Start Guide to experience our authoring, or dive into Developers Quick Start Guide to play the role of WebSight developer. Community WebSight CMS Community Edition is free to use for everyone ( terms of use ). To support us, you may follow the project at: github.com/websight-io/starter (feel free to star the repository, open issues , and start discussions ) linkedin.com/company/websight-io/ twitter.com/websight_io Thank you notes In addition to the contributions from Dynamic Solutions employees, we want to send special thanks to all early reviewers of the WebSight Alpha distribution, as well as many architects, project managers, and engineers who shared their thoughts and ideas about the product during various demo sessions. What\u2019s next It is just the beginning. Work on the CMS Community Edition will continue (you may expect regular bi-weekly releases). Items we have on our list to work on for the upcoming versions include: dynamic content - we work on easy-to-use and implement a framework for integrations with external data sources using WebSight, support for cloud environments (on-demand/ephemeral and long-living), GitHub template project with built-in Continuous Integration.","title":"WebSight CMS Community Edition 1.0.0 Release"},{"location":"blog/2022/websight-cms-ce-1-0-0/#what-is-websight-cms","text":"WebSight CMS is an enterprise-grade content management system created using battle-tested technologies that allow us to take advantage of years of experience from other players. At the same time, WebSight leverages a modern technology mix of cloud and containers. If you want to know more about the project's history, please visit the On the road to the perfect DXP blog post.","title":"What is WebSight CMS"},{"location":"blog/2022/websight-cms-ce-1-0-0/#getting-started","text":"All you need to start an adventure with WebSight CMS is Docker installed on your machine. Please visit the Authoring Quick Start Guide to experience our authoring, or dive into Developers Quick Start Guide to play the role of WebSight developer.","title":"Getting started"},{"location":"blog/2022/websight-cms-ce-1-0-0/#community","text":"WebSight CMS Community Edition is free to use for everyone ( terms of use ). To support us, you may follow the project at: github.com/websight-io/starter (feel free to star the repository, open issues , and start discussions ) linkedin.com/company/websight-io/ twitter.com/websight_io","title":"Community"},{"location":"blog/2022/websight-cms-ce-1-0-0/#thank-you-notes","text":"In addition to the contributions from Dynamic Solutions employees, we want to send special thanks to all early reviewers of the WebSight Alpha distribution, as well as many architects, project managers, and engineers who shared their thoughts and ideas about the product during various demo sessions.","title":"Thank you notes"},{"location":"blog/2022/websight-cms-ce-1-0-0/#whats-next","text":"It is just the beginning. Work on the CMS Community Edition will continue (you may expect regular bi-weekly releases). Items we have on our list to work on for the upcoming versions include: dynamic content - we work on easy-to-use and implement a framework for integrations with external data sources using WebSight, support for cloud environments (on-demand/ephemeral and long-living), GitHub template project with built-in Continuous Integration.","title":"What\u2019s next"},{"location":"blog/2022/websight-meets-codespaces/","tags":["WebSight","DXP","GH"],"text":"Published at: 01.12.2022 by Micha\u0142 Cukierman What is GitHub Codespaces GitHub Codespaces is a dev environment in the cloud. It looks very similar to Visual Studio Code and can be used to spin up fully configured dev environments in the cloud that starts in seconds. It comes together with preconfigured tooling, like Docker and Java, and it's all that we need to start working with WebSight instantly. Starting and running the project The easiest way to set up the project and start Dockerized ephemeral environment is to follow the steps: Go to https://github.com/websight-io/starter and fork the project Create Codespace on main branch The new window with the project on online IDE should open Check the Java version installed on the container using the command: java --version and update to Java 17 using SDKMan if needed sdk install java Go to the terminal and build the project with mvn clean install cd to environment/local and start WebSight with docker compose up Codespaces automatically forwards declared ports using the generated domain. In our case, the ports are: # Service 8080 WebSight CMS port 81 Nginx port for Luna project 82 Nginx port for Bulma project 80 Default Nginx port 5005 Java debug port 27017 MongoDB port Usage To open WebSight CMS and Nginx hosted sites, navigate to Ports tab and click on the link you want to visit. Author link is the one next to 8080 port New tab should open and you should be able to log in. Default credentials are wsadmin / wsadmin , but you can change it directly in Codespaces. After logging in you can use WebSight, edit and publish pages directly on GitHub: Summary Containerization brings us new possibilities, and setting up dev environments in seconds is just one of them. I really like the way Codespaces works, and I believe it can gain more popularity in the future.","title":"Develop WebSight with Codespaces"},{"location":"blog/2022/websight-meets-codespaces/#what-is-github-codespaces","text":"GitHub Codespaces is a dev environment in the cloud. It looks very similar to Visual Studio Code and can be used to spin up fully configured dev environments in the cloud that starts in seconds. It comes together with preconfigured tooling, like Docker and Java, and it's all that we need to start working with WebSight instantly.","title":"What is GitHub Codespaces"},{"location":"blog/2022/websight-meets-codespaces/#starting-and-running-the-project","text":"The easiest way to set up the project and start Dockerized ephemeral environment is to follow the steps: Go to https://github.com/websight-io/starter and fork the project Create Codespace on main branch The new window with the project on online IDE should open Check the Java version installed on the container using the command: java --version and update to Java 17 using SDKMan if needed sdk install java Go to the terminal and build the project with mvn clean install cd to environment/local and start WebSight with docker compose up Codespaces automatically forwards declared ports using the generated domain. In our case, the ports are: # Service 8080 WebSight CMS port 81 Nginx port for Luna project 82 Nginx port for Bulma project 80 Default Nginx port 5005 Java debug port 27017 MongoDB port","title":"Starting and running the project"},{"location":"blog/2022/websight-meets-codespaces/#usage","text":"To open WebSight CMS and Nginx hosted sites, navigate to Ports tab and click on the link you want to visit. Author link is the one next to 8080 port New tab should open and you should be able to log in. Default credentials are wsadmin / wsadmin , but you can change it directly in Codespaces. After logging in you can use WebSight, edit and publish pages directly on GitHub:","title":"Usage"},{"location":"blog/2022/websight-meets-codespaces/#summary","text":"Containerization brings us new possibilities, and setting up dev environments in seconds is just one of them. I really like the way Codespaces works, and I believe it can gain more popularity in the future.","title":"Summary"},{"location":"community/","text":"Community Roadmap Are you interested in what is coming? See our public roadmap . The roadmap presents what features we are working on and ideas we are exploring and analyzing. Have any suggestions, comments, or questions? Share them via GitHub discussions . Support To support WebSight and engage with our community please use the following channels: WebSight Starter repository feel free to star the repository to be notified about new releases, Project issues to request new feature or let us know about any bugs you find, Project discussions to ask questions, share ideas or disucss use cases, LinkedIn/websight-io to follow us on LinkedIn, @websight_io to follow us on Twitter. Updates WebSight blog page is the place you can find such information like articles, technology insights and release announcements. We recommend also to follow our @websight_io Twitter and LinkedIn/websight-io accounts if you are interested in news and updates notifications.","title":"Community"},{"location":"community/#community","text":"","title":"Community"},{"location":"community/#roadmap","text":"Are you interested in what is coming? See our public roadmap . The roadmap presents what features we are working on and ideas we are exploring and analyzing. Have any suggestions, comments, or questions? Share them via GitHub discussions .","title":"Roadmap"},{"location":"community/#support","text":"To support WebSight and engage with our community please use the following channels: WebSight Starter repository feel free to star the repository to be notified about new releases, Project issues to request new feature or let us know about any bugs you find, Project discussions to ask questions, share ideas or disucss use cases, LinkedIn/websight-io to follow us on LinkedIn, @websight_io to follow us on Twitter.","title":"Support"},{"location":"community/#updates","text":"WebSight blog page is the place you can find such information like articles, technology insights and release announcements. We recommend also to follow our @websight_io Twitter and LinkedIn/websight-io accounts if you are interested in news and updates notifications.","title":"Updates"},{"location":"docs/authors/component-libs/howlite/","text":"Howlite Howlite is a sample component library for WebSight. We used this collection to prepare a demo site called Luna. Our WebSight Docker distribution contains both of them. Check the Getting Started page for information on how to run a local instance to explore more on Howlite and Luna. Components Authoring Guides Accordion and Accordion Item Cards List and Card Item Container CTA and CTAs List Image Logo Cloud Page Section Rich Text Editor Title Quote Layouts List of predefined layouts Grid Resize functionality and breakpoints description","title":"Howlite"},{"location":"docs/authors/component-libs/howlite/#howlite","text":"Howlite is a sample component library for WebSight. We used this collection to prepare a demo site called Luna. Our WebSight Docker distribution contains both of them. Check the Getting Started page for information on how to run a local instance to explore more on Howlite and Luna.","title":"Howlite"},{"location":"docs/authors/component-libs/howlite/#components-authoring-guides","text":"Accordion and Accordion Item Cards List and Card Item Container CTA and CTAs List Image Logo Cloud Page Section Rich Text Editor Title Quote","title":"Components Authoring Guides"},{"location":"docs/authors/component-libs/howlite/#layouts","text":"List of predefined layouts","title":"Layouts"},{"location":"docs/authors/component-libs/howlite/#grid","text":"Resize functionality and breakpoints description","title":"Grid"},{"location":"docs/authors/component-libs/howlite/accordion/","text":"Accordion & Accordion Item An Accordion is an interactive component that can have multiple Accordion Items inside. Each Accordion Item is 'collapsed' by default, and only a title is visible. To open the accordion item, switch editor to the \"Preview\" mode and click on heading. Usage Drag & drop Accordion to a Page Section. Accordion will be prefilled with 3 initial Accordion Items. You can drag & drop additional Accordion Item to Accordion component, or delete unneeded items. You can also move Accordion Items up/down to achieve expected items order. Authorable properties Click (\"Edit\" icon) on Accordion's Item to see its properties: Title - the Accordion's heading. Content - text to be displayed inside the Accordion Item. Click (\"Edit\" icon) on the Accordion component to resize the Accordion as any other component using the Layout tab. (See grid description for details.) Rendered component An example of FAQ Accordion with one item open (in preview mode):","title":"Accordion & Accordion Item"},{"location":"docs/authors/component-libs/howlite/accordion/#accordion-accordion-item","text":"An Accordion is an interactive component that can have multiple Accordion Items inside. Each Accordion Item is 'collapsed' by default, and only a title is visible. To open the accordion item, switch editor to the \"Preview\" mode and click on heading.","title":"Accordion &amp; Accordion Item"},{"location":"docs/authors/component-libs/howlite/accordion/#usage","text":"Drag & drop Accordion to a Page Section. Accordion will be prefilled with 3 initial Accordion Items. You can drag & drop additional Accordion Item to Accordion component, or delete unneeded items. You can also move Accordion Items up/down to achieve expected items order.","title":"Usage"},{"location":"docs/authors/component-libs/howlite/accordion/#authorable-properties","text":"Click (\"Edit\" icon) on Accordion's Item to see its properties: Title - the Accordion's heading. Content - text to be displayed inside the Accordion Item. Click (\"Edit\" icon) on the Accordion component to resize the Accordion as any other component using the Layout tab. (See grid description for details.)","title":"Authorable properties"},{"location":"docs/authors/component-libs/howlite/accordion/#rendered-component","text":"An example of FAQ Accordion with one item open (in preview mode):","title":"Rendered component"},{"location":"docs/authors/component-libs/howlite/cards-list/","text":"Cards List & Card Item The Cards List component can be used to arrange multiple card components on a page. If you have 20 cards, you may want to display them in a grid with 4 items or 5 items per row or as a slider with 4 or 5 cards per slide. A Cards List component makes it easy to quickly switch between different layouts. Cards may contain an image, text and a CTA. Usage Drag & drop the Card List component to a Page section. Cards List is prefilled with 3 initial Card Items. You can drag & drop additional Card Item to the Card List component, or delete unneeded Card Items. Authorable properties Click (\"Edit\" icon) to see all available Cards List properties: You can check an option Display as a slider to switch on the slider mode. The slider is fully responsive and supports touch and swipe navigation as well as mouse drag for the desktop. You can select the Heading level for the Cards headings. Choose the level that is most appropriate from SEO and accessibility perspective (options H1 - H6). You can select the Heading size to increase or decrease cards headings' font size. You can change Items per row for each breakpoint separately. if the slider option is selected, this number will control how many Cards are visible at once (on each slide). You can set the Style for the Cards List using the Style tab. Click (\"Edit\" icon) on Card's Item to see its properties: On the General tab you can add: Title - the Card's Item heading. Content - the text to be displayed in the Card Item. On the Image tab you can add: an Image - you can open the left assets panel and drag&drop an image to the asset section; additionally, you can provide an alternative text (alt) to describe an image. Leave it blank only when the image is purely decorative. You can add CTA to the Card Item as any other CTA component using the Card CTA tab. (See CTA description for details.) Rendered component Here is an example of a Cards List component with 2 Card Items inside. 2 items per row are set. Each Card consists of an image, text and a text link: A Cards List with 5 Card Items and 3 items per row set: A Cards List with 5 Card Items, 3 items per row set and selected slider mode (user can drag cards left/right to see previous or next items): Cards List with three Items with \"Text Centered\" Style variant selected (On Cards List level):","title":"Cards List & Card Item"},{"location":"docs/authors/component-libs/howlite/cards-list/#cards-list-card-item","text":"The Cards List component can be used to arrange multiple card components on a page. If you have 20 cards, you may want to display them in a grid with 4 items or 5 items per row or as a slider with 4 or 5 cards per slide. A Cards List component makes it easy to quickly switch between different layouts. Cards may contain an image, text and a CTA.","title":"Cards List &amp; Card Item"},{"location":"docs/authors/component-libs/howlite/cards-list/#usage","text":"Drag & drop the Card List component to a Page section. Cards List is prefilled with 3 initial Card Items. You can drag & drop additional Card Item to the Card List component, or delete unneeded Card Items.","title":"Usage"},{"location":"docs/authors/component-libs/howlite/cards-list/#authorable-properties","text":"Click (\"Edit\" icon) to see all available Cards List properties: You can check an option Display as a slider to switch on the slider mode. The slider is fully responsive and supports touch and swipe navigation as well as mouse drag for the desktop. You can select the Heading level for the Cards headings. Choose the level that is most appropriate from SEO and accessibility perspective (options H1 - H6). You can select the Heading size to increase or decrease cards headings' font size. You can change Items per row for each breakpoint separately. if the slider option is selected, this number will control how many Cards are visible at once (on each slide). You can set the Style for the Cards List using the Style tab. Click (\"Edit\" icon) on Card's Item to see its properties: On the General tab you can add: Title - the Card's Item heading. Content - the text to be displayed in the Card Item. On the Image tab you can add: an Image - you can open the left assets panel and drag&drop an image to the asset section; additionally, you can provide an alternative text (alt) to describe an image. Leave it blank only when the image is purely decorative. You can add CTA to the Card Item as any other CTA component using the Card CTA tab. (See CTA description for details.)","title":"Authorable properties"},{"location":"docs/authors/component-libs/howlite/cards-list/#rendered-component","text":"Here is an example of a Cards List component with 2 Card Items inside. 2 items per row are set. Each Card consists of an image, text and a text link: A Cards List with 5 Card Items and 3 items per row set: A Cards List with 5 Card Items, 3 items per row set and selected slider mode (user can drag cards left/right to see previous or next items): Cards List with three Items with \"Text Centered\" Style variant selected (On Cards List level):","title":"Rendered component"},{"location":"docs/authors/component-libs/howlite/container/","text":"Container component Container component is used to group content together (inside a Page Section component ). Container renders a simple div html tag without extra styling. Usage If you drag & drop a single Page Section to the page, you will see a default placeholder. Multiple columns layouts By using containers inside a page section, you can achieve multiple columns layouts. To see this in action, you can drag & drop the 4 Columns predefined layout from the \"Empty Sections\" group. (See the layouts page for details regarding predefined sections) This layout consists of a Page Section component with 4 container components inside. Each container is resized to use 3 out of 12 columns. For resize options description please see the grid page. Authorable properties Click (\"Edit\" icon) on the Container component to see its all editable properties. you can drag & drop an image from the left assets panel, to add a background image (for each breakpoint separately). each breakpoint's asset will be rendered on this breakpoint only. For example, if you leave M breakpoint image blank, nothing will be rendered on tablet resolutions.","title":"Container component"},{"location":"docs/authors/component-libs/howlite/container/#container-component","text":"Container component is used to group content together (inside a Page Section component ). Container renders a simple div html tag without extra styling.","title":"Container component"},{"location":"docs/authors/component-libs/howlite/container/#usage","text":"If you drag & drop a single Page Section to the page, you will see a default placeholder.","title":"Usage"},{"location":"docs/authors/component-libs/howlite/container/#multiple-columns-layouts","text":"By using containers inside a page section, you can achieve multiple columns layouts. To see this in action, you can drag & drop the 4 Columns predefined layout from the \"Empty Sections\" group. (See the layouts page for details regarding predefined sections) This layout consists of a Page Section component with 4 container components inside. Each container is resized to use 3 out of 12 columns. For resize options description please see the grid page.","title":"Multiple columns layouts"},{"location":"docs/authors/component-libs/howlite/container/#authorable-properties","text":"Click (\"Edit\" icon) on the Container component to see its all editable properties. you can drag & drop an image from the left assets panel, to add a background image (for each breakpoint separately). each breakpoint's asset will be rendered on this breakpoint only. For example, if you leave M breakpoint image blank, nothing will be rendered on tablet resolutions.","title":"Authorable properties"},{"location":"docs/authors/component-libs/howlite/cta/","text":"CTA & CTAs List components CTA component renders a single link (an anchor html tag) with look & feel of a button or text link (look & feel is controlled by style variants ). Usage If you need just a single CTA, you can add it directly to a page section or container. To render multiple CTAs in one row, use CTAs List component first, and add buttons there. Authorable properties Click (\"Edit\" icon) to see all CTA's component's properties: You can provide a Text (label) for the CTA add an URL . It can be either an external link starting with http(s) or an internal link. Type / to enable auto suggestions of internal pages. optionally, you can select if the link should be opened in a new tab , and if it should have an additional icon . Rendered component You can see an example of 2 CTA components inside a CTA list container below: Please note that the CTA component does not have grid options. The width of CTA depends on its text width, and is not aligned to the grid. If multiple CTAs are added directly to a page section, they will stack one below another. (In order to align buttons in one row use the CTA list component.) CTA variants Check the Style tab in the authoring dialog to see the available style variants for a CTA component.","title":"CTA & CTAs List components"},{"location":"docs/authors/component-libs/howlite/cta/#cta-ctas-list-components","text":"CTA component renders a single link (an anchor html tag) with look & feel of a button or text link (look & feel is controlled by style variants ).","title":"CTA &amp; CTAs List components"},{"location":"docs/authors/component-libs/howlite/cta/#usage","text":"If you need just a single CTA, you can add it directly to a page section or container. To render multiple CTAs in one row, use CTAs List component first, and add buttons there.","title":"Usage"},{"location":"docs/authors/component-libs/howlite/cta/#authorable-properties","text":"Click (\"Edit\" icon) to see all CTA's component's properties: You can provide a Text (label) for the CTA add an URL . It can be either an external link starting with http(s) or an internal link. Type / to enable auto suggestions of internal pages. optionally, you can select if the link should be opened in a new tab , and if it should have an additional icon .","title":"Authorable properties"},{"location":"docs/authors/component-libs/howlite/cta/#rendered-component","text":"You can see an example of 2 CTA components inside a CTA list container below: Please note that the CTA component does not have grid options. The width of CTA depends on its text width, and is not aligned to the grid. If multiple CTAs are added directly to a page section, they will stack one below another. (In order to align buttons in one row use the CTA list component.)","title":"Rendered component"},{"location":"docs/authors/component-libs/howlite/cta/#cta-variants","text":"Check the Style tab in the authoring dialog to see the available style variants for a CTA component.","title":"CTA variants"},{"location":"docs/authors/component-libs/howlite/grid/","text":"Grid Resize options Almost all components in Howlite can be resized (inside a Page section component ). In order to resize an Image or Container click (\"Edit\" icon) for the selected component and open the \"Layout\" tab in the dialog. For each breakpoint separately, you can control: the Offset property: for example, if you set it to \"1 Column\" on L breakpoint, the component will be moved 1 column to the right side. the Width property: for example, if you set it to \"6 Columns\" on L breakpoint, the component will be 6 columns wide on the desktop. The above settings will result in the following container size and position: Breakpoints definition Across the Howlite projects the following breakpoints are used: L Breakpoint : 970px and above M Breakpoint : 768px - 969px S Breakpoint : 0 - 767px Additional notes In Howlite the following components intentionally don't have \"resize\" options: CTA - buttons width depends only on its label width Page Section - it's always 12 columns wide in Howlite (but you can resize a container inside if needed)","title":"Grid"},{"location":"docs/authors/component-libs/howlite/grid/#grid","text":"","title":"Grid"},{"location":"docs/authors/component-libs/howlite/grid/#resize-options","text":"Almost all components in Howlite can be resized (inside a Page section component ). In order to resize an Image or Container click (\"Edit\" icon) for the selected component and open the \"Layout\" tab in the dialog. For each breakpoint separately, you can control: the Offset property: for example, if you set it to \"1 Column\" on L breakpoint, the component will be moved 1 column to the right side. the Width property: for example, if you set it to \"6 Columns\" on L breakpoint, the component will be 6 columns wide on the desktop. The above settings will result in the following container size and position:","title":"Resize options"},{"location":"docs/authors/component-libs/howlite/grid/#breakpoints-definition","text":"Across the Howlite projects the following breakpoints are used: L Breakpoint : 970px and above M Breakpoint : 768px - 969px S Breakpoint : 0 - 767px","title":"Breakpoints definition"},{"location":"docs/authors/component-libs/howlite/grid/#additional-notes","text":"In Howlite the following components intentionally don't have \"resize\" options: CTA - buttons width depends only on its label width Page Section - it's always 12 columns wide in Howlite (but you can resize a container inside if needed)","title":"Additional notes"},{"location":"docs/authors/component-libs/howlite/image/","text":"Image component Image components renders and img or picture html tag, with an optional link and alt attribute. Usage Drag & drop image component to a Page section. You will see a default image placeholder. (It is visible in edit mode only). Authorable properties Click (\"Edit\" icon) to see all Image component's properties: You can open the left assets panel and drag & drop an image to the L breakpoint asset section. If only the L breakpoint asset is provided, an img html tag will be rendered with the provided image on all breakpoints. (See breakpoints definition for L, M, S breakpoints width) If additionally the M breakpoint asset is provided, a picture html tag will be rendered and M asset will be used on M and S breakpoints. If additionally the S breakpoint asset is provided, a picture html tag will be rendered and S asset will be used on S breakpoint Please note that only the L breakpoint is required for an image to be rendered on a published page. M and S assets are optional. You can additionally provide an alternative text (alt) to describe the image. Leave it blank only when the image is purely decorative. Optionally you can wrap the image in a link Rendered component If you add an image that is wider than image container, it will have the container width and height respecting the asset ratio. You can see an example of an image with 12 columns width below: You can resize the image container by using the grid options in the layout tab of authoring dialog (See grid description for details). You can see an example of 2-columns-wide image below. Image is shrinked to 2 columns width, and it's height respects the orginal asset ratio. Additional notes When an asset has been deleted and the path to image is no longer valid, a broken icon of an image will be displayed in editor:","title":"Image component"},{"location":"docs/authors/component-libs/howlite/image/#image-component","text":"Image components renders and img or picture html tag, with an optional link and alt attribute.","title":"Image component"},{"location":"docs/authors/component-libs/howlite/image/#usage","text":"Drag & drop image component to a Page section. You will see a default image placeholder. (It is visible in edit mode only).","title":"Usage"},{"location":"docs/authors/component-libs/howlite/image/#authorable-properties","text":"Click (\"Edit\" icon) to see all Image component's properties: You can open the left assets panel and drag & drop an image to the L breakpoint asset section. If only the L breakpoint asset is provided, an img html tag will be rendered with the provided image on all breakpoints. (See breakpoints definition for L, M, S breakpoints width) If additionally the M breakpoint asset is provided, a picture html tag will be rendered and M asset will be used on M and S breakpoints. If additionally the S breakpoint asset is provided, a picture html tag will be rendered and S asset will be used on S breakpoint Please note that only the L breakpoint is required for an image to be rendered on a published page. M and S assets are optional. You can additionally provide an alternative text (alt) to describe the image. Leave it blank only when the image is purely decorative. Optionally you can wrap the image in a link","title":"Authorable properties"},{"location":"docs/authors/component-libs/howlite/image/#rendered-component","text":"If you add an image that is wider than image container, it will have the container width and height respecting the asset ratio. You can see an example of an image with 12 columns width below: You can resize the image container by using the grid options in the layout tab of authoring dialog (See grid description for details). You can see an example of 2-columns-wide image below. Image is shrinked to 2 columns width, and it's height respects the orginal asset ratio.","title":"Rendered component"},{"location":"docs/authors/component-libs/howlite/image/#additional-notes","text":"When an asset has been deleted and the path to image is no longer valid, a broken icon of an image will be displayed in editor:","title":"Additional notes"},{"location":"docs/authors/component-libs/howlite/layouts/","text":"Layouts Layouts are group of components with predefined properties. They are used to define a specific page layout. They can be drag & dropped on a page instead of single components to speed up authoring process. Usage To try it out open a blank page, select a Layouts tab in the left-side panel and drag and drop a 3 columns layout to the main page content. A page section with 3 resized containers will be added on a page. All components that are added on a page with a given layout can be modified, moved or removed (same as regular components). Type of Layouts in Howlite In howlite therea are 2 groups of layouts: Empty Sections - used to define 1-4 empty columns (containers within a page section): Filled Sections - more complex page sections with some content inside, for example: Call To Action (a page section with full-width image, title and CTAs) Hero (a page section with a title, an image and a mouse icon at the bottom; used at the top of a page) Full Width Image (a page section with a full-width image, a title on the left, and text on the right side) Image Left (a page section with an image on the left, and text on the right side) Image Right (a page section with an image on the right, and text on the left side)","title":"Layouts"},{"location":"docs/authors/component-libs/howlite/layouts/#layouts","text":"Layouts are group of components with predefined properties. They are used to define a specific page layout. They can be drag & dropped on a page instead of single components to speed up authoring process.","title":"Layouts"},{"location":"docs/authors/component-libs/howlite/layouts/#usage","text":"To try it out open a blank page, select a Layouts tab in the left-side panel and drag and drop a 3 columns layout to the main page content. A page section with 3 resized containers will be added on a page. All components that are added on a page with a given layout can be modified, moved or removed (same as regular components).","title":"Usage"},{"location":"docs/authors/component-libs/howlite/layouts/#type-of-layouts-in-howlite","text":"In howlite therea are 2 groups of layouts: Empty Sections - used to define 1-4 empty columns (containers within a page section): Filled Sections - more complex page sections with some content inside, for example: Call To Action (a page section with full-width image, title and CTAs) Hero (a page section with a title, an image and a mouse icon at the bottom; used at the top of a page) Full Width Image (a page section with a full-width image, a title on the left, and text on the right side) Image Left (a page section with an image on the left, and text on the right side) Image Right (a page section with an image on the right, and text on the left side)","title":"Type of Layouts in Howlite"},{"location":"docs/authors/component-libs/howlite/logo-cloud/","text":"Logo Cloud component Logo Cloud is a container component that is used to display a row of small images (logos). You can add multiple images components inside it. Usage Drag & drop a Logo Cloud component into a Page section. By default, 3 images placeholders will be rendered inside. Authorable properties Click (\"Edit\" icon) to see all Logo Cloud component's properties: You can resize the Logo Cloud as any other component using the Layout tab. (See grid description for details.) Rendered component Logo Cloud with filled images:","title":"Logo Cloud component"},{"location":"docs/authors/component-libs/howlite/logo-cloud/#logo-cloud-component","text":"Logo Cloud is a container component that is used to display a row of small images (logos). You can add multiple images components inside it.","title":"Logo Cloud component"},{"location":"docs/authors/component-libs/howlite/logo-cloud/#usage","text":"Drag & drop a Logo Cloud component into a Page section. By default, 3 images placeholders will be rendered inside.","title":"Usage"},{"location":"docs/authors/component-libs/howlite/logo-cloud/#authorable-properties","text":"Click (\"Edit\" icon) to see all Logo Cloud component's properties: You can resize the Logo Cloud as any other component using the Layout tab. (See grid description for details.)","title":"Authorable properties"},{"location":"docs/authors/component-libs/howlite/logo-cloud/#rendered-component","text":"Logo Cloud with filled images:","title":"Rendered component"},{"location":"docs/authors/component-libs/howlite/page-section/","text":"Page Section component The Page Section component renders a section html tag with a top & bottom padding. It can only be added directly to the Main Content parsys. Usage If you drag & drop a single Page Section to the page, you will see a default placeholder. Page Section components in the Howlite project always have 12 columns. The components added inside can be resized to 1-12 columns. If you need to resize or group content inside a page section use a Container component . Authorable properties Click (\"Edit\" icon) to see all Page Section component's editable properties. you can drag & drop an image from the left assets panel, to add a background image (for each breakpoint separately). each breakpoint's asset will be rendered on this breakpoint only. For example, if you leave M breakpoint image blank, nothing will be rendered on tablet resolutions. Page Section variants Check the Style tab in the authoring dialog to see the available style variants for the Page Section component. Here is an example of a \"Hero with mouse icon\" page section (with some content inside): Please note that Page Section's variants work only with properly structured content inside. In order to speed up the page assembly, Howlite project provides predefined page sections in the layouts left side panel. You can preview different types of Page Section variants with properly structured content, by drag & dropping one of the predefined layouts below to a page. See the layouts page for details.","title":"Page Section component"},{"location":"docs/authors/component-libs/howlite/page-section/#page-section-component","text":"The Page Section component renders a section html tag with a top & bottom padding. It can only be added directly to the Main Content parsys.","title":"Page Section component"},{"location":"docs/authors/component-libs/howlite/page-section/#usage","text":"If you drag & drop a single Page Section to the page, you will see a default placeholder. Page Section components in the Howlite project always have 12 columns. The components added inside can be resized to 1-12 columns. If you need to resize or group content inside a page section use a Container component .","title":"Usage"},{"location":"docs/authors/component-libs/howlite/page-section/#authorable-properties","text":"Click (\"Edit\" icon) to see all Page Section component's editable properties. you can drag & drop an image from the left assets panel, to add a background image (for each breakpoint separately). each breakpoint's asset will be rendered on this breakpoint only. For example, if you leave M breakpoint image blank, nothing will be rendered on tablet resolutions.","title":"Authorable properties"},{"location":"docs/authors/component-libs/howlite/page-section/#page-section-variants","text":"Check the Style tab in the authoring dialog to see the available style variants for the Page Section component. Here is an example of a \"Hero with mouse icon\" page section (with some content inside): Please note that Page Section's variants work only with properly structured content inside. In order to speed up the page assembly, Howlite project provides predefined page sections in the layouts left side panel. You can preview different types of Page Section variants with properly structured content, by drag & dropping one of the predefined layouts below to a page. See the layouts page for details.","title":"Page Section variants"},{"location":"docs/authors/component-libs/howlite/quote/","text":"Quote Component A Quote component displays a block quote with styled quotation marks, quote text, author's name & description. Additionally, it allows including the author's image. Usage Drag & drop Quote to a Page Section. By default a simple quote with \"lorem ipsum\" text is visible. Authorable properties Click (\"Edit\" icon) on the Quote component to see its properties On the General tab you can add: Text - the main content of the quote Author's Name Author's Description Author's Image - if you switch on the toggle additional properties will be visible: Asset section - from the left assets panel you can drag&drop an image to the asset section Additionally, you can provide an alternative text (alt) to describe an image. Leave it blank only when the image is purely decorative. You can change the Style for the Quote using the Style tab. Smaller variant will decrease the quote's font-size. You can also resize the Quote as any other component using the Layout tab. (See grid description for details.) Rendered component An example Quote:","title":"Quote Component"},{"location":"docs/authors/component-libs/howlite/quote/#quote-component","text":"A Quote component displays a block quote with styled quotation marks, quote text, author's name & description. Additionally, it allows including the author's image.","title":"Quote Component"},{"location":"docs/authors/component-libs/howlite/quote/#usage","text":"Drag & drop Quote to a Page Section. By default a simple quote with \"lorem ipsum\" text is visible.","title":"Usage"},{"location":"docs/authors/component-libs/howlite/quote/#authorable-properties","text":"Click (\"Edit\" icon) on the Quote component to see its properties On the General tab you can add: Text - the main content of the quote Author's Name Author's Description Author's Image - if you switch on the toggle additional properties will be visible: Asset section - from the left assets panel you can drag&drop an image to the asset section Additionally, you can provide an alternative text (alt) to describe an image. Leave it blank only when the image is purely decorative. You can change the Style for the Quote using the Style tab. Smaller variant will decrease the quote's font-size. You can also resize the Quote as any other component using the Layout tab. (See grid description for details.)","title":"Authorable properties"},{"location":"docs/authors/component-libs/howlite/quote/#rendered-component","text":"An example Quote:","title":"Rendered component"},{"location":"docs/authors/component-libs/howlite/rte/","text":"RTE Component A Rich Text Editor allows editors to create text content (paragraphs with headings, bullet lists, links and more) across pages. Usage Drag & drop RTE component to a Page Section. A simple paragraph with \"lorem ipsum\" content will be rendered on a page: Authorable properties Click (\"Edit\" icon) on the RTE component to see its properties: On the General tab, you can add: Text - with a wide range of functionalities. You can: add a new Paragraph or Heading (with level 1 to 6) select some words and make it bold / italic / underlined or crossed. add a link create bullet points or ordered list align text to the left / center / right or with \"justify\" option. add a new line ( br html tag). Please note that pressing \"Enter\" tab in RTE results in a new paragraph. If you click \"New Line\" Icon - new line will be added inside the same paragraph. clear formatting You can set the Style for the RTE using the Style tab: You can resize the RTE as any other component using the Layout tab. (See grid description for details.) Rendered component RTE with Default style variant: RTE with Checked bullet points style variant:","title":"RTE Component"},{"location":"docs/authors/component-libs/howlite/rte/#rte-component","text":"A Rich Text Editor allows editors to create text content (paragraphs with headings, bullet lists, links and more) across pages.","title":"RTE Component"},{"location":"docs/authors/component-libs/howlite/rte/#usage","text":"Drag & drop RTE component to a Page Section. A simple paragraph with \"lorem ipsum\" content will be rendered on a page:","title":"Usage"},{"location":"docs/authors/component-libs/howlite/rte/#authorable-properties","text":"Click (\"Edit\" icon) on the RTE component to see its properties: On the General tab, you can add: Text - with a wide range of functionalities. You can: add a new Paragraph or Heading (with level 1 to 6) select some words and make it bold / italic / underlined or crossed. add a link create bullet points or ordered list align text to the left / center / right or with \"justify\" option. add a new line ( br html tag). Please note that pressing \"Enter\" tab in RTE results in a new paragraph. If you click \"New Line\" Icon - new line will be added inside the same paragraph. clear formatting You can set the Style for the RTE using the Style tab: You can resize the RTE as any other component using the Layout tab. (See grid description for details.)","title":"Authorable properties"},{"location":"docs/authors/component-libs/howlite/rte/#rendered-component","text":"RTE with Default style variant: RTE with Checked bullet points style variant:","title":"Rendered component"},{"location":"docs/authors/component-libs/howlite/title/","text":"Title component Title component can be used to add a page or section title. Usage Drag & drop title component to a Page section. By default, a placeholder with \"Add your title here\" text is visible: Authorable properties Click (\"Edit\" icon) to see all title component's properties: You can select Title level that is most appropriate from SEO and accessibility perspective (options H1 - H6). You can select Title size to increase or decrease font-size Insert Title text Optionally, you can add an Overline (kicker) above the main title You can resize the title as any other component using the Layout tab. (See grid description for details.) Rendered component","title":"Title component"},{"location":"docs/authors/component-libs/howlite/title/#title-component","text":"Title component can be used to add a page or section title.","title":"Title component"},{"location":"docs/authors/component-libs/howlite/title/#usage","text":"Drag & drop title component to a Page section. By default, a placeholder with \"Add your title here\" text is visible:","title":"Usage"},{"location":"docs/authors/component-libs/howlite/title/#authorable-properties","text":"Click (\"Edit\" icon) to see all title component's properties: You can select Title level that is most appropriate from SEO and accessibility perspective (options H1 - H6). You can select Title size to increase or decrease font-size Insert Title text Optionally, you can add an Overline (kicker) above the main title You can resize the title as any other component using the Layout tab. (See grid description for details.)","title":"Authorable properties"},{"location":"docs/authors/component-libs/howlite/title/#rendered-component","text":"","title":"Rendered component"},{"location":"docs/developers/architecture/","text":"Architecture The diagram below represents the WebSight CMS high-level logical architecture. Content authors use CMS to create an experience by managing content, assets and pages (layout). Once the experience is ready to go public, authors push (in other words, publish) it to the backend experience storage . On the frontend, the experience is delivered to the site visitors . They call the web server , which pulls static HTML files/assets/JavaScript/ CSS scripts from the backened experience storage and serves them immediately. Note The experience storage has no access to CMS. That means that if, for example, there is no page in the storage, then site visitors see a 404 message. The above description is called a push model and assumes that the pages are prepared for the user in advance. Note that within this architecture, it is possible to switch off the CMS part, which has no impact on delivering pages. Our CMS is a Java -based OSGi application ( WebSight CMS CE ) with a NoSQL database ( MongoDB ). WebSight CMS supports content management and the generation of static HTML pages. MongoDB database stores content and assets. Note Multiple instances of WebSight CMS can connect to MongoDB, which supports online deployments and enables CMS scalability. Containers We use containers to ship WebSight CMS for deployment on multiple environments, from developers' local computers to public clouds. Read our \"Why we decided to ship and develop the OSGi application in containers\" article to understand the benefits of containers in our stack. Once developers create a WebSight project using the Maven archetype , they produce the following Docker images: An NGINX image (web server) with addtional project-specific configurations A customized CMS image with core WebSight CMS and project-specific modules and configurations Docker Compose With more than one container in the platform, we need a tool for defining and running multi-container Docker applications. With Compose, we can use the Compose YAML file model to: Configure all platform components ( services ) Enable communication between them Handle data persistance with volumes The following diagram presents all WebSight CMS containers and volumes together. The diagram above reflects the containers' logical architecture. Docker Compose configuration specifies the following services: The nginx service (experience delivery) The cms service (content management and pages generation) The mongo service (content database) Services use volumes to save durable data outside the container (note that this means that when the container is destroyed and reloaded, all data from the previous container instance is lost). We specify the following volumes: The experience storage volume is shared by NGINX (read) and WebSight CMS (write) containers The content volume keeps content and assets The logs volume keeps all WebSight CMS application logs Environments Working with containers enables consistency and standardization. With Docker, we can use the same tooling to work locally as well as to deploy production environments to the cloud. For example: When using Docker Compose, the same command is responsible for creating local and cloud instances ( docker compose up ). Read more about Docker Compose Amazon Elastic Container Service integration .","title":"Architecture"},{"location":"docs/developers/architecture/#architecture","text":"The diagram below represents the WebSight CMS high-level logical architecture. Content authors use CMS to create an experience by managing content, assets and pages (layout). Once the experience is ready to go public, authors push (in other words, publish) it to the backend experience storage . On the frontend, the experience is delivered to the site visitors . They call the web server , which pulls static HTML files/assets/JavaScript/ CSS scripts from the backened experience storage and serves them immediately. Note The experience storage has no access to CMS. That means that if, for example, there is no page in the storage, then site visitors see a 404 message. The above description is called a push model and assumes that the pages are prepared for the user in advance. Note that within this architecture, it is possible to switch off the CMS part, which has no impact on delivering pages. Our CMS is a Java -based OSGi application ( WebSight CMS CE ) with a NoSQL database ( MongoDB ). WebSight CMS supports content management and the generation of static HTML pages. MongoDB database stores content and assets. Note Multiple instances of WebSight CMS can connect to MongoDB, which supports online deployments and enables CMS scalability.","title":"Architecture"},{"location":"docs/developers/architecture/#containers","text":"We use containers to ship WebSight CMS for deployment on multiple environments, from developers' local computers to public clouds. Read our \"Why we decided to ship and develop the OSGi application in containers\" article to understand the benefits of containers in our stack. Once developers create a WebSight project using the Maven archetype , they produce the following Docker images: An NGINX image (web server) with addtional project-specific configurations A customized CMS image with core WebSight CMS and project-specific modules and configurations","title":"Containers"},{"location":"docs/developers/architecture/#docker-compose","text":"With more than one container in the platform, we need a tool for defining and running multi-container Docker applications. With Compose, we can use the Compose YAML file model to: Configure all platform components ( services ) Enable communication between them Handle data persistance with volumes The following diagram presents all WebSight CMS containers and volumes together. The diagram above reflects the containers' logical architecture. Docker Compose configuration specifies the following services: The nginx service (experience delivery) The cms service (content management and pages generation) The mongo service (content database) Services use volumes to save durable data outside the container (note that this means that when the container is destroyed and reloaded, all data from the previous container instance is lost). We specify the following volumes: The experience storage volume is shared by NGINX (read) and WebSight CMS (write) containers The content volume keeps content and assets The logs volume keeps all WebSight CMS application logs","title":"Docker Compose"},{"location":"docs/developers/architecture/#environments","text":"Working with containers enables consistency and standardization. With Docker, we can use the same tooling to work locally as well as to deploy production environments to the cloud. For example: When using Docker Compose, the same command is responsible for creating local and cloud instances ( docker compose up ). Read more about Docker Compose Amazon Elastic Container Service integration .","title":"Environments"},{"location":"docs/developers/architecture/aws-ecs/","text":"Amazon ECS WebSight Architecture The container services available on AWS make it easy to manage WebSight CMS infrastructure and containers. For container orchestration, you can choose between Amazon Elastic Container Service (ECS) and Amazon Elastic Kubernetes Service (EKS) . For infrastructure provisioning, you can use Amazon Elastic Compute Cloud (EC2) , which provides full control over the compute environment, or Fargate , a serverless compute option in which the infrastructure provisioning is managed by AWS. Physical architecture with Elastic Container Service This document describes WebSight deployment with Amazon ECS and Fargate . These are the key principles for this tooling: There is no additional charge for the Amazon ECS cluster; you pay only for AWS resources that you create to store and run the application ECS uses simple concepts ( services , tasks and containers ), similar to those in Docker Compose, which enables Docker ECS integration The developer experience is almost the same localy and in the cloud ECS integrates natively with AWS services like CloudTrail , CloudWatch , Elastic Container Registry , and Elastic File System With Fargate, developers do not have to worry about the underlying infrastructure. This enables a serverless experience, and you pay only for the vCPU and memory resources that your application requests The following diagram presents the physical architecture of the WebSight CMS environment in AWS. Amazon Elastic Container Service Amazon ECS is a fully managed container orchestration service. It uses abstractions such as services , tasks , task definitions , containers . In brief, these mean the following: Tasks are configured with task definitions and are used to launch containers Services guarantee that the required number of tasks are runnning Each service ( nginx , cms , mongo ) runs a single task that launches a single container. Read more about Amazon ECS here . Amazon Elastic File System Amazon Elastic File System (Amazon EFS) is a fully managed, serverless file system with native AWS ECS integration. WebSight uses EFSs to store published experiences, content and logs. Read more details about EFS here . Amazon Application Load Balancer Application Load Balancer handles all request from both site visitors (HTTPS on port 443 ) and authors (HTTPS on port 8443 ), and forwards them to nginx or cms ECS services. ALB also terminates HTTPS; all routing between ALB and ECS uses HTTP ( 80 / 8080 ) because the connection is private. Read more details here .","title":"Amazon ECS WebSight Architecture"},{"location":"docs/developers/architecture/aws-ecs/#amazon-ecs-websight-architecture","text":"The container services available on AWS make it easy to manage WebSight CMS infrastructure and containers. For container orchestration, you can choose between Amazon Elastic Container Service (ECS) and Amazon Elastic Kubernetes Service (EKS) . For infrastructure provisioning, you can use Amazon Elastic Compute Cloud (EC2) , which provides full control over the compute environment, or Fargate , a serverless compute option in which the infrastructure provisioning is managed by AWS.","title":"Amazon ECS WebSight Architecture"},{"location":"docs/developers/architecture/aws-ecs/#physical-architecture-with-elastic-container-service","text":"This document describes WebSight deployment with Amazon ECS and Fargate . These are the key principles for this tooling: There is no additional charge for the Amazon ECS cluster; you pay only for AWS resources that you create to store and run the application ECS uses simple concepts ( services , tasks and containers ), similar to those in Docker Compose, which enables Docker ECS integration The developer experience is almost the same localy and in the cloud ECS integrates natively with AWS services like CloudTrail , CloudWatch , Elastic Container Registry , and Elastic File System With Fargate, developers do not have to worry about the underlying infrastructure. This enables a serverless experience, and you pay only for the vCPU and memory resources that your application requests The following diagram presents the physical architecture of the WebSight CMS environment in AWS.","title":"Physical architecture with Elastic Container Service"},{"location":"docs/developers/architecture/aws-ecs/#amazon-elastic-container-service","text":"Amazon ECS is a fully managed container orchestration service. It uses abstractions such as services , tasks , task definitions , containers . In brief, these mean the following: Tasks are configured with task definitions and are used to launch containers Services guarantee that the required number of tasks are runnning Each service ( nginx , cms , mongo ) runs a single task that launches a single container. Read more about Amazon ECS here .","title":"Amazon Elastic Container Service"},{"location":"docs/developers/architecture/aws-ecs/#amazon-elastic-file-system","text":"Amazon Elastic File System (Amazon EFS) is a fully managed, serverless file system with native AWS ECS integration. WebSight uses EFSs to store published experiences, content and logs. Read more details about EFS here .","title":"Amazon Elastic File System"},{"location":"docs/developers/architecture/aws-ecs/#amazon-application-load-balancer","text":"Application Load Balancer handles all request from both site visitors (HTTPS on port 443 ) and authors (HTTPS on port 8443 ), and forwards them to nginx or cms ECS services. ALB also terminates HTTPS; all routing between ALB and ECS uses HTTP ( 80 / 8080 ) because the connection is private. Read more details here .","title":"Amazon Application Load Balancer"},{"location":"docs/developers/architecture/cms-modules-layers/","text":"WebSight CMS Layers & Modules The diagram below represents the WebSight CMS layers and their responsibilities. Layers consist of features (see Sling Feature Model for more details), which are more high-level logical units (like site management or assets management). Layers details This section describes each layer with its responsibilities: Our platform supports multi-site management. Developers can configure site mappings (short URLs, vanity URLs) and restrictions for site components. Sites can have independent release lifecycles or be aggregated into a single container for cost savings. With the sites management feature, authors can drag and drop site components to manage web pages and control their layouts. Clients can reuse our component libraries (Howlite, Bulma) to optimise the time needed to enable site creation or create custom ones. With OSGi pluggability and Sling Feature configurability, our platform is composed of multiple low-level modules (OSGi bundles) organized into more general functionalities called features. While WebSight offers basic core features such as sites and assets management, our clients can also easily add custom features without making modifications to the platform codebase. Moreover, plugins allow clients to extend a user interface beyond the core features with custom actions, panels or even dashboards. React is our first choice for building resource-oriented views. Each view is a single-page application with extension points for dynamically loaded React components. However, adding custom views with other JS Frameworks like Vue.js or Angular is as simple as adding libraries and bootstrapping the app. It is a framework for building extendable web resource-oriented platforms. It separates presentation and business logic layers allowing developers to configure custom views and extend existing ones without modifying the codebase. Its core modules simplify building RESTful APIs, configuring resource-oriented web views and injecting HTML fragments into the existing ones. Built on top of the open-source Apache Software Foundation stack: Apache Sling - a framework for RESTful web applications, Apache Felix - an implementation of the OSGi Framework and Service platform, Apache Jackrabbit Oak - an implementation of Java Content Repository (JCR). We store the content and assets in MongoDB, a scalable and performant NoSQL database. Our clients can switch to other Oak store implementations based on TAR files to decrease costs.","title":"WebSight CMS Layers & Modules"},{"location":"docs/developers/architecture/cms-modules-layers/#websight-cms-layers-modules","text":"The diagram below represents the WebSight CMS layers and their responsibilities. Layers consist of features (see Sling Feature Model for more details), which are more high-level logical units (like site management or assets management).","title":"WebSight CMS Layers &amp; Modules"},{"location":"docs/developers/architecture/cms-modules-layers/#layers-details","text":"This section describes each layer with its responsibilities: Our platform supports multi-site management. Developers can configure site mappings (short URLs, vanity URLs) and restrictions for site components. Sites can have independent release lifecycles or be aggregated into a single container for cost savings. With the sites management feature, authors can drag and drop site components to manage web pages and control their layouts. Clients can reuse our component libraries (Howlite, Bulma) to optimise the time needed to enable site creation or create custom ones. With OSGi pluggability and Sling Feature configurability, our platform is composed of multiple low-level modules (OSGi bundles) organized into more general functionalities called features. While WebSight offers basic core features such as sites and assets management, our clients can also easily add custom features without making modifications to the platform codebase. Moreover, plugins allow clients to extend a user interface beyond the core features with custom actions, panels or even dashboards. React is our first choice for building resource-oriented views. Each view is a single-page application with extension points for dynamically loaded React components. However, adding custom views with other JS Frameworks like Vue.js or Angular is as simple as adding libraries and bootstrapping the app. It is a framework for building extendable web resource-oriented platforms. It separates presentation and business logic layers allowing developers to configure custom views and extend existing ones without modifying the codebase. Its core modules simplify building RESTful APIs, configuring resource-oriented web views and injecting HTML fragments into the existing ones. Built on top of the open-source Apache Software Foundation stack: Apache Sling - a framework for RESTful web applications, Apache Felix - an implementation of the OSGi Framework and Service platform, Apache Jackrabbit Oak - an implementation of Java Content Repository (JCR). We store the content and assets in MongoDB, a scalable and performant NoSQL database. Our clients can switch to other Oak store implementations based on TAR files to decrease costs.","title":"Layers details"},{"location":"docs/developers/architecture/kubernetes/","text":"Kubernetes Architecture Kubernetes (k8s) makes it easy to automate deployments and management of WebSight CMS components on the most popular public cloud platforms. This document describes the Kubernetes resources that are required to run and scale WebSight CMS. Kubernetes Resources Following is how Kubernetes resources map onto WebSight components: Ingress is a set of rules that define how to route requests from authors and site visitors. The Ingress Controller processes these rules and exposes them to the load balancer provided by the cloud platforms. WebSight supports multi-site management, so our Ingress contains rules for authors and site visitors from multiple domains (paths) The CMS service and pods read/write content to/from MongoDB and create/delete (publish/unpublish) generated HTML pages/images/other assets in Public Storage The MongoDB service and pod store the content in a persistent volume The Web Server service and pod read pre-generated HTML pages from Public Storage The Public Storage persistent volume shares data between the CMS and Web Server pods The following diagram represents the WebSight k8s architecture: Limitation WebSight CMS uses Public Storage persistent volume for all published assets (HTML pages, images, and JS / CSS scripts). As a consequence, CMS and Web Server pods need PersistanceVolumeClaims (PVCs) with the ReadWriteMany access mode when more than one node worker in the cluster is configured.","title":"Kubernetes Architecture"},{"location":"docs/developers/architecture/kubernetes/#kubernetes-architecture","text":"Kubernetes (k8s) makes it easy to automate deployments and management of WebSight CMS components on the most popular public cloud platforms. This document describes the Kubernetes resources that are required to run and scale WebSight CMS.","title":"Kubernetes Architecture"},{"location":"docs/developers/architecture/kubernetes/#kubernetes-resources","text":"Following is how Kubernetes resources map onto WebSight components: Ingress is a set of rules that define how to route requests from authors and site visitors. The Ingress Controller processes these rules and exposes them to the load balancer provided by the cloud platforms. WebSight supports multi-site management, so our Ingress contains rules for authors and site visitors from multiple domains (paths) The CMS service and pods read/write content to/from MongoDB and create/delete (publish/unpublish) generated HTML pages/images/other assets in Public Storage The MongoDB service and pod store the content in a persistent volume The Web Server service and pod read pre-generated HTML pages from Public Storage The Public Storage persistent volume shares data between the CMS and Web Server pods The following diagram represents the WebSight k8s architecture: Limitation WebSight CMS uses Public Storage persistent volume for all published assets (HTML pages, images, and JS / CSS scripts). As a consequence, CMS and Web Server pods need PersistanceVolumeClaims (PVCs) with the ReadWriteMany access mode when more than one node worker in the cluster is configured.","title":"Kubernetes Resources"},{"location":"docs/developers/deployment/aws-ecs/","text":"Deployment with Amazon ECS In this tutorial you will learn how to deploy an application created in the setup guide to Amazon Web Services cloud using Docker Compose . The Docker Compose CLI is fully integrated with Amazon Elastic Container Service (ECS) . It allows to create / manage the task definitions, tasks, services using Compose YAML configuration files. Docker Compose CLI relies on CloudFormation to manage AWS Resources. Docker allows to define the platform in declarative way. Switching between local and ECS environments is as easy as switching Docker Context (any addtional AWS configurations exists in the Docker Compose YAML file). Notice Setting up the WebSight CMS CE environment in AWS presented in this tutorial is not in the AWS Free Tier. If you run the instance according to this guide, the costs will incur (~3$/day). Prerequisites After finishing Creating and developing WebSight CMS project guide you should already have: Docker installed and running on your local machine. Java 17 (e.g. AdoptOpenJDK 17 ) and Maven installed on your local machine. To complete this tutorial, you will additionally need: AWS account with permissions for Docker Compose ECS integraion . AWS CLI set up locally with your AWS credentials. Step 1: AWS configuration Registering a new domain with Route53 . Request a public certificate using AWS Certificate Manager . Validate domain ownership for the created public certificate. Create two private image repositories : Set the CMS image Repository name to <your-project-name>-cms-ce , e.g. luna-cms-ce . Set the Nginx image Repository name to <your-project-name>-nginx-ce , e.g. luna-nginx-ce . Step 2: Project configuration In this step, we will start from the project generated in the Setup guide and update Docker and Maven configuration files. Docker For simplicity, we set remote environment configuration in the same repository as the project. Create environment/remote directory. Create environment/remote/admin_password.txt and environment/remote/mongo_password.txt files and fill them with random password (both should be single-line documents). Copy environment/local/docker-compose.yml to environment/remote . Add secrets section in environment/local/docker-compose.yml : secrets : admin_password : file : ./admin_password.txt mongo_password : file : ./mongo_password.txt Replace volumes section to: volumes : cms_logs : mongo_repository : site_repository : Change cms service definition to: cms : image : <CMS_ECR_IMAGE_URI> deploy : resources : limits : cpus : '0.5' memory : 2048M ports : - target : 8080 published : 8080 x-aws-protocol : http environment : - WS_ADMIN_USERNAME=wsadmin - MONGODB_HOST=mongo - MONGODB_PORT=27017 - MONGODB_USERNAME=mongoadmin volumes : - cms_logs:/websight/logs - site_repository:/websight/docroot secrets : - source : admin_password target : admin.password - source : mongo_password target : mongo.password depends_on : - mongo CMS_ECR_IMAGE_URI - replace with CMS repository URI from AWS ECR dashboard x-aws-protocol - configuration for AWS ALB, read more here Change mongo service definition to: mongo : image : mongo:4.4.6 deploy : resources : limits : cpus : '1' memory : 4096M environment : - MONGO_INITDB_ROOT_USERNAME=mongoadmin - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongo.password volumes : - mongo_repository:/data/db secrets : - source : mongo_password target : mongo.password Change nginx service definition to: nginx : image : <NGINX_ECR_IMAGE_URI> ports : - target : 80 published : 80 x-aws-protocol : http volumes : - site_repository:/usr/share/nginx/html:ro NGINX_ECR_IMAGE_URI - replace with Nignx repository URI from AWS ECR dashboard x-aws-protocol - configuration for AWS ALB, read more here Add x-aws-cloudformation section with Load Balancer configuration: x-aws-cloudformation : Resources : Cms8080TargetGroup : Properties : HealthCheckProtocol : HTTP HealthCheckPort : 8080 HealthCheckPath : /system/health Matcher : HttpCode : 200 Nginx80TargetGroup : Properties : HealthCheckProtocol : HTTP HealthCheckPort : 80 HealthCheckPath : /health Matcher : HttpCode : 200 Cms8080Listener : Properties : Certificates : - CertificateArn : \"<CERTIFICATE_ARN>\" Protocol : HTTPS Port : 8443 Nginx80Listener : Properties : Certificates : - CertificateArn : \"<CERTIFICATE_ARN>\" Protocol : HTTPS Port : 443 CERTIFICATE_ARN - replace with ARN of the certificate generated in AWS Configuration step. Create Docker ECS context named ws-ecs : docker context create ecs ws-ecs Update distribution/src/main/docker/nginx/default.conf Nginx config with additional health endpoint: location /health { access_log off ; add_header Content-Type text/html; return 200 ; } To find more information about using Docker Compose with AWS Elastic Container Service, please read Deploying Docker containers on ECS . Maven Update io.fabric8:docker-maven-plugin plugin configuration in distribution/pom.xml . Add the following buildx extension to cms and nginx images <build> sections: <buildx> <platforms> <platform> linux/amd64 </platform> <platform> linux/arm64 </platform> </platforms> </buildx> Add the following execution : <execution> <id> push-docker-image </id> <phase> package </phase> <goals> <goal> push </goal> </goals> </execution> Add <docker.skip.push>true</docker.skip.push> property to the main pom.xml . Alternatively, you can check the above configuration in WebSight Starter Distribution POM (where Maven profiles are used). Step 3: Build and deployment Log in to ECR . In the project root run mvn clean install -D docker.cms-project.name=<CMS_ECR_IMAGE_URI> -D docker.nginx.name=<NGINX_ECR_IMAGE_URI> -D docker.skip.push=false . Switch Docker context to ECS docker context use ws-ecs . From environment/remote run docker compose --project-name \"websight-in-aws\" up . It may take a couple of minutes to finish. Route your domain to Application Load Balancer (that was created by the Docker Compose in the previous step) by creating a new Hosted Zone . Step 4: Verification Check ECS Console and see if all cluster services are running. Open WebSight CMS CE admin panel on <your-domain>:8443 . Use the wsadmin as login and content of environment/remote/admin_password.txt as password. Cleaning up To stop incurring AWS costs, follow these steps: From environment/remote run docker compose --project-name \"websight-in-aws\" down . It may take a couple of minutes. Delete EFS file systems for cms_logs , mongo_repository , and site_repository volumes. Delete Route53 Hosted Zone created in Deployment step. Delete certificate created in AWS Configuration step. Delete ECR repositories created in AWS Configuration step. AWS best practices This section descirbes best practices for deploying WebSight CE DXP to AWS ECS. Logs and monitoring It is always worth configuring logs and observing basic metrics for your instance. Thanks to the Docker Compose integration with AWS ECS, the AWS CloudWatch Logs service is automatically configured for your containers . Additionally, you can monitor basic metrics thanks to the CloudWatch metrics for the Fargate launch type. Secrets Use Docker secrets for storing any sensitive data (like passwords, tokens, etc.). Docker Compose integration with AWS ECS creates a new secret in the AWS Secrets Manager for each secred defined in the compose configuration file . See the examples below. Custom CMS admin credentials WebSight CE CMS enables configuring a custom admin username and password. The default values for admin user username/password are wsadmin/wsadmin . You can configure a custom username with WS_ADMIN_USERNAME environment variable . To configure a custom password use admin.password secret. You will need secret files available at deploy time next to the compose file: admin_password.txt s33cretP@ssword and reference it in the compose configuration: docker-compose.yml service : cms : secrets : - source : admin_password target : admin.password secrets : admin_password : file : ./admin_password.txt Custom MongoDB password By default, ECS Tasks configured by the Docker Compose integration have public IP assigned. Therefore, you should consider securing MongoDB, which by default starts with no username/password configured. Read more about securing MongoDB containers here .","title":"Deployment with Amazon ECS"},{"location":"docs/developers/deployment/aws-ecs/#deployment-with-amazon-ecs","text":"In this tutorial you will learn how to deploy an application created in the setup guide to Amazon Web Services cloud using Docker Compose . The Docker Compose CLI is fully integrated with Amazon Elastic Container Service (ECS) . It allows to create / manage the task definitions, tasks, services using Compose YAML configuration files. Docker Compose CLI relies on CloudFormation to manage AWS Resources. Docker allows to define the platform in declarative way. Switching between local and ECS environments is as easy as switching Docker Context (any addtional AWS configurations exists in the Docker Compose YAML file). Notice Setting up the WebSight CMS CE environment in AWS presented in this tutorial is not in the AWS Free Tier. If you run the instance according to this guide, the costs will incur (~3$/day). Prerequisites After finishing Creating and developing WebSight CMS project guide you should already have: Docker installed and running on your local machine. Java 17 (e.g. AdoptOpenJDK 17 ) and Maven installed on your local machine. To complete this tutorial, you will additionally need: AWS account with permissions for Docker Compose ECS integraion . AWS CLI set up locally with your AWS credentials.","title":"Deployment with Amazon ECS"},{"location":"docs/developers/deployment/aws-ecs/#step-1-aws-configuration","text":"Registering a new domain with Route53 . Request a public certificate using AWS Certificate Manager . Validate domain ownership for the created public certificate. Create two private image repositories : Set the CMS image Repository name to <your-project-name>-cms-ce , e.g. luna-cms-ce . Set the Nginx image Repository name to <your-project-name>-nginx-ce , e.g. luna-nginx-ce .","title":"Step 1: AWS configuration"},{"location":"docs/developers/deployment/aws-ecs/#step-2-project-configuration","text":"In this step, we will start from the project generated in the Setup guide and update Docker and Maven configuration files.","title":"Step 2: Project configuration"},{"location":"docs/developers/deployment/aws-ecs/#docker","text":"For simplicity, we set remote environment configuration in the same repository as the project. Create environment/remote directory. Create environment/remote/admin_password.txt and environment/remote/mongo_password.txt files and fill them with random password (both should be single-line documents). Copy environment/local/docker-compose.yml to environment/remote . Add secrets section in environment/local/docker-compose.yml : secrets : admin_password : file : ./admin_password.txt mongo_password : file : ./mongo_password.txt Replace volumes section to: volumes : cms_logs : mongo_repository : site_repository : Change cms service definition to: cms : image : <CMS_ECR_IMAGE_URI> deploy : resources : limits : cpus : '0.5' memory : 2048M ports : - target : 8080 published : 8080 x-aws-protocol : http environment : - WS_ADMIN_USERNAME=wsadmin - MONGODB_HOST=mongo - MONGODB_PORT=27017 - MONGODB_USERNAME=mongoadmin volumes : - cms_logs:/websight/logs - site_repository:/websight/docroot secrets : - source : admin_password target : admin.password - source : mongo_password target : mongo.password depends_on : - mongo CMS_ECR_IMAGE_URI - replace with CMS repository URI from AWS ECR dashboard x-aws-protocol - configuration for AWS ALB, read more here Change mongo service definition to: mongo : image : mongo:4.4.6 deploy : resources : limits : cpus : '1' memory : 4096M environment : - MONGO_INITDB_ROOT_USERNAME=mongoadmin - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongo.password volumes : - mongo_repository:/data/db secrets : - source : mongo_password target : mongo.password Change nginx service definition to: nginx : image : <NGINX_ECR_IMAGE_URI> ports : - target : 80 published : 80 x-aws-protocol : http volumes : - site_repository:/usr/share/nginx/html:ro NGINX_ECR_IMAGE_URI - replace with Nignx repository URI from AWS ECR dashboard x-aws-protocol - configuration for AWS ALB, read more here Add x-aws-cloudformation section with Load Balancer configuration: x-aws-cloudformation : Resources : Cms8080TargetGroup : Properties : HealthCheckProtocol : HTTP HealthCheckPort : 8080 HealthCheckPath : /system/health Matcher : HttpCode : 200 Nginx80TargetGroup : Properties : HealthCheckProtocol : HTTP HealthCheckPort : 80 HealthCheckPath : /health Matcher : HttpCode : 200 Cms8080Listener : Properties : Certificates : - CertificateArn : \"<CERTIFICATE_ARN>\" Protocol : HTTPS Port : 8443 Nginx80Listener : Properties : Certificates : - CertificateArn : \"<CERTIFICATE_ARN>\" Protocol : HTTPS Port : 443 CERTIFICATE_ARN - replace with ARN of the certificate generated in AWS Configuration step. Create Docker ECS context named ws-ecs : docker context create ecs ws-ecs Update distribution/src/main/docker/nginx/default.conf Nginx config with additional health endpoint: location /health { access_log off ; add_header Content-Type text/html; return 200 ; } To find more information about using Docker Compose with AWS Elastic Container Service, please read Deploying Docker containers on ECS .","title":"Docker"},{"location":"docs/developers/deployment/aws-ecs/#maven","text":"Update io.fabric8:docker-maven-plugin plugin configuration in distribution/pom.xml . Add the following buildx extension to cms and nginx images <build> sections: <buildx> <platforms> <platform> linux/amd64 </platform> <platform> linux/arm64 </platform> </platforms> </buildx> Add the following execution : <execution> <id> push-docker-image </id> <phase> package </phase> <goals> <goal> push </goal> </goals> </execution> Add <docker.skip.push>true</docker.skip.push> property to the main pom.xml . Alternatively, you can check the above configuration in WebSight Starter Distribution POM (where Maven profiles are used).","title":"Maven"},{"location":"docs/developers/deployment/aws-ecs/#step-3-build-and-deployment","text":"Log in to ECR . In the project root run mvn clean install -D docker.cms-project.name=<CMS_ECR_IMAGE_URI> -D docker.nginx.name=<NGINX_ECR_IMAGE_URI> -D docker.skip.push=false . Switch Docker context to ECS docker context use ws-ecs . From environment/remote run docker compose --project-name \"websight-in-aws\" up . It may take a couple of minutes to finish. Route your domain to Application Load Balancer (that was created by the Docker Compose in the previous step) by creating a new Hosted Zone .","title":"Step 3: Build and deployment"},{"location":"docs/developers/deployment/aws-ecs/#step-4-verification","text":"Check ECS Console and see if all cluster services are running. Open WebSight CMS CE admin panel on <your-domain>:8443 . Use the wsadmin as login and content of environment/remote/admin_password.txt as password.","title":"Step 4: Verification"},{"location":"docs/developers/deployment/aws-ecs/#cleaning-up","text":"To stop incurring AWS costs, follow these steps: From environment/remote run docker compose --project-name \"websight-in-aws\" down . It may take a couple of minutes. Delete EFS file systems for cms_logs , mongo_repository , and site_repository volumes. Delete Route53 Hosted Zone created in Deployment step. Delete certificate created in AWS Configuration step. Delete ECR repositories created in AWS Configuration step.","title":"Cleaning up"},{"location":"docs/developers/deployment/aws-ecs/#aws-best-practices","text":"This section descirbes best practices for deploying WebSight CE DXP to AWS ECS.","title":"AWS best practices"},{"location":"docs/developers/deployment/aws-ecs/#logs-and-monitoring","text":"It is always worth configuring logs and observing basic metrics for your instance. Thanks to the Docker Compose integration with AWS ECS, the AWS CloudWatch Logs service is automatically configured for your containers . Additionally, you can monitor basic metrics thanks to the CloudWatch metrics for the Fargate launch type.","title":"Logs and monitoring"},{"location":"docs/developers/deployment/aws-ecs/#secrets","text":"Use Docker secrets for storing any sensitive data (like passwords, tokens, etc.). Docker Compose integration with AWS ECS creates a new secret in the AWS Secrets Manager for each secred defined in the compose configuration file . See the examples below.","title":"Secrets"},{"location":"docs/developers/deployment/aws-ecs/#custom-cms-admin-credentials","text":"WebSight CE CMS enables configuring a custom admin username and password. The default values for admin user username/password are wsadmin/wsadmin . You can configure a custom username with WS_ADMIN_USERNAME environment variable . To configure a custom password use admin.password secret. You will need secret files available at deploy time next to the compose file: admin_password.txt s33cretP@ssword and reference it in the compose configuration: docker-compose.yml service : cms : secrets : - source : admin_password target : admin.password secrets : admin_password : file : ./admin_password.txt","title":"Custom CMS admin credentials"},{"location":"docs/developers/deployment/aws-ecs/#custom-mongodb-password","text":"By default, ECS Tasks configured by the Docker Compose integration have public IP assigned. Therefore, you should consider securing MongoDB, which by default starts with no username/password configured. Read more about securing MongoDB containers here .","title":"Custom MongoDB password"},{"location":"docs/developers/deployment/kubernetes/","text":"Deployment with Kubernetes In this tutorial you will learn how to deploy an application created in the setup guide to Kubernetes using the Digital Ocean Managed Kubernetes clusters . Notice Setting up the WebSight CMS in Digital Ocean presented in this tutorial is not free. If you run the instance according to this guide, the costs will incur (~2$/day). Prerequisites After finishing Creating and developing WebSight CMS project guide you should already have: Docker installed and running on your local machine. Java 17 (e.g. AdoptOpenJDK 17 ) and Maven installed on your local machine. To complete this tutorial, you will additionally need: Digital Ocean account Digital Ocean CLI installed kubectl installed (with Docker Desktop kubectl should be installed ) helm installed Step 1: Digital Ocean configuration Digital Ocean does not support persistent volumes with ReadWriteMany access mode. For simplicity sake, we create a single node Kubernetes cluster to work with ReadWiteOnce access mode. Authenticate doctl with an API token API token scopes: Read and Write Create Kubernetes cluster using the Control Panel scaling type: Fixed size machine type: Basic nodes node plan: Professional plans 8 GB RAM / 4 vCPUs nodes: 1 Configure kubectl context for the new cluster Create Container Registry plan: Basic Step 2: Kubernetes cluster configuration Set up Nginx Ingress Controller Integrate Container Registry with Kubernetes cluster Step 2: Project configuration Maven Update io.fabric8:docker-maven-plugin plugin configuration in distribution/pom.xml . Add the following buildx extension to cms and nginx images <build> sections: <buildx> <platforms> <platform> linux/amd64 </platform> <platform> linux/arm64 </platform> </platforms> </buildx> Add the following execution : <execution> <id> push-docker-image </id> <phase> package </phase> <goals> <goal> push </goal> </goals> </execution> Add <docker.skip.push>true</docker.skip.push> property to the main pom.xml . Environment Create values.yml file in environment/k8s with the following content cms : image : repository : registry.digitalocean.com/<YOUR_REGISTRY_NAME>/cms tag : latest nginx : replicas : 1 image : repository : registry.digitalocean.com/<YOUR_REGISTRY_NAME>/nginx tag : latest ingress : enabled : true hosts : cms : \"cms.<YOUR_CLUSTER_IP>.nip.io\" site : \"site.<YOUR_CLUSTER_IP>.nip.io\" - YOUR_REGISTRY_NAME - replace with Digital Ocean Container Registry name - YOUR_CLUSTER_IP - replace with Digital Ocean Load Balancer IP (you may obtain it by running doctl compute load-balancer list ) See WebSight Helm chart documentation for more details. Step 3: Build & deployment Configure Docker to push to and pull from Container Registry . In the project root run mvn clean install \\ -D docker.cms-project.name = registry.digitalocean.com/<YOUR_REGISTRY_NAME>/cms \\ -D docker.nginx.name = registry.digitalocean.com/<YOUR_REGISTRY_NAME>/nginx \\ -D docker.skip.push = false Switch kubectl context to your cluster in Digital Ocean ( kubectl config use-context <CONTEXT_NAME> ) From environment/k8s run: helm repo add websight https://websight-io.github.io/websight-ce-helm helm repo update websight helm install my-websight websight/websight-ce -f values.yml Use helm upgrade my-websight websight/websight-ce -f values.yml for updating the installation. docker compose --project-name \"websight-in-aws\" up . It may take a couple of minutes to finish. 5. Route your domain to Application Load Balancer (that was created by the Docker Compose in the previous step) by creating a new Hosted Zone . Step 4: Verification Check Kubernetes Dashboard and see if all PODs are running. Open WebSight CMS admin panel on https://cms.<YOUR_CLUSTER_IP>.nip.io/ (SSL is not covered in this guide). Use the wsadmin / wsadmin to login. Cleanup Delete Kubernetes cluster along with Load Balancer and volumes. Delete Container Registry.","title":"Deployment with Kubernetes"},{"location":"docs/developers/deployment/kubernetes/#deployment-with-kubernetes","text":"In this tutorial you will learn how to deploy an application created in the setup guide to Kubernetes using the Digital Ocean Managed Kubernetes clusters . Notice Setting up the WebSight CMS in Digital Ocean presented in this tutorial is not free. If you run the instance according to this guide, the costs will incur (~2$/day). Prerequisites After finishing Creating and developing WebSight CMS project guide you should already have: Docker installed and running on your local machine. Java 17 (e.g. AdoptOpenJDK 17 ) and Maven installed on your local machine. To complete this tutorial, you will additionally need: Digital Ocean account Digital Ocean CLI installed kubectl installed (with Docker Desktop kubectl should be installed ) helm installed","title":"Deployment with Kubernetes"},{"location":"docs/developers/deployment/kubernetes/#step-1-digital-ocean-configuration","text":"Digital Ocean does not support persistent volumes with ReadWriteMany access mode. For simplicity sake, we create a single node Kubernetes cluster to work with ReadWiteOnce access mode. Authenticate doctl with an API token API token scopes: Read and Write Create Kubernetes cluster using the Control Panel scaling type: Fixed size machine type: Basic nodes node plan: Professional plans 8 GB RAM / 4 vCPUs nodes: 1 Configure kubectl context for the new cluster Create Container Registry plan: Basic","title":"Step 1: Digital Ocean configuration"},{"location":"docs/developers/deployment/kubernetes/#step-2-kubernetes-cluster-configuration","text":"Set up Nginx Ingress Controller Integrate Container Registry with Kubernetes cluster","title":"Step 2: Kubernetes cluster configuration"},{"location":"docs/developers/deployment/kubernetes/#step-2-project-configuration","text":"","title":"Step 2: Project configuration"},{"location":"docs/developers/deployment/kubernetes/#maven","text":"Update io.fabric8:docker-maven-plugin plugin configuration in distribution/pom.xml . Add the following buildx extension to cms and nginx images <build> sections: <buildx> <platforms> <platform> linux/amd64 </platform> <platform> linux/arm64 </platform> </platforms> </buildx> Add the following execution : <execution> <id> push-docker-image </id> <phase> package </phase> <goals> <goal> push </goal> </goals> </execution> Add <docker.skip.push>true</docker.skip.push> property to the main pom.xml .","title":"Maven"},{"location":"docs/developers/deployment/kubernetes/#environment","text":"Create values.yml file in environment/k8s with the following content cms : image : repository : registry.digitalocean.com/<YOUR_REGISTRY_NAME>/cms tag : latest nginx : replicas : 1 image : repository : registry.digitalocean.com/<YOUR_REGISTRY_NAME>/nginx tag : latest ingress : enabled : true hosts : cms : \"cms.<YOUR_CLUSTER_IP>.nip.io\" site : \"site.<YOUR_CLUSTER_IP>.nip.io\" - YOUR_REGISTRY_NAME - replace with Digital Ocean Container Registry name - YOUR_CLUSTER_IP - replace with Digital Ocean Load Balancer IP (you may obtain it by running doctl compute load-balancer list ) See WebSight Helm chart documentation for more details.","title":"Environment"},{"location":"docs/developers/deployment/kubernetes/#step-3-build-deployment","text":"Configure Docker to push to and pull from Container Registry . In the project root run mvn clean install \\ -D docker.cms-project.name = registry.digitalocean.com/<YOUR_REGISTRY_NAME>/cms \\ -D docker.nginx.name = registry.digitalocean.com/<YOUR_REGISTRY_NAME>/nginx \\ -D docker.skip.push = false Switch kubectl context to your cluster in Digital Ocean ( kubectl config use-context <CONTEXT_NAME> ) From environment/k8s run: helm repo add websight https://websight-io.github.io/websight-ce-helm helm repo update websight helm install my-websight websight/websight-ce -f values.yml Use helm upgrade my-websight websight/websight-ce -f values.yml for updating the installation. docker compose --project-name \"websight-in-aws\" up . It may take a couple of minutes to finish. 5. Route your domain to Application Load Balancer (that was created by the Docker Compose in the previous step) by creating a new Hosted Zone .","title":"Step 3: Build &amp; deployment"},{"location":"docs/developers/deployment/kubernetes/#step-4-verification","text":"Check Kubernetes Dashboard and see if all PODs are running. Open WebSight CMS admin panel on https://cms.<YOUR_CLUSTER_IP>.nip.io/ (SSL is not covered in this guide). Use the wsadmin / wsadmin to login.","title":"Step 4: Verification"},{"location":"docs/developers/deployment/kubernetes/#cleanup","text":"Delete Kubernetes cluster along with Load Balancer and volumes. Delete Container Registry.","title":"Cleanup"},{"location":"docs/developers/deployment/linux/","text":"Deployment with Linux Docker Compose This guide describes an inexpensive setup with predictable monthly pricing. We will use a single Ubuntu server with Docker Compose running containers. Notice This setup does not focus on reliability (e.g. backups, recovery), scalability and monitoring aspects. For the production environments, we recommend using the managed container services. See the AWS ECS deployment guide for more details. Prerequisites After finishing Creating and developing WebSight CMS project guide you should already have: Docker installed and running on your local machine. Java 17 (e.g. AdoptOpenJDK 17 ) and Maven installed on your local machine. To complete this tutorial, you will additionally need: virtual machine (min 2CPUs / 4GB RAM) with Ubuntu 22.x installed container registry for your project images In this guide we will use DigitalOcean cloud to: set up a virtual machine (Droplet) configure private container registry Step 1: Droplet Setup Notice If you have your own vitual machine with Ubuntu installed, you can skip this step and go directly to step 2 . Create a Droplet with the following specification: OS Image: Ubuntu 22.04 (LTS) x64 Size: Basic: 2 Intel CPUs / 4GB RAM / 80GB NVMe SSDs choose SSH keys authentication and add your SSH public key to Droplet At the time of writing this guide the cost of the Droplet is $24.00/month . Step 2: Install Docker On your virtual machine install Docker Engine & Plugins according to the Ubuntu installation docs . Step 3: Container Registry Setup Notice If you have already Docker Registry, you can skip this step and go directly to step 4 . Create a basic private Container Registry in DigitalOcean . At the time of writing this guide the cost of the Basic Container Registry is $5.00/month . Step 4: Push images to Docker Registry In this step, we will start from the project generated in the Setup guide and update the Maven configuration file. Update the io.fabric8:docker-maven-plugin plugin configuration in distribution/pom.xml . Add the following buildx extension to cms and nginx images <build> sections: <buildx> <platforms> <platform> linux/amd64 </platform> <platform> linux/arm64 </platform> </platforms> </buildx> Add the following execution : <execution> <id> push-docker-image </id> <phase> package </phase> <goals> <goal> push </goal> </goals> </execution> Login to the container registry with docker login registry.digitalocean.com and provide your DigitalOcean API token. Push your images to the container registry mvn clean install \\ -Ddocker.cms-project.name = registry.digitalocean.com/DO_REGISTRY_NAME/websight-cms-linux-box \\ -Ddocker.nginx.name = registry.digitalocean.com/DO_REGISTRY_NAME/nginx-linux-box where DO_REGISTRY_NAME is your configured container registry name Step 5: Deploy Containers From the Droplet console run: Download Docker Compose file wget https://www.websight.io/scripts/docker-compose.yml Update the downloaded docker-compose.yml file and replace: public.ecr.aws/ds/websight-cms-ce:luna-1.1.0 -> registry.digitalocean.com/DO_REGISTRY_NAME/websight-cms-linux-box public.ecr.aws/ds/websight-nginx-ce:luna-1.1.0 -> registry.digitalocean.com/DO_REGISTRY_NAME/nginx-linux-box Login to the container registry docker login registry.digitalocean.com and provide your DigitalOcean API token. Run WebSight CMS CE containers with docker compose up -d Step 6: Verification Open WebSight CMS CE admin panel on DROPLET_IP:8080 . Use the wsadmin / wsadmin as login / password.","title":"Deployment with Linux Docker Compose"},{"location":"docs/developers/deployment/linux/#deployment-with-linux-docker-compose","text":"This guide describes an inexpensive setup with predictable monthly pricing. We will use a single Ubuntu server with Docker Compose running containers. Notice This setup does not focus on reliability (e.g. backups, recovery), scalability and monitoring aspects. For the production environments, we recommend using the managed container services. See the AWS ECS deployment guide for more details. Prerequisites After finishing Creating and developing WebSight CMS project guide you should already have: Docker installed and running on your local machine. Java 17 (e.g. AdoptOpenJDK 17 ) and Maven installed on your local machine. To complete this tutorial, you will additionally need: virtual machine (min 2CPUs / 4GB RAM) with Ubuntu 22.x installed container registry for your project images In this guide we will use DigitalOcean cloud to: set up a virtual machine (Droplet) configure private container registry","title":"Deployment with Linux Docker Compose"},{"location":"docs/developers/deployment/linux/#step-1-droplet-setup","text":"Notice If you have your own vitual machine with Ubuntu installed, you can skip this step and go directly to step 2 . Create a Droplet with the following specification: OS Image: Ubuntu 22.04 (LTS) x64 Size: Basic: 2 Intel CPUs / 4GB RAM / 80GB NVMe SSDs choose SSH keys authentication and add your SSH public key to Droplet At the time of writing this guide the cost of the Droplet is $24.00/month .","title":"Step 1: Droplet Setup"},{"location":"docs/developers/deployment/linux/#step-2-install-docker","text":"On your virtual machine install Docker Engine & Plugins according to the Ubuntu installation docs .","title":"Step 2: Install Docker"},{"location":"docs/developers/deployment/linux/#step-3-container-registry-setup","text":"Notice If you have already Docker Registry, you can skip this step and go directly to step 4 . Create a basic private Container Registry in DigitalOcean . At the time of writing this guide the cost of the Basic Container Registry is $5.00/month .","title":"Step 3: Container Registry Setup"},{"location":"docs/developers/deployment/linux/#step-4-push-images-to-docker-registry","text":"In this step, we will start from the project generated in the Setup guide and update the Maven configuration file. Update the io.fabric8:docker-maven-plugin plugin configuration in distribution/pom.xml . Add the following buildx extension to cms and nginx images <build> sections: <buildx> <platforms> <platform> linux/amd64 </platform> <platform> linux/arm64 </platform> </platforms> </buildx> Add the following execution : <execution> <id> push-docker-image </id> <phase> package </phase> <goals> <goal> push </goal> </goals> </execution> Login to the container registry with docker login registry.digitalocean.com and provide your DigitalOcean API token. Push your images to the container registry mvn clean install \\ -Ddocker.cms-project.name = registry.digitalocean.com/DO_REGISTRY_NAME/websight-cms-linux-box \\ -Ddocker.nginx.name = registry.digitalocean.com/DO_REGISTRY_NAME/nginx-linux-box where DO_REGISTRY_NAME is your configured container registry name","title":"Step 4: Push images to Docker Registry"},{"location":"docs/developers/deployment/linux/#step-5-deploy-containers","text":"From the Droplet console run: Download Docker Compose file wget https://www.websight.io/scripts/docker-compose.yml Update the downloaded docker-compose.yml file and replace: public.ecr.aws/ds/websight-cms-ce:luna-1.1.0 -> registry.digitalocean.com/DO_REGISTRY_NAME/websight-cms-linux-box public.ecr.aws/ds/websight-nginx-ce:luna-1.1.0 -> registry.digitalocean.com/DO_REGISTRY_NAME/nginx-linux-box Login to the container registry docker login registry.digitalocean.com and provide your DigitalOcean API token. Run WebSight CMS CE containers with docker compose up -d","title":"Step 5: Deploy Containers"},{"location":"docs/developers/deployment/linux/#step-6-verification","text":"Open WebSight CMS CE admin panel on DROPLET_IP:8080 . Use the wsadmin / wsadmin as login / password.","title":"Step 6: Verification"},{"location":"docs/developers/development/","text":"Development This document describes application development for WebSight CMS. We assume you completed the project setup guide and generated a new project from the Maven archetype. All the screens and examples presented below refer to the project prepared in the previous step. Note You don\u2019t need to read and understand all the linked content, basic concepts will be explained here. WebSight CMS is based on Apache Sling which \u201cis a framework for RESTful web-applications based on an extensible content tree\u201d\u200b\u200b and OSGi specification - \u201cJava framework specification that supports the deployment of extensible and downloadable applications known as bundles\u201d. What does this mean? The two most important things coming from the technologies WebSight CMS is based on, needed to understand this guide, are OSGi bundles and Resources. OSGi bundle OSGi bundle is a unit of modularization in OSGi specification - a bundle is comprised of Java classes and other resources, which together can provide functions to end users. Open http://localhost:8080/system/console/bundles to see all the Bundles on the WebSight CMS instance and use the filter bar at the top to filter the list. Some of the bundles are delivering the OSGi specification implementation (list filtered by org.apache.felix; Apache Felix is an implementation of the OSGi specification): Some of the bundles are delivering Apache Sling functionality (list filtered by org.apache.sling): Some of the bundles are delivering WebSight CMS functionality (list filtered by WebSight): And finally, some of the bundles are delivering the functionality of the application which was just generated from archetype (list filtered by my-artifactId which was used in example project generation at the beginning of the guide): Click on my-artifactId-backend bundle to open details. At the beginning the bundle definitions were mentioned: OSGi bundle is a unit of modularization in OSGi specification - a bundle is comprised of Java classes and other resources, which together can provide functions to end users. At the screen below it is highlighted that the my-artifactId-backend is exporting (making it available to use for other bundles) some Java packages (with use of Export-Package standard OSGi bundle header - provided by bnd-maven-plugin in pom.xml and package-info.java files in the code base) and is providing some resources (with use of Sling-Bundle-Resources bundle header handled by Bundle Resources Provider). Resources As already mentioned: WebSight CMS is based on Apache Sling which \u201cis a framework for RESTful web applications based on an extensible content tree\u201d. It is important to understand the concept of an \u201cextensible content tree\u201d. WebSight CMS Resource Browser admin tool allows browsing all Resources available on the instance. Resources are organized in the tree and every resource has a path and properties. Resources are abstractions that represent objects which might be coming from different sources. Resource Browser provides an option to select \u2018Providers\u2019 (sources of Resources available in the instance) used to display the presented Resources tree. We will focus on JCR and Bundle resources. http://localhost:8080/apps/browser#/ JCR (Java Content Repository) is a database with a tree structure consisting of nodes with properties. Nodes in JCR are reflected by the JCR Resource in the Resources tree. JCR is based on Java specification and implemented by Apache Jackrabbit which is also part of Sling and WebSight CMS (check the bundles list mentioned in the previous chapter and filter by org.apache.jackrabbit to see related bundles). For technical details check the links (it is not needed for this guide, all you need to know is explained in this document): https://sling.apache.org/documentation/the-sling-engine/resources.html https://jackrabbit.apache.org/jcr/jcr-api.html https://developer.adobe.com/experience-manager/reference-materials/spec/jsr170/javadocs/jcr-1.0/ Content stored in JCR is represented by JCR Resources (provided to Resources tree by JCR Resource provider). WebSight CMS is storing JCR content in MongoDB (this is the default setup and we will not go into other options here). JCR is used for all the content created during content authoring. Every created page and every added component is represented by nodes (with properties containing data) in the JCR and Resources tree. Resources could be also provided by OSGi Bundles. From the perspective of the Resources tree and Resource abstraction, there is no difference between resources provided by bundles and JCR. However, the bundle resources are read-only so would not be suitable for authorable content but are great for providing applications. The application resources provided by bundles are available as long as the bundle is available and are not stored in JCR - application data is not mixed with content data which is great from the perspective of Blue-green deployments, CI/CD, and Separation of concerns (but we will not go into details here). For technical details check the link (it is not needed for this guide, all you need to know is explained in this document): https://sling.apache.org/documentation/bundles/bundle-resources-extensions-bundleresource.html This is how bundle resources are provided in the generated project: and the same resource in the resource browser: http://localhost:8080/apps/browser#/apps/example-project/components/hello This is how JCR resources are defined in the codebase in the content module: And in the Resources tree: http://localhost:8080/apps/browser#/content/example-project/pages/homepage/jcr:content Backend Resources Generated application/backend module contains in src/main/resources folder example application resources needed to work with Pages in WebSight CMS. The resources structure starts at /apps/example-project path. This path is set in the proper OSGi bundle header to provide the information about resources delivered by the bundle. The following resources are defined: . \u2514\u2500\u2500 apps \u2514\u2500\u2500 example-project - application root \"sling:resourceType\": \"ws:Application\" \u251c\u2500\u2500 components - folder containing components \u2502 \u251c\u2500\u2500 container - example container component \u2502 \u251c\u2500\u2500 hello - example component \u2502 \u2514\u2500\u2500 page - example page component \u2514\u2500\u2500 templates - templates folder \u251c\u2500\u2500 contentpage - example page template \u2514\u2500\u2500 pagesspace - example pages space template Application root should be under /apps resource and must contain property sling:resourceType\" = \"ws:Application . Folders containing components and templates must be named \u2018components\u2019 and \u2018templates\u2019 and be under the application root resource. Different relative paths could be set by providing \u2018components\u2019 or \u2018templates\u2019 properties with relative paths to components or templates folders located under the application root resource - otherwise, components and templates will not be available in the authoring UI. Pages Space template In WebSight CMS content is organized in Spaces - areas where dedicated teams can work on content. WebSight CMS allows the creation of two types of spaces Assets (Digital Assets Manager) - allows managing assets Pages - allows managing pages and assets (includes the same functionality as Assets Space and more) The content module in the project generated from the archetype contains the Pages Space instance \u2018Example project\u2019 visible in the All Spaces view. New space can be created from UI: In the second step, the Space Template needs to be selected in case of Pages Space creation. The list contains the \u2018Example Project Pages\u2019 template defined at /apps/example-project/templates/pagesspace resource. Pages Space template resource must use sling:resourceType equals ws:PagesTemplate and should provide allowedChildren property defining the list of allowed pages templates to create. Another Pages Space template could be defined in the application if needed. For example: /apps/example-project/templates/anotherpagesspace { \"sling:resourceType\" : \"ws:PagesTemplate\" , \"title\" : \"Another Example Project Pages\" , \"allowedChildren\" : [ \"/apps/example-project/templates/contentpage\" ] } To deploy the updated bundle to the running instance, use the command from the backend module folder: mvn clean install -P autoInstallBundle New Pages Space template will be available: Page template Pages spaces are for page management. To create a new page, a page template is needed. Generated backend module provides example page template resource /apps/example-project/templates/contentpage sling:resourceType property of the page template must be ws:PageTemplate. title and description properties are used in UI. allowedChildren property contains an array of page templates that can be created under pages created from this template. The content Page template allows to the creation of subpages of the same type. The /apps/example-project/templates/contentpage was listed in allowedChildren property in the Pages Space template ( /apps/example-project/templates/pagesspace ) which is templates of the Example Project space: This means that page template /apps/example-project/templates/contentpage can be created under pages root in the space: http://localhost:8080/apps/websight/index.html/content/example-project/pages (click Create Page button) In the second step page properties can be set: The dialog displayed at this step is a dialog of the component defined in the initial content of the page template ( sling:resourceType\": \"example-project/components/page ). Read more about components and dialogs in Components documentation. The initial content of the page template is defined in a resource named \u2018initial\u2019 located under the page template resource. The initial content is copied to initialize the created page and properties set via dialog are set on the copied page content. Page is a node of type ws:Page. It contains a page content sub-node named jcr:content of type ws:PageContent. The nodes located under the page content node can be modified via authoring UI. All the Page properties including properties set via page dialog are set on the page content node. This is initial content of /apps/example-project/templates/contentpage page template: This is how the content node of the newly created page looks: New page templates can be created in the application. /apps/example-project/templates/examplpage is a copy of /apps/example-project/templates/contentpage with changed title, allowedChildren /apps/example-project/templates/examplpage { \"sling:resourceType\" : \"ws:PageTemplate\" , \"title\" : \"Example Page\" , \"description\" : \"Example Project\" , \"allowedChildren\" : [ \"/apps/example-project/templates/examplpage\" ] } and initial content: { \"jcr:primaryType\" : \"ws:Page\" , \"jcr:content\" : { \"jcr:primaryType\" : \"ws:PageContent\" , \"sling:resourceType\" : \"example-project/components/page\" , \"container\" : { \"sling:resourceType\" : \"example-project/components/container\" , \"hello\" : { \"sling:resourceType\" : \"example-project/components/hello\" }, \"hello1\" : { \"sling:resourceType\" : \"example-project/components/hello\" , \"helloName\" : \"Example\" } } } } To make it possible to create under pages root in the space it must be added to allowedChildren in pages space template /apps/example-project/templates/pagesspace : Deploy changes again with: mvn clean install -P autoInstallBundle The new template is available to create in pages root: Page created from this template contains defined initial content: Components Content is assembled from components - elements rendering parts of content according to implemented functionality. To understand the Components concept see the Components documentation. Generated backend module contains 3 example components located under /apps/example-project/components page - component used to render page content node container - container component - allows adding of the child components via authoring UI hello - component displaying hello text In the editor components list, only the hello component is visible because other components are hidden because of group property value. http://localhost:8080/apps/websight/index.html/content/example-project/pages/new-page::editor New components can be defined to deliver application functionality. We will add a new component named Rich Text which will allow advanced text editing. Create new folder under /apps/example-project/components named richtext with content: { \"sling:resourceType\" : \"ws:Component\" , \"title\" : \"Rich Text\" , \"description\" : \"Allows advanced text edition\" , \"group\" : \"Example Project\" } Define dialog resource: { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"richtext\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"label\" : \"Text\" , \"name\" : \"text\" } } Define rendering script richtext.html (name must be matching component resource name + .html): < data-sly data-sly-test = \"${properties.text && properties.text != '<p></p>'}\" > ${properties.text @ context='html'} </ data-sly > See Components documentation for more details. This is how the new component definition looks in the codebase. Deploy the change with the command from the backend module: mvn clean install -P autoInstallBundle The new component is available now in the editor and can be added to the page. If text is not configured via dialog, nothing is rendered because of the data-sly-test statement in the component renderer. If nothing is rendered by the component the placeholder is displayed automatically in the editor. Edit action can be used to open dialog and use rich text dialog input to configure the text. Frontend Frontend scripts and resources are provided by the frontend module - webpack project containing the application frontend. During the build, the resources are embedded into a bundle which is also deployed to the instance. The generated module contains just a simple CSS class to center the text used in the hello component. The CSS files are built into the main.css file by webpack and embedded into the OSGi bundle installed on the instance which makes the files available as resources (because of the Sling-Bundle-Resources header in the bundle header). Frontend resources are published automatically because of the WebSight-Apps-WebRoot bundle header (see next chapter about publishing). The CSS file is included in the page component renderer to load the CSS. http://localhost:8080/apps/browser#/apps/example-project/webroot/main.css Add the hello component to the page to see the centered hello text Publishing Assembled content can be previewed in the editor and published to make it available for end users. http://localhost:8080/apps/websight/index.html/content/example-project/pages/new-page::editor The published page is served by the Nginx container: http://localhost/new-page.html End-to-end tests Test module contains content used during end-to-end tests execution to validate the application. See the example test content and test script for the hello component: The next steps You learned the application development process for WebSight CMS. Now, we recommend exploring more details: Deployment in AWS","title":"Development"},{"location":"docs/developers/development/#development","text":"This document describes application development for WebSight CMS. We assume you completed the project setup guide and generated a new project from the Maven archetype. All the screens and examples presented below refer to the project prepared in the previous step. Note You don\u2019t need to read and understand all the linked content, basic concepts will be explained here. WebSight CMS is based on Apache Sling which \u201cis a framework for RESTful web-applications based on an extensible content tree\u201d\u200b\u200b and OSGi specification - \u201cJava framework specification that supports the deployment of extensible and downloadable applications known as bundles\u201d. What does this mean? The two most important things coming from the technologies WebSight CMS is based on, needed to understand this guide, are OSGi bundles and Resources.","title":"Development"},{"location":"docs/developers/development/#osgi-bundle","text":"OSGi bundle is a unit of modularization in OSGi specification - a bundle is comprised of Java classes and other resources, which together can provide functions to end users. Open http://localhost:8080/system/console/bundles to see all the Bundles on the WebSight CMS instance and use the filter bar at the top to filter the list. Some of the bundles are delivering the OSGi specification implementation (list filtered by org.apache.felix; Apache Felix is an implementation of the OSGi specification): Some of the bundles are delivering Apache Sling functionality (list filtered by org.apache.sling): Some of the bundles are delivering WebSight CMS functionality (list filtered by WebSight): And finally, some of the bundles are delivering the functionality of the application which was just generated from archetype (list filtered by my-artifactId which was used in example project generation at the beginning of the guide): Click on my-artifactId-backend bundle to open details. At the beginning the bundle definitions were mentioned: OSGi bundle is a unit of modularization in OSGi specification - a bundle is comprised of Java classes and other resources, which together can provide functions to end users. At the screen below it is highlighted that the my-artifactId-backend is exporting (making it available to use for other bundles) some Java packages (with use of Export-Package standard OSGi bundle header - provided by bnd-maven-plugin in pom.xml and package-info.java files in the code base) and is providing some resources (with use of Sling-Bundle-Resources bundle header handled by Bundle Resources Provider).","title":"OSGi bundle"},{"location":"docs/developers/development/#resources","text":"As already mentioned: WebSight CMS is based on Apache Sling which \u201cis a framework for RESTful web applications based on an extensible content tree\u201d. It is important to understand the concept of an \u201cextensible content tree\u201d. WebSight CMS Resource Browser admin tool allows browsing all Resources available on the instance. Resources are organized in the tree and every resource has a path and properties. Resources are abstractions that represent objects which might be coming from different sources. Resource Browser provides an option to select \u2018Providers\u2019 (sources of Resources available in the instance) used to display the presented Resources tree. We will focus on JCR and Bundle resources. http://localhost:8080/apps/browser#/ JCR (Java Content Repository) is a database with a tree structure consisting of nodes with properties. Nodes in JCR are reflected by the JCR Resource in the Resources tree. JCR is based on Java specification and implemented by Apache Jackrabbit which is also part of Sling and WebSight CMS (check the bundles list mentioned in the previous chapter and filter by org.apache.jackrabbit to see related bundles). For technical details check the links (it is not needed for this guide, all you need to know is explained in this document): https://sling.apache.org/documentation/the-sling-engine/resources.html https://jackrabbit.apache.org/jcr/jcr-api.html https://developer.adobe.com/experience-manager/reference-materials/spec/jsr170/javadocs/jcr-1.0/ Content stored in JCR is represented by JCR Resources (provided to Resources tree by JCR Resource provider). WebSight CMS is storing JCR content in MongoDB (this is the default setup and we will not go into other options here). JCR is used for all the content created during content authoring. Every created page and every added component is represented by nodes (with properties containing data) in the JCR and Resources tree. Resources could be also provided by OSGi Bundles. From the perspective of the Resources tree and Resource abstraction, there is no difference between resources provided by bundles and JCR. However, the bundle resources are read-only so would not be suitable for authorable content but are great for providing applications. The application resources provided by bundles are available as long as the bundle is available and are not stored in JCR - application data is not mixed with content data which is great from the perspective of Blue-green deployments, CI/CD, and Separation of concerns (but we will not go into details here). For technical details check the link (it is not needed for this guide, all you need to know is explained in this document): https://sling.apache.org/documentation/bundles/bundle-resources-extensions-bundleresource.html This is how bundle resources are provided in the generated project: and the same resource in the resource browser: http://localhost:8080/apps/browser#/apps/example-project/components/hello This is how JCR resources are defined in the codebase in the content module: And in the Resources tree: http://localhost:8080/apps/browser#/content/example-project/pages/homepage/jcr:content","title":"Resources"},{"location":"docs/developers/development/#backend-resources","text":"Generated application/backend module contains in src/main/resources folder example application resources needed to work with Pages in WebSight CMS. The resources structure starts at /apps/example-project path. This path is set in the proper OSGi bundle header to provide the information about resources delivered by the bundle. The following resources are defined: . \u2514\u2500\u2500 apps \u2514\u2500\u2500 example-project - application root \"sling:resourceType\": \"ws:Application\" \u251c\u2500\u2500 components - folder containing components \u2502 \u251c\u2500\u2500 container - example container component \u2502 \u251c\u2500\u2500 hello - example component \u2502 \u2514\u2500\u2500 page - example page component \u2514\u2500\u2500 templates - templates folder \u251c\u2500\u2500 contentpage - example page template \u2514\u2500\u2500 pagesspace - example pages space template Application root should be under /apps resource and must contain property sling:resourceType\" = \"ws:Application . Folders containing components and templates must be named \u2018components\u2019 and \u2018templates\u2019 and be under the application root resource. Different relative paths could be set by providing \u2018components\u2019 or \u2018templates\u2019 properties with relative paths to components or templates folders located under the application root resource - otherwise, components and templates will not be available in the authoring UI.","title":"Backend Resources"},{"location":"docs/developers/development/#pages-space-template","text":"In WebSight CMS content is organized in Spaces - areas where dedicated teams can work on content. WebSight CMS allows the creation of two types of spaces Assets (Digital Assets Manager) - allows managing assets Pages - allows managing pages and assets (includes the same functionality as Assets Space and more) The content module in the project generated from the archetype contains the Pages Space instance \u2018Example project\u2019 visible in the All Spaces view. New space can be created from UI: In the second step, the Space Template needs to be selected in case of Pages Space creation. The list contains the \u2018Example Project Pages\u2019 template defined at /apps/example-project/templates/pagesspace resource. Pages Space template resource must use sling:resourceType equals ws:PagesTemplate and should provide allowedChildren property defining the list of allowed pages templates to create. Another Pages Space template could be defined in the application if needed. For example: /apps/example-project/templates/anotherpagesspace { \"sling:resourceType\" : \"ws:PagesTemplate\" , \"title\" : \"Another Example Project Pages\" , \"allowedChildren\" : [ \"/apps/example-project/templates/contentpage\" ] } To deploy the updated bundle to the running instance, use the command from the backend module folder: mvn clean install -P autoInstallBundle New Pages Space template will be available:","title":"Pages Space template"},{"location":"docs/developers/development/#page-template","text":"Pages spaces are for page management. To create a new page, a page template is needed. Generated backend module provides example page template resource /apps/example-project/templates/contentpage sling:resourceType property of the page template must be ws:PageTemplate. title and description properties are used in UI. allowedChildren property contains an array of page templates that can be created under pages created from this template. The content Page template allows to the creation of subpages of the same type. The /apps/example-project/templates/contentpage was listed in allowedChildren property in the Pages Space template ( /apps/example-project/templates/pagesspace ) which is templates of the Example Project space: This means that page template /apps/example-project/templates/contentpage can be created under pages root in the space: http://localhost:8080/apps/websight/index.html/content/example-project/pages (click Create Page button) In the second step page properties can be set: The dialog displayed at this step is a dialog of the component defined in the initial content of the page template ( sling:resourceType\": \"example-project/components/page ). Read more about components and dialogs in Components documentation. The initial content of the page template is defined in a resource named \u2018initial\u2019 located under the page template resource. The initial content is copied to initialize the created page and properties set via dialog are set on the copied page content. Page is a node of type ws:Page. It contains a page content sub-node named jcr:content of type ws:PageContent. The nodes located under the page content node can be modified via authoring UI. All the Page properties including properties set via page dialog are set on the page content node. This is initial content of /apps/example-project/templates/contentpage page template: This is how the content node of the newly created page looks: New page templates can be created in the application. /apps/example-project/templates/examplpage is a copy of /apps/example-project/templates/contentpage with changed title, allowedChildren /apps/example-project/templates/examplpage { \"sling:resourceType\" : \"ws:PageTemplate\" , \"title\" : \"Example Page\" , \"description\" : \"Example Project\" , \"allowedChildren\" : [ \"/apps/example-project/templates/examplpage\" ] } and initial content: { \"jcr:primaryType\" : \"ws:Page\" , \"jcr:content\" : { \"jcr:primaryType\" : \"ws:PageContent\" , \"sling:resourceType\" : \"example-project/components/page\" , \"container\" : { \"sling:resourceType\" : \"example-project/components/container\" , \"hello\" : { \"sling:resourceType\" : \"example-project/components/hello\" }, \"hello1\" : { \"sling:resourceType\" : \"example-project/components/hello\" , \"helloName\" : \"Example\" } } } } To make it possible to create under pages root in the space it must be added to allowedChildren in pages space template /apps/example-project/templates/pagesspace : Deploy changes again with: mvn clean install -P autoInstallBundle The new template is available to create in pages root: Page created from this template contains defined initial content:","title":"Page template"},{"location":"docs/developers/development/#components","text":"Content is assembled from components - elements rendering parts of content according to implemented functionality. To understand the Components concept see the Components documentation. Generated backend module contains 3 example components located under /apps/example-project/components page - component used to render page content node container - container component - allows adding of the child components via authoring UI hello - component displaying hello text In the editor components list, only the hello component is visible because other components are hidden because of group property value. http://localhost:8080/apps/websight/index.html/content/example-project/pages/new-page::editor New components can be defined to deliver application functionality. We will add a new component named Rich Text which will allow advanced text editing. Create new folder under /apps/example-project/components named richtext with content: { \"sling:resourceType\" : \"ws:Component\" , \"title\" : \"Rich Text\" , \"description\" : \"Allows advanced text edition\" , \"group\" : \"Example Project\" } Define dialog resource: { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"richtext\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"label\" : \"Text\" , \"name\" : \"text\" } } Define rendering script richtext.html (name must be matching component resource name + .html): < data-sly data-sly-test = \"${properties.text && properties.text != '<p></p>'}\" > ${properties.text @ context='html'} </ data-sly > See Components documentation for more details. This is how the new component definition looks in the codebase. Deploy the change with the command from the backend module: mvn clean install -P autoInstallBundle The new component is available now in the editor and can be added to the page. If text is not configured via dialog, nothing is rendered because of the data-sly-test statement in the component renderer. If nothing is rendered by the component the placeholder is displayed automatically in the editor. Edit action can be used to open dialog and use rich text dialog input to configure the text.","title":"Components"},{"location":"docs/developers/development/#frontend","text":"Frontend scripts and resources are provided by the frontend module - webpack project containing the application frontend. During the build, the resources are embedded into a bundle which is also deployed to the instance. The generated module contains just a simple CSS class to center the text used in the hello component. The CSS files are built into the main.css file by webpack and embedded into the OSGi bundle installed on the instance which makes the files available as resources (because of the Sling-Bundle-Resources header in the bundle header). Frontend resources are published automatically because of the WebSight-Apps-WebRoot bundle header (see next chapter about publishing). The CSS file is included in the page component renderer to load the CSS. http://localhost:8080/apps/browser#/apps/example-project/webroot/main.css Add the hello component to the page to see the centered hello text","title":"Frontend"},{"location":"docs/developers/development/#publishing","text":"Assembled content can be previewed in the editor and published to make it available for end users. http://localhost:8080/apps/websight/index.html/content/example-project/pages/new-page::editor The published page is served by the Nginx container: http://localhost/new-page.html","title":"Publishing"},{"location":"docs/developers/development/#end-to-end-tests","text":"Test module contains content used during end-to-end tests execution to validate the application. See the example test content and test script for the hello component:","title":"End-to-end tests"},{"location":"docs/developers/development/#the-next-steps","text":"You learned the application development process for WebSight CMS. Now, we recommend exploring more details: Deployment in AWS","title":"The next steps"},{"location":"docs/developers/development/components/","text":"Components Overview This document describes the components concept and shows the components usage from WebSight CMS authoring interface. In this documentation we will be referring to: WebSight CMS pages editor - UI for authoring pages content WebSight Resource Browse - administration tool allowing to see resources (data and application) available on the WebSight CMS instance Both views can be open from WebSight UI: Check WebSight project setup documentation to see more details about what is WebSight CMS and what it gives you implementing applications for WebSight CMS Community Edition OSGi, OSGi bundles, Sling Resources, JCR, and more What is component Components are: elements rendering parts of content according to implemented functionality used to assemble content (like pages) available in WebSigh CMS authoring interface reusable configurable by editing properties on created components instances implemented by developers shipped in OSGi bundles deployed to WebSight CMS instance Components can: include (embed) other components extend other components deliver initial content define dialog used to edit properties on component instance be containers (allow to add child components during authoring) define allowed child components (in case of containers) Using components Let\u2019s make the statements about what the component is clear by looking at the authoring interface and content data structure. WebSight CMS page editor lists all available components which can be used to build pages at a given WebSight instance (depending on OSGi bundles delivering components installed on the instance). Those components can be added to the page by dragging them to the page content view at the center of the screen. Components definitions listed in WebSight CMS page editor Page content structure can be checked in the page editor content tree tab. This view presents the components tree under page content. This example page for now contains just the Page Section component - this is the only component present currently in page content of this example page. Page content tree in editor The Page Section component is a container, so it allows adding other components via the authoring interface. In the page editor content section it is displayed as a box with plus icon (empty container placeholder). After drag and drop of Title and Rich Text components the page content tree is updated with new nodes. The nodes visible in the content tree are the instances of components. Title and Rich Text components are not containers so other components cannot be added as their child components. During dragging other components from components list the new items can be added just next to those components as other children on the Page Section component. After adding a component to the page, edit action can be used to edit selected component instance. The dialog which is displayed is a part of component definition. It is defined by the developer implementing a given component with use of set given dialog fields (see more in Dialogs documentation). Properties set via the dialog are saved at edited component instances and used by the component to render the part of content according to the implemented functionality - for example Title component is rendering the Heading text field value in HTML <h> tag and allows to set <h> tag level and styling. Components are reusable. Another title component can be added to the page and configured with its own data. After the second title, the Cards List component is added now. This component is a container but implemented to work with specific type of child components - only Card Item components can be added inside (this behavior is part of Cards List component definition). Cards List component defines initial content added to the page when adding component. The initial content contains 3 child Card Item components (to save work during authoring and present the component in initialized state). In the content tree it\u2019s visible that Card Item components are child components of Cards List component. Assembling and configuration of the page content can be continued this way with the use of available components.","title":"Components"},{"location":"docs/developers/development/components/#components","text":"","title":"Components"},{"location":"docs/developers/development/components/#overview","text":"This document describes the components concept and shows the components usage from WebSight CMS authoring interface. In this documentation we will be referring to: WebSight CMS pages editor - UI for authoring pages content WebSight Resource Browse - administration tool allowing to see resources (data and application) available on the WebSight CMS instance Both views can be open from WebSight UI: Check WebSight project setup documentation to see more details about what is WebSight CMS and what it gives you implementing applications for WebSight CMS Community Edition OSGi, OSGi bundles, Sling Resources, JCR, and more","title":"Overview"},{"location":"docs/developers/development/components/#what-is-component","text":"Components are: elements rendering parts of content according to implemented functionality used to assemble content (like pages) available in WebSigh CMS authoring interface reusable configurable by editing properties on created components instances implemented by developers shipped in OSGi bundles deployed to WebSight CMS instance Components can: include (embed) other components extend other components deliver initial content define dialog used to edit properties on component instance be containers (allow to add child components during authoring) define allowed child components (in case of containers)","title":"What is component"},{"location":"docs/developers/development/components/#using-components","text":"Let\u2019s make the statements about what the component is clear by looking at the authoring interface and content data structure. WebSight CMS page editor lists all available components which can be used to build pages at a given WebSight instance (depending on OSGi bundles delivering components installed on the instance). Those components can be added to the page by dragging them to the page content view at the center of the screen. Components definitions listed in WebSight CMS page editor Page content structure can be checked in the page editor content tree tab. This view presents the components tree under page content. This example page for now contains just the Page Section component - this is the only component present currently in page content of this example page. Page content tree in editor The Page Section component is a container, so it allows adding other components via the authoring interface. In the page editor content section it is displayed as a box with plus icon (empty container placeholder). After drag and drop of Title and Rich Text components the page content tree is updated with new nodes. The nodes visible in the content tree are the instances of components. Title and Rich Text components are not containers so other components cannot be added as their child components. During dragging other components from components list the new items can be added just next to those components as other children on the Page Section component. After adding a component to the page, edit action can be used to edit selected component instance. The dialog which is displayed is a part of component definition. It is defined by the developer implementing a given component with use of set given dialog fields (see more in Dialogs documentation). Properties set via the dialog are saved at edited component instances and used by the component to render the part of content according to the implemented functionality - for example Title component is rendering the Heading text field value in HTML <h> tag and allows to set <h> tag level and styling. Components are reusable. Another title component can be added to the page and configured with its own data. After the second title, the Cards List component is added now. This component is a container but implemented to work with specific type of child components - only Card Item components can be added inside (this behavior is part of Cards List component definition). Cards List component defines initial content added to the page when adding component. The initial content contains 3 child Card Item components (to save work during authoring and present the component in initialized state). In the content tree it\u2019s visible that Card Item components are child components of Cards List component. Assembling and configuration of the page content can be continued this way with the use of available components.","title":"Using components"},{"location":"docs/developers/development/components/definition/","text":"Component definition Components are implemented by developers and delivered as resources following defined structure. The resources should be provided in the OSGi bundle. See the project setup documentation for more details. In this section we will see how component definition resources structure should look. Simple component definition example Let's see how simple component definition looks like. We see a component named Say Hello , providing dialog with 1 text field which can be used in the authoring interface to set the hello text rendered on page in <p> HTML tag. If the property is not set, Hello World! text will be used. My example application delivers the resource /apps/example-site/components/hello which is component definition. It contains just 3 properties: sling:resourceType = ws:Component which is making this resource the component definition title = Say Hello which is title of the component visible in authoring UI group = Example group which is a group name visible in authoring UI Example component definition in WebSight Resource Browser The component is visible in the WebSight CMS page editor and after adding to the page it renders \u2018Hello World!\u2019 text. Because the Say Hello component was added to the edited page the corresponding node was created in the page content: The Hello World! text is rendered in the view because of the hello.html resource defined under component definition resource containing the script used to render the content node. The script renders the helloText property value or Hello World! , if property value is empty (which is empty for now, so we see the fallback text). Example component renderer in WebSight Resource Browser. Second resource under the component definition is dialog resource - dialog definition resource. It contains just sling:resourceType = wcm/dialogs/dialog property which defines how the dialog should be displayed (see more details in sections below) and it has sub-node helloText defining text field ( sling:resourceType = wcm/dialogs/textfield ) input with label Hello Text . Example component dialog resources in WebSight Resource Browser. Because the dialog is defined, the edit action in editor allows to open the dialog as set value of the text field. The property value is set on the content node of this Say Hello component instance at helloText property (according to name property value at the text field node in the dialog definition): And now the component renderer script will display the property value instead of fallback text: Let\u2019s see all the options and the details of the component definition. Component definition properties Component definition is a Sling Resource with resource type ws:Component . Use following resource properties to define the component: Component property Required Value Description sling:resourceType Yes ws:Component Defines that this resource is component definition. sling:resourceSuperType No super resource type Set this property to make your component extend another component. This way the extended component elements can be reused in the extending components. Example value: \"wcm/core/components/page\" title Yes string Component name visible in UI. Example value: \u2018Title\u2019 group Yes string Component group name - allows to present related components in UI and is used during defining allowedComponents. Use value \u2018.hidden\u2019 to make the component definition not visible in the UI. Example value: \u2018General\u2019 isContainer No boolean, false by default Defines the component as a container. Containers are components dedicated to contain child components which can be added, removed and reordered with use of the authoring interface. If true then allowedComponents property is required too. allowedComponents No* array of strings, values are absolute component paths and group names. No default value - by default nothing is allowed. *required if isContainer=\u201dtrue\u201d; Array listing allowed child components absolute paths or groups that can be added to the container. Example value: [ \"/apps/my-app/components/component1\", \"/apps/my-app/components/component2\", \"Content\", \"Blog\" ] isLayout No boolean, false by default Defines the component as a layout component. Layout components are displayed in a separate section in WebSight CMS pages editor than components which are not layout components. It\u2019s up to component developer to set isLayout=true, but the guideline is to use it for components which are: - used to define page layout - must contain other components to be usable - contains no logic (other than related to layout calculation) - interacts only on page resize (no other \u201cuser actions\u201d allowed) - has no visible UI elements (like texts) Examples of Layouts: - 2 columns container - 1 column container - Section with title, image, text and CTA (container including components) Example of components which are not Layouts: - image or title or CTA - has visible UI elements (like texts) - logo cloud (contain very specific CSS logic, should not be used to create generic page layouts) - Accordion - contains logic (other than related to layout calculation) - Image gallery - contains logic (other than related to layout calculation) instanceResourceType No resource type which will be set on created component instance If this property is not set then the resource type of every created component instance node will be set to value resolved from the component definition resource path. If set, then this property value will be used instead. This allows multiple components definitions which will be resulting with the same resource type used for created component instances. It could be used to deliver components (or layout components) with different initial content. For example: \u2018Section\u2019 layout component contains embedded Title component and is a container rendering child components below the Title. If the authoring section with 4 columns needs to be created then the \u2018Section\u2019 component needs to be added and then 4 containers need to be added inside and configured to be displayed as columns. If this page layout is commonly used during content authoring then a new layout component could be implemented to simplify the process. \u2018Section with 4 columns\u2019 layout component could be added - instanceResourceType property should be set to \u2018Section\u2019 component resource type and initial content should provide the same structure as was created manually before (section + 4 configured child containers). This way after dropping \u2018Section with 4 columns\u2019 on the page the commonly used content structure would be ready to use immediately. Example value: \"my-app/components/section\" Dialog Dialog is the form with inputs which allows setting data on component instances in content. The form layout, fields and behavior are described by resources starting at a resource named dialog defined under component definition resource. If the dialog resource is not defined, then the edit component properties action is not available in editor. This is how the dialog definition structure looks and the same dialog displayed in editor: Component dialog resources structure in Resource Browser tool Component dialog displayed after edit component action in pages editor Read more in the Dialogs documentation. Rendering script To render components, the rendering script file resource is needed. File resource name should be the same as the component name with .html extension - recommended and supported scripting language in WebSight CMS is the HTL Templating Language. See the HTL specification here If Java support is needed in the HTL, the recommended solution is use of Sling Models and HTL Use-API. See details: use block statement Use-API Sling Models Component renderer script in WebSight Resource Browser. Template Component template is a resource which is getting copied during creating a new component instance added to a page - in other words, it is the initial content of the component. It is used to set default values or prepare needed content structure. Could be used also to save work during content authoring. The component template resource is a component definition sub-node with name template . The template resource is optional - if not present, a new empty node will be created. Component template resources structure (view from WebSight Resource Browser tool). Component instance added to the page content initialized from template (view from WebSight Resource Browser tool).","title":"Component definition"},{"location":"docs/developers/development/components/definition/#component-definition","text":"Components are implemented by developers and delivered as resources following defined structure. The resources should be provided in the OSGi bundle. See the project setup documentation for more details. In this section we will see how component definition resources structure should look.","title":"Component definition"},{"location":"docs/developers/development/components/definition/#simple-component-definition-example","text":"Let's see how simple component definition looks like. We see a component named Say Hello , providing dialog with 1 text field which can be used in the authoring interface to set the hello text rendered on page in <p> HTML tag. If the property is not set, Hello World! text will be used. My example application delivers the resource /apps/example-site/components/hello which is component definition. It contains just 3 properties: sling:resourceType = ws:Component which is making this resource the component definition title = Say Hello which is title of the component visible in authoring UI group = Example group which is a group name visible in authoring UI Example component definition in WebSight Resource Browser The component is visible in the WebSight CMS page editor and after adding to the page it renders \u2018Hello World!\u2019 text. Because the Say Hello component was added to the edited page the corresponding node was created in the page content: The Hello World! text is rendered in the view because of the hello.html resource defined under component definition resource containing the script used to render the content node. The script renders the helloText property value or Hello World! , if property value is empty (which is empty for now, so we see the fallback text). Example component renderer in WebSight Resource Browser. Second resource under the component definition is dialog resource - dialog definition resource. It contains just sling:resourceType = wcm/dialogs/dialog property which defines how the dialog should be displayed (see more details in sections below) and it has sub-node helloText defining text field ( sling:resourceType = wcm/dialogs/textfield ) input with label Hello Text . Example component dialog resources in WebSight Resource Browser. Because the dialog is defined, the edit action in editor allows to open the dialog as set value of the text field. The property value is set on the content node of this Say Hello component instance at helloText property (according to name property value at the text field node in the dialog definition): And now the component renderer script will display the property value instead of fallback text: Let\u2019s see all the options and the details of the component definition.","title":"Simple component definition example"},{"location":"docs/developers/development/components/definition/#component-definition-properties","text":"Component definition is a Sling Resource with resource type ws:Component . Use following resource properties to define the component: Component property Required Value Description sling:resourceType Yes ws:Component Defines that this resource is component definition. sling:resourceSuperType No super resource type Set this property to make your component extend another component. This way the extended component elements can be reused in the extending components. Example value: \"wcm/core/components/page\" title Yes string Component name visible in UI. Example value: \u2018Title\u2019 group Yes string Component group name - allows to present related components in UI and is used during defining allowedComponents. Use value \u2018.hidden\u2019 to make the component definition not visible in the UI. Example value: \u2018General\u2019 isContainer No boolean, false by default Defines the component as a container. Containers are components dedicated to contain child components which can be added, removed and reordered with use of the authoring interface. If true then allowedComponents property is required too. allowedComponents No* array of strings, values are absolute component paths and group names. No default value - by default nothing is allowed. *required if isContainer=\u201dtrue\u201d; Array listing allowed child components absolute paths or groups that can be added to the container. Example value: [ \"/apps/my-app/components/component1\", \"/apps/my-app/components/component2\", \"Content\", \"Blog\" ] isLayout No boolean, false by default Defines the component as a layout component. Layout components are displayed in a separate section in WebSight CMS pages editor than components which are not layout components. It\u2019s up to component developer to set isLayout=true, but the guideline is to use it for components which are: - used to define page layout - must contain other components to be usable - contains no logic (other than related to layout calculation) - interacts only on page resize (no other \u201cuser actions\u201d allowed) - has no visible UI elements (like texts) Examples of Layouts: - 2 columns container - 1 column container - Section with title, image, text and CTA (container including components) Example of components which are not Layouts: - image or title or CTA - has visible UI elements (like texts) - logo cloud (contain very specific CSS logic, should not be used to create generic page layouts) - Accordion - contains logic (other than related to layout calculation) - Image gallery - contains logic (other than related to layout calculation) instanceResourceType No resource type which will be set on created component instance If this property is not set then the resource type of every created component instance node will be set to value resolved from the component definition resource path. If set, then this property value will be used instead. This allows multiple components definitions which will be resulting with the same resource type used for created component instances. It could be used to deliver components (or layout components) with different initial content. For example: \u2018Section\u2019 layout component contains embedded Title component and is a container rendering child components below the Title. If the authoring section with 4 columns needs to be created then the \u2018Section\u2019 component needs to be added and then 4 containers need to be added inside and configured to be displayed as columns. If this page layout is commonly used during content authoring then a new layout component could be implemented to simplify the process. \u2018Section with 4 columns\u2019 layout component could be added - instanceResourceType property should be set to \u2018Section\u2019 component resource type and initial content should provide the same structure as was created manually before (section + 4 configured child containers). This way after dropping \u2018Section with 4 columns\u2019 on the page the commonly used content structure would be ready to use immediately. Example value: \"my-app/components/section\"","title":"Component definition properties"},{"location":"docs/developers/development/components/definition/#dialog","text":"Dialog is the form with inputs which allows setting data on component instances in content. The form layout, fields and behavior are described by resources starting at a resource named dialog defined under component definition resource. If the dialog resource is not defined, then the edit component properties action is not available in editor. This is how the dialog definition structure looks and the same dialog displayed in editor: Component dialog resources structure in Resource Browser tool Component dialog displayed after edit component action in pages editor Read more in the Dialogs documentation.","title":"Dialog"},{"location":"docs/developers/development/components/definition/#rendering-script","text":"To render components, the rendering script file resource is needed. File resource name should be the same as the component name with .html extension - recommended and supported scripting language in WebSight CMS is the HTL Templating Language. See the HTL specification here If Java support is needed in the HTL, the recommended solution is use of Sling Models and HTL Use-API. See details: use block statement Use-API Sling Models Component renderer script in WebSight Resource Browser.","title":"Rendering script"},{"location":"docs/developers/development/components/definition/#template","text":"Component template is a resource which is getting copied during creating a new component instance added to a page - in other words, it is the initial content of the component. It is used to set default values or prepare needed content structure. Could be used also to save work during content authoring. The component template resource is a component definition sub-node with name template . The template resource is optional - if not present, a new empty node will be created. Component template resources structure (view from WebSight Resource Browser tool). Component instance added to the page content initialized from template (view from WebSight Resource Browser tool).","title":"Template"},{"location":"docs/developers/development/dialogs/","text":"Dialogs Dialogs framework which is part of WebSight CMS allows to define dialog fields components used to build the dialog used to submit data saved in content resources. WebSight CMS delivers set of ready to use components, see subsections of this documentation for details. Example dialog structure definition can look like this: { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"properties\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Properties\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"label\" : \"Title\" , \"name\" : \"title\" }, \"description\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"label\" : \"Description\" , \"name\" : \"description\" } }, \"advanced\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Advanced\" , \"shadows\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"shadows\" , \"label\" : \"Use shadows\" }, \"style\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select\" , \"label\" : \"Style\" , \"name\" : \"style\" , \"primary\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Primary\" , \"value\" : \"primary\" }, \"secondary\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Secondary\" , \"selected\" : true , \"value\" : \"secondary\" }, \"link\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Link\" , \"value\" : \"link\" } } } } } It will result with following in UI dialog: Explore available fields and options.","title":"Dialogs"},{"location":"docs/developers/development/dialogs/#dialogs","text":"Dialogs framework which is part of WebSight CMS allows to define dialog fields components used to build the dialog used to submit data saved in content resources. WebSight CMS delivers set of ready to use components, see subsections of this documentation for details. Example dialog structure definition can look like this: { \"sling:resourceType\" : \"wcm/dialogs/dialog\" , \"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"properties\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Properties\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"label\" : \"Title\" , \"name\" : \"title\" }, \"description\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"label\" : \"Description\" , \"name\" : \"description\" } }, \"advanced\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Advanced\" , \"shadows\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"shadows\" , \"label\" : \"Use shadows\" }, \"style\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select\" , \"label\" : \"Style\" , \"name\" : \"style\" , \"primary\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Primary\" , \"value\" : \"primary\" }, \"secondary\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Secondary\" , \"selected\" : true , \"value\" : \"secondary\" }, \"link\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Link\" , \"value\" : \"link\" } } } } } It will result with following in UI dialog: Explore available fields and options.","title":"Dialogs"},{"location":"docs/developers/development/dialogs/assetreference/","text":"Asset Reference wcm/dialogs/components/assetreference Description Asset reference is an input that allows the user to pick an asset from the space by dragging it from the assets tab on the left sidebar. It will only allow dropping assets that match the mime type of the field\u2019s configuration Properties name - string (required) Form field name label - string Display label value required - string Indicates if field value is mandatory mimeTypes - string[] List of allowed MIME Types that can be dropped on the field - it supports simple wildcards like image/* or * emptyText - string (if not defined, \"Drop asset here\" ) Text that will be displayed in the drop area when an asset is not selected Example \"imageAsset\" : { \"sling:resourceType\" : \"wcm/dialogs/components/assetreference\" , \"mimeTypes\" : [ \"image/*\" ], \"name\" : \"imageAsset\" , \"label\" : \"Image Asset\" }","title":"Asset Reference"},{"location":"docs/developers/development/dialogs/assetreference/#asset-reference","text":"wcm/dialogs/components/assetreference","title":"Asset Reference"},{"location":"docs/developers/development/dialogs/assetreference/#description","text":"Asset reference is an input that allows the user to pick an asset from the space by dragging it from the assets tab on the left sidebar. It will only allow dropping assets that match the mime type of the field\u2019s configuration","title":"Description"},{"location":"docs/developers/development/dialogs/assetreference/#properties","text":"name - string (required) Form field name label - string Display label value required - string Indicates if field value is mandatory mimeTypes - string[] List of allowed MIME Types that can be dropped on the field - it supports simple wildcards like image/* or * emptyText - string (if not defined, \"Drop asset here\" ) Text that will be displayed in the drop area when an asset is not selected","title":"Properties"},{"location":"docs/developers/development/dialogs/assetreference/#example","text":"\"imageAsset\" : { \"sling:resourceType\" : \"wcm/dialogs/components/assetreference\" , \"mimeTypes\" : [ \"image/*\" ], \"name\" : \"imageAsset\" , \"label\" : \"Image Asset\" }","title":"Example"},{"location":"docs/developers/development/dialogs/checkbox/","text":"Checkbox wcm/dialogs/components/checkbox Description Allows user choose check some option. Properties name - string (required) Form field name label - string (required) Display label value checkedByDefault - string Indicates if field should be checked by default. Default: \u201cfalse\u201d. checkedValue - string Define what value will be saved in JCR if checkbox is checked. Default: \u201ctrue\u201d String uncheckedValue - string Define what value will be saved in JCR if checkbox is NOT checked. Default: \u201cfalse\u201d String description - string Display description value as a tooltip Example \"isSlider\" : { \"sling:resourceType\" : \"wcm/dialogs/components/checkbox\" , \"name\" : \"isSlider\" , \"label\" : \"Display as a slider\" , \"checkedByDefault\" : \"true\" }","title":"Checkbox"},{"location":"docs/developers/development/dialogs/checkbox/#checkbox","text":"wcm/dialogs/components/checkbox","title":"Checkbox"},{"location":"docs/developers/development/dialogs/checkbox/#description","text":"Allows user choose check some option.","title":"Description"},{"location":"docs/developers/development/dialogs/checkbox/#properties","text":"name - string (required) Form field name label - string (required) Display label value checkedByDefault - string Indicates if field should be checked by default. Default: \u201cfalse\u201d. checkedValue - string Define what value will be saved in JCR if checkbox is checked. Default: \u201ctrue\u201d String uncheckedValue - string Define what value will be saved in JCR if checkbox is NOT checked. Default: \u201cfalse\u201d String description - string Display description value as a tooltip","title":"Properties"},{"location":"docs/developers/development/dialogs/checkbox/#example","text":"\"isSlider\" : { \"sling:resourceType\" : \"wcm/dialogs/components/checkbox\" , \"name\" : \"isSlider\" , \"label\" : \"Display as a slider\" , \"checkedByDefault\" : \"true\" }","title":"Example"},{"location":"docs/developers/development/dialogs/container/","text":"Container wcm/dialogs/components/container Description: Component allows to group other elements. May be useful e.g. to show/hide group of components. Example: \"container\" : { \"sling:resourceType\" : \"wcm/dialogs/components/container\" , \"firstelement\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"firstelement\" , \"label\" : \"First element\" }, \"secondelement\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"secondelement\" , \"label\" : \"Second element\" } }","title":"Container"},{"location":"docs/developers/development/dialogs/container/#container","text":"wcm/dialogs/components/container","title":"Container"},{"location":"docs/developers/development/dialogs/container/#description","text":"Component allows to group other elements. May be useful e.g. to show/hide group of components.","title":"Description:"},{"location":"docs/developers/development/dialogs/container/#example","text":"\"container\" : { \"sling:resourceType\" : \"wcm/dialogs/components/container\" , \"firstelement\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"firstelement\" , \"label\" : \"First element\" }, \"secondelement\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"secondelement\" , \"label\" : \"Second element\" } }","title":"Example:"},{"location":"docs/developers/development/dialogs/date-picker/","text":"Date Picker wcm/dialogs/components/datepicker Description Allows user to pick a date, time or datetime. Properties name - string (required) Form field name label - string (required) Display label value required - string Indicates if field value is mandatory type - string The type of the datepicker. It can be one of date , time or datetime . Default value is date . displayDateFormat - string Date format that will be used to format date on the user interface. It does not affect the way the date is saved. Format should be accepted by date-fn\u2019s format function . displayTimeFormat - string Time format that will be used to format time on the user interface. It does not affect the way the time is saved. Format should be accepted by date-fn\u2019s format function . minDate - string Low boundary of the selected date or datetime. Format should be: yyyy-MM-dd . E.g.: 2022-02-02 maxDate - string High boundary of the selected date or datetime. Format should be: yyyy-MM-dd . E.g.: 2022-02-02 after - string Comma separated values of other datepickers. These datepickers\u2019s values should be lower than the selected date. before - string Comma separated values of other datepickers. These datepickers\u2019s values should be higher the selected date. Example \"displayDate\" : { \"sling:resourceType\" : \"wcm/dialogs/components/datepicker\" , \"name\" : \"displayDate\" , \"label\" : \"Display date\" , \"type\" : \"date\" , \"displayDateFormat\" : \"YYYY-MM-DD\" }","title":"Date Picker"},{"location":"docs/developers/development/dialogs/date-picker/#date-picker","text":"wcm/dialogs/components/datepicker","title":"Date Picker"},{"location":"docs/developers/development/dialogs/date-picker/#description","text":"Allows user to pick a date, time or datetime.","title":"Description"},{"location":"docs/developers/development/dialogs/date-picker/#properties","text":"name - string (required) Form field name label - string (required) Display label value required - string Indicates if field value is mandatory type - string The type of the datepicker. It can be one of date , time or datetime . Default value is date . displayDateFormat - string Date format that will be used to format date on the user interface. It does not affect the way the date is saved. Format should be accepted by date-fn\u2019s format function . displayTimeFormat - string Time format that will be used to format time on the user interface. It does not affect the way the time is saved. Format should be accepted by date-fn\u2019s format function . minDate - string Low boundary of the selected date or datetime. Format should be: yyyy-MM-dd . E.g.: 2022-02-02 maxDate - string High boundary of the selected date or datetime. Format should be: yyyy-MM-dd . E.g.: 2022-02-02 after - string Comma separated values of other datepickers. These datepickers\u2019s values should be lower than the selected date. before - string Comma separated values of other datepickers. These datepickers\u2019s values should be higher the selected date.","title":"Properties"},{"location":"docs/developers/development/dialogs/date-picker/#example","text":"\"displayDate\" : { \"sling:resourceType\" : \"wcm/dialogs/components/datepicker\" , \"name\" : \"displayDate\" , \"label\" : \"Display date\" , \"type\" : \"date\" , \"displayDateFormat\" : \"YYYY-MM-DD\" }","title":"Example"},{"location":"docs/developers/development/dialogs/include/","text":"Include wcm/dialogs/components/include Description Allows users to include other components. Typically used to avoid code duplication. When having a component (e.g. select component for heading levels) that is used in multiple places, we can extract it to a common place and include it everywhere instead of duplicating it. Properties path - string (optional if we customize the included component. See customization below) The path of the resource that needs to be included. namespace - string (optional) If we include the same component multiple times, then we will have name conflict. To avoid it, we can set the namespace property. The name properties' values will be prepended by this namespace. For example: if the included component\u2019s name property is authorName and we set book1 as namespace, then the name will be book1/authorName while reading and saving the dialog. \"headingLevel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/headinglevel\" , \"namespace\" : \"secondsubtitle\" } Customization Sometimes it is not enough to simply include some other components and use the default settings provided by the included component. We can easily customize it by creating a child node named include . If we do so, we have to set the sling:resourceSuperType property. Its value should be the path of the component that we want to include. After sling:resourceSuperType is set up correctly, we can add properties to the include node. Additionally we can create a similar subtree as the included component\u2019s subtree and we can add/override properties on children nodes as well. Note: under the hood, Sling resource merger is doing the trick for us. This means that we can use properties like sling:hideResource , sling:orderBefore , etc. Included component { \"sling:resourceType\" : \"wcm/dialogs/components/radio\" , \"name\" : \"headingLevel\" , \"description\" : \"HTML heading level help to communicate the organization and hierarchy of the content (for SEO and accessibility)\" , \"label\" : \"Heading level\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H1\" , \"value\" : \"h1\" }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H2\" , \"selected\" : true , \"value\" : \"h2\" }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H3\" , \"value\" : \"h3\" } } Include component \"includedHeadingLevel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"include\" : { \"sling:resourceSuperType\" : \"/libs/howlite/components/common/headinglevel\" , \"label\" : \"Custom label\" , \"h1\" : { \"sling:hideResource\" : \"true\" }, \"h2\" : { \"selected\" : false }, \"h3\" : { \"selected\" : true }, \"h4\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H4\" , \"value\" : \"h4\" } } } Result: (this will be included in the end) { \"sling:resourceType\" : \"wcm/dialogs/components/radio\" , \"name\" : \"headingLevel\" , \"description\" : \"HTML heading level help to communicate the organization and hierarchy of the content (for SEO and accessibility)\" , \"label\" : \"Custom label\" , \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H2\" , \"value\" : \"h2\" }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H3\" , \"selected\" : true , \"value\" : \"h3\" }, \"h4\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H4\" , \"value\" : \"h4\" } }","title":"Include"},{"location":"docs/developers/development/dialogs/include/#include","text":"wcm/dialogs/components/include","title":"Include"},{"location":"docs/developers/development/dialogs/include/#description","text":"Allows users to include other components. Typically used to avoid code duplication. When having a component (e.g. select component for heading levels) that is used in multiple places, we can extract it to a common place and include it everywhere instead of duplicating it.","title":"Description"},{"location":"docs/developers/development/dialogs/include/#properties","text":"path - string (optional if we customize the included component. See customization below) The path of the resource that needs to be included. namespace - string (optional) If we include the same component multiple times, then we will have name conflict. To avoid it, we can set the namespace property. The name properties' values will be prepended by this namespace. For example: if the included component\u2019s name property is authorName and we set book1 as namespace, then the name will be book1/authorName while reading and saving the dialog. \"headingLevel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"path\" : \"/libs/howlite/components/common/headinglevel\" , \"namespace\" : \"secondsubtitle\" }","title":"Properties"},{"location":"docs/developers/development/dialogs/include/#customization","text":"Sometimes it is not enough to simply include some other components and use the default settings provided by the included component. We can easily customize it by creating a child node named include . If we do so, we have to set the sling:resourceSuperType property. Its value should be the path of the component that we want to include. After sling:resourceSuperType is set up correctly, we can add properties to the include node. Additionally we can create a similar subtree as the included component\u2019s subtree and we can add/override properties on children nodes as well. Note: under the hood, Sling resource merger is doing the trick for us. This means that we can use properties like sling:hideResource , sling:orderBefore , etc.","title":"Customization"},{"location":"docs/developers/development/dialogs/include/#included-component","text":"{ \"sling:resourceType\" : \"wcm/dialogs/components/radio\" , \"name\" : \"headingLevel\" , \"description\" : \"HTML heading level help to communicate the organization and hierarchy of the content (for SEO and accessibility)\" , \"label\" : \"Heading level\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H1\" , \"value\" : \"h1\" }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H2\" , \"selected\" : true , \"value\" : \"h2\" }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H3\" , \"value\" : \"h3\" } }","title":"Included component"},{"location":"docs/developers/development/dialogs/include/#include-component","text":"\"includedHeadingLevel\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"include\" : { \"sling:resourceSuperType\" : \"/libs/howlite/components/common/headinglevel\" , \"label\" : \"Custom label\" , \"h1\" : { \"sling:hideResource\" : \"true\" }, \"h2\" : { \"selected\" : false }, \"h3\" : { \"selected\" : true }, \"h4\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H4\" , \"value\" : \"h4\" } } }","title":"Include component"},{"location":"docs/developers/development/dialogs/include/#result-this-will-be-included-in-the-end","text":"{ \"sling:resourceType\" : \"wcm/dialogs/components/radio\" , \"name\" : \"headingLevel\" , \"description\" : \"HTML heading level help to communicate the organization and hierarchy of the content (for SEO and accessibility)\" , \"label\" : \"Custom label\" , \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H2\" , \"value\" : \"h2\" }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H3\" , \"selected\" : true , \"value\" : \"h3\" }, \"h4\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H4\" , \"value\" : \"h4\" } }","title":"Result: (this will be included in the end)"},{"location":"docs/developers/development/dialogs/multifield/","text":"Multifield wcm/dialogs/components/textfield Description Multifield component allows to add/reorder/remove multiple instances of a field. In the simplest case, this is a simple form input field (e.g. TextField, TextArea) but it can also be a complex component acting as an aggregate of multiple subcomponents (e.g. address entry). Field used in multifield behaves the same as in plain dialog - e.g. hiding labels. Properties name - string (required) Form field name label - string Display label value required Indicates if field value is mandatory Example Multifield with TextField: \"users\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"users\" , \"label\" : \"users\" , \"name\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"name\" , \"label\" : \"name\" } } Multifield with nested Multiefield \"users\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"users\" , \"label\" : \"Users\" , \"namefield\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"name\" , \"label\" : \"Name\" }, \"addresses\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"addresses\" , \"label\" : \"Addresses\" , \"street\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"street\" , \"label\" : \"Street\" } } }","title":"Multifield"},{"location":"docs/developers/development/dialogs/multifield/#multifield","text":"wcm/dialogs/components/textfield","title":"Multifield"},{"location":"docs/developers/development/dialogs/multifield/#description","text":"Multifield component allows to add/reorder/remove multiple instances of a field. In the simplest case, this is a simple form input field (e.g. TextField, TextArea) but it can also be a complex component acting as an aggregate of multiple subcomponents (e.g. address entry). Field used in multifield behaves the same as in plain dialog - e.g. hiding labels.","title":"Description"},{"location":"docs/developers/development/dialogs/multifield/#properties","text":"name - string (required) Form field name label - string Display label value required Indicates if field value is mandatory","title":"Properties"},{"location":"docs/developers/development/dialogs/multifield/#example","text":"Multifield with TextField: \"users\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"users\" , \"label\" : \"users\" , \"name\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"name\" , \"label\" : \"name\" } } Multifield with nested Multiefield \"users\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"users\" , \"label\" : \"Users\" , \"namefield\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"name\" , \"label\" : \"Name\" }, \"addresses\" : { \"sling:resourceType\" : \"wcm/dialogs/components/multifield\" , \"name\" : \"addresses\" , \"label\" : \"Addresses\" , \"street\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"street\" , \"label\" : \"Street\" } } }","title":"Example"},{"location":"docs/developers/development/dialogs/number-field/","text":"Number Field wcm/dialogs/components/numberfield Description Allows user to enter numbers. If empty then respective property in JCR doesn\u2019t exist. Properties name - string (required) Form field name label - string Display label value min - string Minimal value possible to enter max - string Maximum value possible to enter step - string (default value = 1) The value granularity. number - greater than zero. Indicates that the field accepts only values at multiples of the step. \"any\" - special value. Indicates that the value can be in any number. required Indicates if field value is mandatory description - string Display description value as a tooltip Example \"width\" : { \"sling:resourceType\" : \"wcm/dialogs/components/numberfield\" , \"name\" : \"width\" , \"label\" : \"Width\" , \"min\" : 0 , \"max\" : 1000 , \"step\" : 0.01 }","title":"Number Field"},{"location":"docs/developers/development/dialogs/number-field/#number-field","text":"wcm/dialogs/components/numberfield","title":"Number Field"},{"location":"docs/developers/development/dialogs/number-field/#description","text":"Allows user to enter numbers. If empty then respective property in JCR doesn\u2019t exist.","title":"Description"},{"location":"docs/developers/development/dialogs/number-field/#properties","text":"name - string (required) Form field name label - string Display label value min - string Minimal value possible to enter max - string Maximum value possible to enter step - string (default value = 1) The value granularity. number - greater than zero. Indicates that the field accepts only values at multiples of the step. \"any\" - special value. Indicates that the value can be in any number. required Indicates if field value is mandatory description - string Display description value as a tooltip","title":"Properties"},{"location":"docs/developers/development/dialogs/number-field/#example","text":"\"width\" : { \"sling:resourceType\" : \"wcm/dialogs/components/numberfield\" , \"name\" : \"width\" , \"label\" : \"Width\" , \"min\" : 0 , \"max\" : 1000 , \"step\" : 0.01 }","title":"Example"},{"location":"docs/developers/development/dialogs/pathpicker/","text":"Path Picker wcm/dialogs/components/pathpicker Description Path picker is an input that allows the user pick path of resource from repository or to introduce external links. If the value starts with / the path picker will autosuggest possible values. Properties name - string (required) Form field name label - string Display label value required - string Indicates if field value is mandatory rootPath - string If set, suggestions are filtered to the given root path. forceRootPath - string (if not defined false ) Indicates whether the input value should be validated to start with the given rootPath value. removeIfEmpty - string (if not defined false ) Indicates if property in JCR will be removed, if contains empty String, or will be kept with that value description - string Display description value as a tooltip placeholder - string Override for the placeholder text that appears when the value is empty. Example \"link\" : { \"sling:resourceType\" : \"wcm/dialogs/components/pathpicker\" , \"rootPath\" : \"/content\" , \"name\" : \"link\" , \"label\" : \"URL\" , \"forceRootPath\" : true }","title":"Path Picker"},{"location":"docs/developers/development/dialogs/pathpicker/#path-picker","text":"wcm/dialogs/components/pathpicker","title":"Path Picker"},{"location":"docs/developers/development/dialogs/pathpicker/#description","text":"Path picker is an input that allows the user pick path of resource from repository or to introduce external links. If the value starts with / the path picker will autosuggest possible values.","title":"Description"},{"location":"docs/developers/development/dialogs/pathpicker/#properties","text":"name - string (required) Form field name label - string Display label value required - string Indicates if field value is mandatory rootPath - string If set, suggestions are filtered to the given root path. forceRootPath - string (if not defined false ) Indicates whether the input value should be validated to start with the given rootPath value. removeIfEmpty - string (if not defined false ) Indicates if property in JCR will be removed, if contains empty String, or will be kept with that value description - string Display description value as a tooltip placeholder - string Override for the placeholder text that appears when the value is empty.","title":"Properties"},{"location":"docs/developers/development/dialogs/pathpicker/#example","text":"\"link\" : { \"sling:resourceType\" : \"wcm/dialogs/components/pathpicker\" , \"rootPath\" : \"/content\" , \"name\" : \"link\" , \"label\" : \"URL\" , \"forceRootPath\" : true }","title":"Example"},{"location":"docs/developers/development/dialogs/radio/","text":"Radio wcm/dialogs/components/radio Description Allows user to pick exactly one from many available options. Properties name - string (required) Form field name label - string (required) Display label value description - string Display description value as a tooltip required - string Indicates if field value is mandatory removeIfEmpty - string (if not defined false ) Indicates if property in JCR will be removed, if contains empty String, or will be kept with that value It should contain child nodes with options. One of this options will be checked by default. If none option will be marked as selected than first one will be chosen. If more than one option will be marked as selected than first ot them will be chosen. Option wcm/dialogs/components/radio/option Description Defines one of the available option. Properties label - string (required) Display label value - string (required) Value of choosen option selected - string Indicates if field is selected by default. By default, this option will not be saved in the properties unless the user selects an option manually. So in order to make things work perfectly, we should use the same default value in the backend side as well. Example { \"sling:resourceType\" : \"wcm/dialogs/components/radio\" , \"name\" : \"headingLevel\" , \"description\" : \"HTML heading level help to communicate the organization and hierarchy of the content (for SEO and accessibility)\" , \"label\" : \"Heading level\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H1\" , \"value\" : \"h1\" }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H2\" , \"selected\" : true , \"value\" : \"h2\" }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H3\" , \"value\" : \"h3\" } }","title":"Radio"},{"location":"docs/developers/development/dialogs/radio/#radio","text":"wcm/dialogs/components/radio","title":"Radio"},{"location":"docs/developers/development/dialogs/radio/#description","text":"Allows user to pick exactly one from many available options.","title":"Description"},{"location":"docs/developers/development/dialogs/radio/#properties","text":"name - string (required) Form field name label - string (required) Display label value description - string Display description value as a tooltip required - string Indicates if field value is mandatory removeIfEmpty - string (if not defined false ) Indicates if property in JCR will be removed, if contains empty String, or will be kept with that value It should contain child nodes with options. One of this options will be checked by default. If none option will be marked as selected than first one will be chosen. If more than one option will be marked as selected than first ot them will be chosen.","title":"Properties"},{"location":"docs/developers/development/dialogs/radio/#option","text":"wcm/dialogs/components/radio/option","title":"Option"},{"location":"docs/developers/development/dialogs/radio/#description_1","text":"Defines one of the available option.","title":"Description"},{"location":"docs/developers/development/dialogs/radio/#properties_1","text":"label - string (required) Display label value - string (required) Value of choosen option selected - string Indicates if field is selected by default. By default, this option will not be saved in the properties unless the user selects an option manually. So in order to make things work perfectly, we should use the same default value in the backend side as well.","title":"Properties"},{"location":"docs/developers/development/dialogs/radio/#example","text":"{ \"sling:resourceType\" : \"wcm/dialogs/components/radio\" , \"name\" : \"headingLevel\" , \"description\" : \"HTML heading level help to communicate the organization and hierarchy of the content (for SEO and accessibility)\" , \"label\" : \"Heading level\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H1\" , \"value\" : \"h1\" }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H2\" , \"selected\" : true , \"value\" : \"h2\" }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/radio/option\" , \"label\" : \"H3\" , \"value\" : \"h3\" } }","title":"Example"},{"location":"docs/developers/development/dialogs/richtext-editor/","text":"Rich Text Editor wcm/dialogs/components/richtext Description Provides many functionalities allows authors to edit text content. Component requires configuration which defines what functionalities should be available and how menu bar should looks like. Properties name - string (required) Form field name label - string (optional) Display label value required - string (optional, default false ) Indicates if field value is mandatory removeIfEmpty - string (optional, default false ) Indicates if the property in JCR will be removed, if contains an empty String, or will be kept with that value description - string (optional) Display description value as tooltip configuration - string (optional, default /apps/wcm/dialogs/components/richtext/configuration ) absolute path to configuration node; configuration can be also defined inline, see RichText Editor - configuration Example: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" }","title":"Rich Text Editor"},{"location":"docs/developers/development/dialogs/richtext-editor/#rich-text-editor","text":"wcm/dialogs/components/richtext","title":"Rich Text Editor"},{"location":"docs/developers/development/dialogs/richtext-editor/#description","text":"Provides many functionalities allows authors to edit text content. Component requires configuration which defines what functionalities should be available and how menu bar should looks like.","title":"Description"},{"location":"docs/developers/development/dialogs/richtext-editor/#properties","text":"name - string (required) Form field name label - string (optional) Display label value required - string (optional, default false ) Indicates if field value is mandatory removeIfEmpty - string (optional, default false ) Indicates if the property in JCR will be removed, if contains an empty String, or will be kept with that value description - string (optional) Display description value as tooltip configuration - string (optional, default /apps/wcm/dialogs/components/richtext/configuration ) absolute path to configuration node; configuration can be also defined inline, see RichText Editor - configuration Example: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" }","title":"Properties"},{"location":"docs/developers/development/dialogs/richtext-editor/configuration/","text":"Rich Text Editor Configuration Configuration defines RTE toolbar and functionalities Using configuration RTE provides default configuration at /apps/wcm/dialogs/components/richtext/configuration . Configuration can be referenced by path or defined inline. If inline configuration is defined then referenced configuration is ignored. Example using default configuration defined by RTE: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" } Referencing configuration RTE component allows to define configuration string propery. Value is a absolute path to configuration node. Referencing configuration by path: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" , \"configuration\" : \"/apps/myapp/components/common/rte/myconfiguration\" } Inline configuration Inline configuration can be definde in dialog under RTE filed in node named configuration . Inline configuration defined by RTE: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" , \"configuration\" : { \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } } } } Extending and overriding configuration Configuration (referenced or inline) can extend other configuration by using sling:resourceSuperType , see Sling Resource Merger (/mnt/override) and customize it with options comming from Resource Merger, like sling:hideChildren . \"configuration\" : { \"sling:resourceSuperType\" : \"wcm/dialogs/components/richtext/configuration\" , \"sling:hideChildren\" : \"[italic]\" , \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } } } Building configuration Configuration is prepared by two kinds of components: UI - components define UI element added to menu bar. plugin - components provide functionality Separation UI and plugin components allows to define toolbar in many variants depending of authors needs. E.g. bold action can be added as a separated button or one of buttons grouped in the dropdown, different headings can be added in a dropdown list or as a separated buttons. There is also possibility to create dedicated UI components and build whole toolbar using just them, or create new plugin and add it to toolbar using existing UI component. Configuration examples: \"textstyle\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown\" , \"title\" : \"Text Style\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 1\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 1 } }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 2\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 2 } }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 3\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 3 } } }, \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }, \"italic\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Italic\" , \"icon\" : \"format_italic\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/italic\" } } \"textformat\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/buttondropdown\" , \"icon\" : \"more_horiz\" , \"activable\" : true , \"title\" : \"Text Format\" , \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }, \"italic\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Italic\" , \"icon\" : \"format_italic\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/italic\" } } }, \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Heading 1\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 1 } }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Heading 2\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 2 } }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Heading 3\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 3 } } Available Components Available UI components Button Button Dropdown Dropdown Link Available plugin components Available plugin components are described in Plugin Configuration Custom Components There is a possibility to prepare custom components. To do so there is a need to prepare files according to UI or plugin specification. In case of plugin component there is also need to provide TipTap extensions. They can be taken from existing extensions or written by a developer according to TipTap extension interface.","title":"Rich Text Editor Configuration"},{"location":"docs/developers/development/dialogs/richtext-editor/configuration/#rich-text-editor-configuration","text":"Configuration defines RTE toolbar and functionalities","title":"Rich Text Editor Configuration"},{"location":"docs/developers/development/dialogs/richtext-editor/configuration/#using-configuration","text":"RTE provides default configuration at /apps/wcm/dialogs/components/richtext/configuration . Configuration can be referenced by path or defined inline. If inline configuration is defined then referenced configuration is ignored. Example using default configuration defined by RTE: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" }","title":"Using configuration"},{"location":"docs/developers/development/dialogs/richtext-editor/configuration/#referencing-configuration","text":"RTE component allows to define configuration string propery. Value is a absolute path to configuration node. Referencing configuration by path: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" , \"configuration\" : \"/apps/myapp/components/common/rte/myconfiguration\" }","title":"Referencing configuration"},{"location":"docs/developers/development/dialogs/richtext-editor/configuration/#inline-configuration","text":"Inline configuration can be definde in dialog under RTE filed in node named configuration . Inline configuration defined by RTE: \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext\" , \"name\" : \"content\" , \"label\" : \"Content\" , \"configuration\" : { \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } } } }","title":"Inline configuration"},{"location":"docs/developers/development/dialogs/richtext-editor/configuration/#extending-and-overriding-configuration","text":"Configuration (referenced or inline) can extend other configuration by using sling:resourceSuperType , see Sling Resource Merger (/mnt/override) and customize it with options comming from Resource Merger, like sling:hideChildren . \"configuration\" : { \"sling:resourceSuperType\" : \"wcm/dialogs/components/richtext/configuration\" , \"sling:hideChildren\" : \"[italic]\" , \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } } }","title":"Extending and overriding configuration"},{"location":"docs/developers/development/dialogs/richtext-editor/configuration/#building-configuration","text":"Configuration is prepared by two kinds of components: UI - components define UI element added to menu bar. plugin - components provide functionality Separation UI and plugin components allows to define toolbar in many variants depending of authors needs. E.g. bold action can be added as a separated button or one of buttons grouped in the dropdown, different headings can be added in a dropdown list or as a separated buttons. There is also possibility to create dedicated UI components and build whole toolbar using just them, or create new plugin and add it to toolbar using existing UI component. Configuration examples: \"textstyle\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown\" , \"title\" : \"Text Style\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 1\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 1 } }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 2\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 2 } }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 3\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 3 } } }, \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }, \"italic\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Italic\" , \"icon\" : \"format_italic\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/italic\" } } \"textformat\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/buttondropdown\" , \"icon\" : \"more_horiz\" , \"activable\" : true , \"title\" : \"Text Format\" , \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }, \"italic\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Italic\" , \"icon\" : \"format_italic\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/italic\" } } }, \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Heading 1\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 1 } }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Heading 2\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 2 } }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Heading 3\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 3 } }","title":"Building configuration"},{"location":"docs/developers/development/dialogs/richtext-editor/configuration/#available-components","text":"","title":"Available Components"},{"location":"docs/developers/development/dialogs/richtext-editor/configuration/#available-ui-components","text":"Button Button Dropdown Dropdown Link","title":"Available UI components"},{"location":"docs/developers/development/dialogs/richtext-editor/configuration/#available-plugin-components","text":"Available plugin components are described in Plugin Configuration","title":"Available plugin components"},{"location":"docs/developers/development/dialogs/richtext-editor/configuration/#custom-components","text":"There is a possibility to prepare custom components. To do so there is a need to prepare files according to UI or plugin specification. In case of plugin component there is also need to provide TipTap extensions. They can be taken from existing extensions or written by a developer according to TipTap extension interface.","title":"Custom Components"},{"location":"docs/developers/development/dialogs/richtext-editor/plugin-components/","text":"Rich Text Editor Plugin Components Plugin Component is a resource which allow to register feature allows to edit text content. Plugin component should provide configuration in JSON format: { \"type\" : ... , \"configuration\" : { ... } } Where type should point script with plugin definition and configuration contains all aditional properties used by plugin. RichText editor is based on TipTap and plugins are responsible for interaction with TipTap Editor. Plugin defintinon should provide methods: const Plugin = ( configuration ) => { return { getTipTapExtensions : () => { return [...] }, getAction : ( context ) => { return { execute : ( state ) => {} } }, getState : ( context ) => { return {...} } } } export default Plugin ; Where: getTipTapExtensions - should return TipTap extensions required by plugin. getAction - should return object with execute method. This method will be executed by UI Component. It can get current state as a paramater. getState - should return an object with properties required to build proper state of UI Component. Object with this same structure is expected in execute method. configuration - contains data from JCR config context - Contains key editor referencing Tip Tap editor. state - Object with same structure as returned by getState Available plugins Plugin Example Usage Bold wcm/dialogs/components /richtext/plugin/bold \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/bold\" } Italic wcm/dialogs/components /richtext/plugin/italic \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/italic\" } Underline wcm/dialogs/components /richtext/plugin/underline \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/underline\" } Strikethrough wcm/dialogs/components /richtext/plugin/strikethrough \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/strikethrough\" } BulletList wcm/dialogs/components /richtext/plugin/bulletlist \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/bulletlist\" } OrderedList wcm/dialogs/components /richtext/plugin/orderedlist \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/orderedlist\" } Paragraph wcm/dialogs/components /richtext/plugin/paragraph \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/paragraph\" } ` Heading wcm/dialogs/components /richtext/plugin/heading \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/heading\", \u2003\u2003\"level\": \"3\"\" } level \u2003\u2003- number (default: 1) \u2003\u2003 - Heading level (1-6) Link wcm/dialogs/components /richtext/plugin/link \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/link\"\" } UnsetLink wcm/dialogs/components /richtext/plugin/unsetlink \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/unsetlink\"\" } ClearFormatting wcm/dialogs/components /richtext/plugin/clearformatting \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/clearformatting\"\" } HardBreak wcm/dialogs/components /richtext/plugin/hardbreak \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/hardbreak\"\" } TextAlign wcm/dialogs/components /richtext/plugin/textalign \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/textalignment\", \u2003\u2003\"alignment\": \"right\"\" } alignment \u2003\u2003- string (default: 'left') \u2003\u2003- Text alignment ('left', \u2018center', \u2018right', 'justify') Undo wcm/dialogs/components /richtext/plugin/undo \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/undo\" } Redo wcm/dialogs/components /richtext/plugin/redo \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/redo\" } Interfaces All the plugins provides some interfaces that should be met by UI components: Plugin getAction getState Bold Italic Underline Strikethrough BulletList OrderedList Paragraph Heading TextAlign { execute({}) => {...} } { isActive: ... } UnsetLink Undo Redo { execute({}) => {...} } { isDisabled: ... } ClearFormatting HardBreak { execute({}) => {...} } {} Link { execute({ href, target }) => {...}} { isActive: ..., href: ..., target: ... }","title":"Rich Text Editor Plugin Components"},{"location":"docs/developers/development/dialogs/richtext-editor/plugin-components/#rich-text-editor-plugin-components","text":"Plugin Component is a resource which allow to register feature allows to edit text content. Plugin component should provide configuration in JSON format: { \"type\" : ... , \"configuration\" : { ... } } Where type should point script with plugin definition and configuration contains all aditional properties used by plugin. RichText editor is based on TipTap and plugins are responsible for interaction with TipTap Editor. Plugin defintinon should provide methods: const Plugin = ( configuration ) => { return { getTipTapExtensions : () => { return [...] }, getAction : ( context ) => { return { execute : ( state ) => {} } }, getState : ( context ) => { return {...} } } } export default Plugin ; Where: getTipTapExtensions - should return TipTap extensions required by plugin. getAction - should return object with execute method. This method will be executed by UI Component. It can get current state as a paramater. getState - should return an object with properties required to build proper state of UI Component. Object with this same structure is expected in execute method. configuration - contains data from JCR config context - Contains key editor referencing Tip Tap editor. state - Object with same structure as returned by getState","title":"Rich Text Editor Plugin Components"},{"location":"docs/developers/development/dialogs/richtext-editor/plugin-components/#available-plugins","text":"Plugin Example Usage Bold wcm/dialogs/components /richtext/plugin/bold \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/bold\" } Italic wcm/dialogs/components /richtext/plugin/italic \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/italic\" } Underline wcm/dialogs/components /richtext/plugin/underline \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/underline\" } Strikethrough wcm/dialogs/components /richtext/plugin/strikethrough \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/strikethrough\" } BulletList wcm/dialogs/components /richtext/plugin/bulletlist \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/bulletlist\" } OrderedList wcm/dialogs/components /richtext/plugin/orderedlist \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/orderedlist\" } Paragraph wcm/dialogs/components /richtext/plugin/paragraph \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/paragraph\" } ` Heading wcm/dialogs/components /richtext/plugin/heading \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/heading\", \u2003\u2003\"level\": \"3\"\" } level \u2003\u2003- number (default: 1) \u2003\u2003 - Heading level (1-6) Link wcm/dialogs/components /richtext/plugin/link \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/link\"\" } UnsetLink wcm/dialogs/components /richtext/plugin/unsetlink \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/unsetlink\"\" } ClearFormatting wcm/dialogs/components /richtext/plugin/clearformatting \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/clearformatting\"\" } HardBreak wcm/dialogs/components /richtext/plugin/hardbreak \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/hardbreak\"\" } TextAlign wcm/dialogs/components /richtext/plugin/textalign \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/textalignment\", \u2003\u2003\"alignment\": \"right\"\" } alignment \u2003\u2003- string (default: 'left') \u2003\u2003- Text alignment ('left', \u2018center', \u2018right', 'justify') Undo wcm/dialogs/components /richtext/plugin/undo \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/undo\" } Redo wcm/dialogs/components /richtext/plugin/redo \"plugin\": { \u2003\u2003\"sling:resourceType\": \"wcm/dialogs/components/richtext/plugin/redo\" }","title":"Available plugins"},{"location":"docs/developers/development/dialogs/richtext-editor/plugin-components/#interfaces","text":"All the plugins provides some interfaces that should be met by UI components: Plugin getAction getState Bold Italic Underline Strikethrough BulletList OrderedList Paragraph Heading TextAlign { execute({}) => {...} } { isActive: ... } UnsetLink Undo Redo { execute({}) => {...} } { isDisabled: ... } ClearFormatting HardBreak { execute({}) => {...} } {} Link { execute({ href, target }) => {...}} { isActive: ..., href: ..., target: ... }","title":"Interfaces"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/","text":"Rich Text Editor UI Components UI Component is a resource which will be used to resolve script for rendering configuration node as JSON. UI Components are used as resource types of resources used to buid RTE tool bar. JSON object rendered by UI Component should follow format: { \"type\" : ... , \"configuration\" : { ... }, \"children\" : [ ... ], \"plugin\" : ... } Where: type - should point script with UI component definition configuration - contains propeties required by component to render properly children - contains list of subcomponents. It is used by components grouping another ones in some structure. plugin - plugin component configuration. Component gets properties: configuration - contains data from JCR config state - current state gets from plugin getState method action - action run on event executed by component. It\u2019s get from plugin getAction method children - children components. const Component = ({ configuration , state , action , children }) => { return ( <>< /> ) }","title":"Rich Text Editor UI Components"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/#rich-text-editor-ui-components","text":"UI Component is a resource which will be used to resolve script for rendering configuration node as JSON. UI Components are used as resource types of resources used to buid RTE tool bar. JSON object rendered by UI Component should follow format: { \"type\" : ... , \"configuration\" : { ... }, \"children\" : [ ... ], \"plugin\" : ... } Where: type - should point script with UI component definition configuration - contains propeties required by component to render properly children - contains list of subcomponents. It is used by components grouping another ones in some structure. plugin - plugin component configuration. Component gets properties: configuration - contains data from JCR config state - current state gets from plugin getState method action - action run on event executed by component. It\u2019s get from plugin getAction method children - children components. const Component = ({ configuration , state , action , children }) => { return ( <>< /> ) }","title":"Rich Text Editor UI Components"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/button/","text":"Button wcm/dialogs/components/richtext/ui/button Description: Component allows to add edit action as a button visible in menu bar. Button can be displayed with title or icon. Configuration: title - string (required) Action title. It will be visible in a tooltip. It also will be shown on button in case of lack of icon property icon - string Icon name. If set then button will be visible with defined icon. Available icons can be found in Material Icons font. State: isActive - boolean Defines if button should be checked as active. isDisabled - boolean Defines if button should be disabled. Children: plugin - node defines edit action caused by a button. Example: \"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }","title":"Button"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/button/#button","text":"wcm/dialogs/components/richtext/ui/button","title":"Button"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/button/#description","text":"Component allows to add edit action as a button visible in menu bar. Button can be displayed with title or icon.","title":"Description:"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/button/#configuration","text":"title - string (required) Action title. It will be visible in a tooltip. It also will be shown on button in case of lack of icon property icon - string Icon name. If set then button will be visible with defined icon. Available icons can be found in Material Icons font.","title":"Configuration:"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/button/#state","text":"isActive - boolean Defines if button should be checked as active. isDisabled - boolean Defines if button should be disabled.","title":"State:"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/button/#children","text":"plugin - node defines edit action caused by a button.","title":"Children:"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/button/#example","text":"\"bold\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Bold\" , \"icon\" : \"format_bold\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/bold\" } }","title":"Example:"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/button-dropdown/","text":"Button Dropdown wcm/dialogs/components/richtext/ui/buttondropdown Description: Component allows to add buttons group to menu bar. Buttons should be added as a children. Configuration: title - string (required) Group title. It\u2019s displayed as a tooltip. icon - string Icon name from Material Icons. If pesent than dropdown will be presented under button with given icon. Otherwise dropdown will be presented under button looks like button with first active action or like first available button - if none action is active. activable - boolean If true means that button will be presented as active if any action under it is active. Children: Button - Nodes defining available actions. Example: \"textalign\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/buttondropdown\" , \"title\" : \"Text Alignment\" , \"left\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Left Align\" , \"icon\" : \"format_align_left\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"left\" } }, \"center\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Center Align\" , \"icon\" : \"format_align_center\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"center\" } }, \"right\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Right Align\" , \"icon\" : \"format_align_right\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"right\" } }, \"justify\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Justify Align\" , \"icon\" : \"format_align_justify\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"justify\" } } }","title":"Button Dropdown"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/button-dropdown/#button-dropdown","text":"wcm/dialogs/components/richtext/ui/buttondropdown Description: Component allows to add buttons group to menu bar. Buttons should be added as a children.","title":"Button Dropdown"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/button-dropdown/#configuration","text":"title - string (required) Group title. It\u2019s displayed as a tooltip. icon - string Icon name from Material Icons. If pesent than dropdown will be presented under button with given icon. Otherwise dropdown will be presented under button looks like button with first active action or like first available button - if none action is active. activable - boolean If true means that button will be presented as active if any action under it is active.","title":"Configuration:"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/button-dropdown/#children","text":"Button - Nodes defining available actions.","title":"Children:"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/button-dropdown/#example","text":"\"textalign\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/buttondropdown\" , \"title\" : \"Text Alignment\" , \"left\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Left Align\" , \"icon\" : \"format_align_left\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"left\" } }, \"center\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Center Align\" , \"icon\" : \"format_align_center\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"center\" } }, \"right\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Right Align\" , \"icon\" : \"format_align_right\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"right\" } }, \"justify\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/button\" , \"title\" : \"Justify Align\" , \"icon\" : \"format_align_justify\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/textalign\" , \"alignment\" : \"justify\" } } }","title":"Example:"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/dropdown/","text":"Dropdown wcm/dialogs/components/richtext/ui/dropdown Description Component allows to add actions group to menu bar. Each action should be defined as a DropdownItem child. Configuration title - string (required) Group title. It\u2019s displayed as a tooltip. Children DropdownItem - Nodes defining available actions. DropdownItem wcm/dialogs/components/richtext/ui/dropdown/dropdownitem Description Component allows to add action to dropdown. Configuration title - string (required) Action title. It\u2019s displayed in a dropdown. State isActive - boolean Defines if item should be checked as active. Children plugin - node defines edit action caused by an item. Example \"textstyle\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown\" , \"title\" : \"Text Style\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 1\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 1 } }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 2\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 2 } }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 3\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 3 } }, \"h4\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 4\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 4 } }, \"h5\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 5\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 5 } }, \"h6\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 6\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 6 } }, \"paragraph\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Paragraph\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/paragraph\" } } }","title":"Dropdown"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/dropdown/#dropdown","text":"wcm/dialogs/components/richtext/ui/dropdown","title":"Dropdown"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/dropdown/#description","text":"Component allows to add actions group to menu bar. Each action should be defined as a DropdownItem child.","title":"Description"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/dropdown/#configuration","text":"title - string (required) Group title. It\u2019s displayed as a tooltip.","title":"Configuration"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/dropdown/#children","text":"DropdownItem - Nodes defining available actions.","title":"Children"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/dropdown/#dropdownitem","text":"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem","title":"DropdownItem"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/dropdown/#description_1","text":"Component allows to add action to dropdown.","title":"Description"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/dropdown/#configuration_1","text":"title - string (required) Action title. It\u2019s displayed in a dropdown.","title":"Configuration"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/dropdown/#state","text":"isActive - boolean Defines if item should be checked as active.","title":"State"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/dropdown/#children_1","text":"plugin - node defines edit action caused by an item.","title":"Children"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/dropdown/#example","text":"\"textstyle\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown\" , \"title\" : \"Text Style\" , \"h1\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 1\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 1 } }, \"h2\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 2\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 2 } }, \"h3\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 3\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 3 } }, \"h4\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 4\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 4 } }, \"h5\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 5\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 5 } }, \"h6\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Heading 6\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/heading\" , \"level\" : 6 } }, \"paragraph\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/dropdown/dropdownitem\" , \"title\" : \"Paragraph\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/paragraph\" } } }","title":"Example"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/link/","text":"Link wcm/dialogs/components/richtext/ui/link Description Component dedicated for link plugin. It opens a dialog in witch author can add link and select target type. It provides href and target properties to execute method. It expects also both href and target properties returning from plugin getState method. Configuration title - string (required) Action title. It will be visible in a tooltip. It also will be shown on button in case of lack of icon property icon - string Icon name. If set then button will be visible with defined icon. Available icons can be found in Material Icons font. State isActive - boolean Defines if button should be checked as active. href - string Define link destination address. target - string Specifies where to open the linked document. Children plugin- node defines edit action caused by a button. Example \"link\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/link\" , \"title\" : \"Link\" , \"icon\" : \"link\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/link\" } }","title":"Link"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/link/#link","text":"wcm/dialogs/components/richtext/ui/link","title":"Link"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/link/#description","text":"Component dedicated for link plugin. It opens a dialog in witch author can add link and select target type. It provides href and target properties to execute method. It expects also both href and target properties returning from plugin getState method.","title":"Description"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/link/#configuration","text":"title - string (required) Action title. It will be visible in a tooltip. It also will be shown on button in case of lack of icon property icon - string Icon name. If set then button will be visible with defined icon. Available icons can be found in Material Icons font.","title":"Configuration"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/link/#state","text":"isActive - boolean Defines if button should be checked as active. href - string Define link destination address. target - string Specifies where to open the linked document.","title":"State"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/link/#children","text":"plugin- node defines edit action caused by a button.","title":"Children"},{"location":"docs/developers/development/dialogs/richtext-editor/ui-components/link/#example","text":"\"link\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/ui/link\" , \"title\" : \"Link\" , \"icon\" : \"link\" , \"plugin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/richtext/plugin/link\" } }","title":"Example"},{"location":"docs/developers/development/dialogs/select/","text":"Select wcm/dialogs/components/select Description Allows user choose one of the options. Properties name - string (required) Form field name label - string (required) Display label value required - string Indicates if field value is mandatory description - string Display description value as a tooltip It should contain child nodes with options: SelectItem wcm/dialogs/components/selectitem Description Defines one of the available option. Properties label - string (required) Display label value - string (required) Value of choosen option selected - string Indicates if field is selected by default. By default, this option will not be saved in the properties unless the user selects an option manually. So in order to make things work perfectly, we should use the same default value in the backend side as well. Example \"icon\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select\" , \"name\" : \"socialLinkIcon\" , \"label\" : \"Social Link icon\" , \"linkedin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"LinkedIn\" , \"value\" : \"icon-linkedin\" }, \"facebook\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Facebook\" , \"value\" : \"icon-facebook\" }, \"twitter\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Twitter\" , \"value\" : \"icon-twitter\" }, \"instagram\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Instagram\" , \"value\" : \"icon-instagram\" } }","title":"Select"},{"location":"docs/developers/development/dialogs/select/#select","text":"wcm/dialogs/components/select","title":"Select"},{"location":"docs/developers/development/dialogs/select/#description","text":"Allows user choose one of the options.","title":"Description"},{"location":"docs/developers/development/dialogs/select/#properties","text":"name - string (required) Form field name label - string (required) Display label value required - string Indicates if field value is mandatory description - string Display description value as a tooltip It should contain child nodes with options:","title":"Properties"},{"location":"docs/developers/development/dialogs/select/#selectitem","text":"wcm/dialogs/components/selectitem","title":"SelectItem"},{"location":"docs/developers/development/dialogs/select/#description_1","text":"Defines one of the available option.","title":"Description"},{"location":"docs/developers/development/dialogs/select/#properties_1","text":"label - string (required) Display label value - string (required) Value of choosen option selected - string Indicates if field is selected by default. By default, this option will not be saved in the properties unless the user selects an option manually. So in order to make things work perfectly, we should use the same default value in the backend side as well.","title":"Properties"},{"location":"docs/developers/development/dialogs/select/#example","text":"\"icon\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select\" , \"name\" : \"socialLinkIcon\" , \"label\" : \"Social Link icon\" , \"linkedin\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"LinkedIn\" , \"value\" : \"icon-linkedin\" }, \"facebook\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Facebook\" , \"value\" : \"icon-facebook\" }, \"twitter\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Twitter\" , \"value\" : \"icon-twitter\" }, \"instagram\" : { \"sling:resourceType\" : \"wcm/dialogs/components/select/selectitem\" , \"label\" : \"Instagram\" , \"value\" : \"icon-instagram\" } }","title":"Example"},{"location":"docs/developers/development/dialogs/tabs/","text":"Tabs wcm/dialogs/components/tabs Description Allows user to add tab panel. Example \"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"tabOne\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab One\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" } }, \"tabTwo\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab Two\" , \"image\" : { \"sling:resourceType\" : \"wcm/dialogs/components/assetreference\" , \"mimeTypes\" : [ \"image/*\" ], \"name\" : \"image\" , \"label\" : \"Image\" } } }","title":"Tabs"},{"location":"docs/developers/development/dialogs/tabs/#tabs","text":"wcm/dialogs/components/tabs","title":"Tabs"},{"location":"docs/developers/development/dialogs/tabs/#description","text":"Allows user to add tab panel.","title":"Description"},{"location":"docs/developers/development/dialogs/tabs/#example","text":"\"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"tabOne\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab One\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" } }, \"tabTwo\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab Two\" , \"image\" : { \"sling:resourceType\" : \"wcm/dialogs/components/assetreference\" , \"mimeTypes\" : [ \"image/*\" ], \"name\" : \"image\" , \"label\" : \"Image\" } } }","title":"Example"},{"location":"docs/developers/development/dialogs/tabs/tab/","text":"Tab wcm/dialogs/components/tab Description Allows user to add tab content. Properties label - string Display tab name Example \"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"tabOne\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab One\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" } }, \"tabTwo\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab Two\" , \"image\" : { \"sling:resourceType\" : \"wcm/dialogs/components/assetreference\" , \"mimeTypes\" : [ \"image/*\" ], \"name\" : \"image\" , \"label\" : \"Image\" } } }","title":"Tab"},{"location":"docs/developers/development/dialogs/tabs/tab/#tab","text":"wcm/dialogs/components/tab","title":"Tab"},{"location":"docs/developers/development/dialogs/tabs/tab/#description","text":"Allows user to add tab content.","title":"Description"},{"location":"docs/developers/development/dialogs/tabs/tab/#properties","text":"label - string Display tab name","title":"Properties"},{"location":"docs/developers/development/dialogs/tabs/tab/#example","text":"\"tabs\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tabs\" , \"tabOne\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab One\" , \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" } }, \"tabTwo\" : { \"sling:resourceType\" : \"wcm/dialogs/components/tab\" , \"label\" : \"Tab Two\" , \"image\" : { \"sling:resourceType\" : \"wcm/dialogs/components/assetreference\" , \"mimeTypes\" : [ \"image/*\" ], \"name\" : \"image\" , \"label\" : \"Image\" } } }","title":"Example"},{"location":"docs/developers/development/dialogs/text-area/","text":"Text Area wcm/dialogs/components/textarea Description Allows user to enter any text over multiple lines. Properties name - string (required) Form field name label - string (required) Display label value required - string Indicates if field value is mandatory removeIfEmpty - string (if not defined false ) Indicates if the property in JCR will be removed, if contains an empty String, or will be kept with that value description - string Display description value as a tooltip Example \"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textarea\" , \"name\" : \"content\" , \"label\" : \"Content\" }","title":"Text Area"},{"location":"docs/developers/development/dialogs/text-area/#text-area","text":"wcm/dialogs/components/textarea","title":"Text Area"},{"location":"docs/developers/development/dialogs/text-area/#description","text":"Allows user to enter any text over multiple lines.","title":"Description"},{"location":"docs/developers/development/dialogs/text-area/#properties","text":"name - string (required) Form field name label - string (required) Display label value required - string Indicates if field value is mandatory removeIfEmpty - string (if not defined false ) Indicates if the property in JCR will be removed, if contains an empty String, or will be kept with that value description - string Display description value as a tooltip","title":"Properties"},{"location":"docs/developers/development/dialogs/text-area/#example","text":"\"content\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textarea\" , \"name\" : \"content\" , \"label\" : \"Content\" }","title":"Example"},{"location":"docs/developers/development/dialogs/textfield/","text":"Text Field wcm/dialogs/components/textfield Description Allows user to enter any text. Properties name - string (required) Form field name label - string Display label value required - string Indicates if field value is mandatory removeIfEmpty - string (if not defined false ) Indicates if the property in JCR will be removed, if contains an empty String, or will be kept with that value description - string Display description value as tooltip Example \"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" }","title":"Text Field"},{"location":"docs/developers/development/dialogs/textfield/#text-field","text":"wcm/dialogs/components/textfield","title":"Text Field"},{"location":"docs/developers/development/dialogs/textfield/#description","text":"Allows user to enter any text.","title":"Description"},{"location":"docs/developers/development/dialogs/textfield/#properties","text":"name - string (required) Form field name label - string Display label value required - string Indicates if field value is mandatory removeIfEmpty - string (if not defined false ) Indicates if the property in JCR will be removed, if contains an empty String, or will be kept with that value description - string Display description value as tooltip","title":"Properties"},{"location":"docs/developers/development/dialogs/textfield/#example","text":"\"title\" : { \"sling:resourceType\" : \"wcm/dialogs/components/textfield\" , \"name\" : \"title\" , \"label\" : \"Title\" }","title":"Example"},{"location":"docs/developers/development/dialogs/toggle/","text":"Toggle wcm/dialogs/components/toggle Description Allows user choose enable or disable state. Properties name - string (required) Form field name label - string (required) Display label value checkedByDefault - string Indicates if field should be checked by default. Default: \u201cfalse\u201d. checkedValue - string Define what value will be saved in JCR if checkbox is checked. Default: \u201ctrue\u201d String uncheckedValue - string Define what value will be saved in JCR if checkbox is NOT checked. Default: \u201cfalse\u201d String description - string Display description value as a tooltip Example \"openInNewTab\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"openInNewTab\" , \"label\" : \"Open in new tab\" }","title":"Toggle"},{"location":"docs/developers/development/dialogs/toggle/#toggle","text":"wcm/dialogs/components/toggle","title":"Toggle"},{"location":"docs/developers/development/dialogs/toggle/#description","text":"Allows user choose enable or disable state.","title":"Description"},{"location":"docs/developers/development/dialogs/toggle/#properties","text":"name - string (required) Form field name label - string (required) Display label value checkedByDefault - string Indicates if field should be checked by default. Default: \u201cfalse\u201d. checkedValue - string Define what value will be saved in JCR if checkbox is checked. Default: \u201ctrue\u201d String uncheckedValue - string Define what value will be saved in JCR if checkbox is NOT checked. Default: \u201cfalse\u201d String description - string Display description value as a tooltip","title":"Properties"},{"location":"docs/developers/development/dialogs/toggle/#example","text":"\"openInNewTab\" : { \"sling:resourceType\" : \"wcm/dialogs/components/toggle\" , \"name\" : \"openInNewTab\" , \"label\" : \"Open in new tab\" }","title":"Example"},{"location":"docs/developers/quick-start/","text":"Developers Quick Start Guide Introduction This guide explains how to update a simple Howlite component. Before you complete this guide, we recommend completing the basic quick start guide first so that you understand basic WebSight CMS concepts. For demonstration purposes, this guide uses a sample component library, Howlite , and a demo site project, Luna . For the sake of simplicity, we overrode the Title component included in the Howlite collection in advance and preconfigured the Luna Title component inside the demo project. Your task in completing this guide is to update the Luna Title component and extend existing functionality and tests. The sections below explain more detail. Important notice All scripts presented below are designed for Linux-based platforms. If you are a Windows user, please install and configure Windows Subsystem for Linux (WSL) to use this guide. Part A: Prerequisites Install AdoptOpenJDK 17 with 'x64/aarch64' architecture (on macOS use brew install openjdk@17 ): Install Node.js and NPM Install Docker Desktop . Install Git Part B: Setup local environment First, clone the Luna repository and build it within your local environment using the following commands: git clone https://github.com/websight-io/starter.git cd starter ./mvnw clean install -P e2e Then, start a Docker environment. docker compose -f environment/local/docker-compose.yml up -d Congratulations! Your local environment is now ready. To view it, open http://localhost:8080/ in a Web browser and log in using the credentials wsadmin / wsadmin . Part C: Changing component Hint If you need help navigating inside WebSight, see the basic getting started guide for details. Business requirement Let's imagine the following scenario: A page owner wants you to update the title of the page that describes the company's new Grand Luxor Jewelry Collection. To fulfill this request, you are asked to keep the collection name on one line and decrease the font size for the text Meet our . The expected result is presented below. Technical scope To do this, you need to extend the Title component included in the Howlite library. Before doing that, let's check the orginal component first to identify the scope of changes. Run WebSight, open the Luna space and edit the home page. Find the Title component that contains the text Meet our New Grand Luxor Jewelry Collection and edit its properties. Enable the Overline text option, move Meet our from Heading text to Overline text and submit changes. As you can see, the result comes close to meeting the expectation, but the font size of the overline text is too small. You could prepare a new version of the Title component with a different font size for the overline text. However, this is not a flexible solution. Creating an additional input field to define the font size for the overline text is a better option. Info For simplicity, we overrode the original component in advance and prepared the Luna Title component. It is a part of the demo site project, but it is just a placeholder. It works exactly as the Title . The following sections guide you on how to implement the change. Component update Your task is to enable setup of the overline font size. To start, first you need to add a new field, overlineSize , to the model class LunaTitleComponent.java . Let's define a default size hl-title__heading--size-5 according to the received design as well. The following Java code will do this: application/backend/src/main/java/pl/ds/luna/compoennts/models/LunaTitleComponent.java package pl.ds.luna.components.models ; import javax.inject.Inject ; import org.apache.sling.api.resource.Resource ; import org.apache.sling.models.annotations.Default ; import org.apache.sling.models.annotations.Model ; import pl.ds.howlite.components.models.TitleComponent ; @Model ( adaptables = Resource . class ) public class LunaTitleComponent extends TitleComponent { @Inject @Default ( values = { \"hl-title__heading--size-5\" }) private String overlineSize ; public String getOverlineSize (){ return overlineSize ; } } Next, you need to update the component HTML template. The original one defines the CSS class that determines the font size as hl-title__heading--size-6 . < h6 class = \"hl-title__heading hl-title__heading--size-6\" data-testid = \"overline\" > ${model.subtitle} </ h6 > Because you updated the model class, you can use its property now. application/backend/src/main/resources/apps/luna/components/lunatitle/lunatitle.html < h6 class = \"hl-title__heading ${model.overlineSize}\" data-testid = \"overline\" > ${model.subtitle} </ h6 > The last step is to add the field to the dialog used by authors. They need it to define component properties in the page editor. To enable this, you have to override the dialog definition from Howlite. Do so by creating a new dialog directory and put .content.json file inside. application/backend/src/main/resources/apps/luna/components/lunatitle/dialog/.content.json { \"tabs\" : { \"generalTab\" : { \"container\" : { \"overlineSize\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"sling:orderBefore\" : \"overline\" , \"path\" : \"/libs/howlite/components/common/headingsize\" , \"include\" : { \"sling:resourceSuperType\" : \"/libs/howlite/components/common/headingsize\" , \"label\" : \"Overline size\" , \"name\" : \"overlineSize\" , \"description\" : \"Changes font size\" , \"s\" : { \"selected\" : true }, \"m\" : { \"selected\" : false } } } } } } } The above definition specifies the new overlineSize field. It is placed before the overline field and uses a heading size definition from Howlite, but with small size selected by default. Apply changes Run the following command to apply the changes to your local environment. ./mvnw -f application/backend/pom.xml clean install -P autoInstallBundle Part D: Functional tests Run functional tests We continuously improve WebSight CMS by adding new features, improving the UX, and fixing bugs. Thus, we need confidence that changes don't lead to any regression on websites. To provide this confidence, we use Cypress to enable automated testing of components. This approach enables us to spend less time on manual testing and regression fixes. We can focus on developing new features and improvements instead. To demonstrate automated functional testing, we prepared two sample functional tests for the Luna Title component. They are executed during the Maven build process. You can run them using npm on your local environment as well. However, you have to add test content before running the tests. Use the following script to set this up: ./mvnw -f tests/content/pom.xml clean install -P autoInstallPackage Now, you can run the tests using the following command: npm run-script test --prefix tests/end-to-end If you execute the tests, they will detect your changes for the Luna Title and fail. You should get the following results: Running: lunatitle.cy.ts (1 of 1) Luna Title component 1) renders correctly in preview mode 2) renders correctly in edit mode 0 passing (8s) 2 failing 1) Luna Title component renders correctly in preview mode: AssertionError: expected '<h6.hl-title__heading.hl-title__heading--size-5>' to have CSS property 'font-size' with the value '20px', but the value was '25.008px' + expected - actual -'25.008px' +'20px' ... 2) Luna Title component renders correctly in edit mode: Timed out retrying after 4000ms + expected - actual { 'sling:resourceType': 'luna/components/lunatitle', title: 'New heading', showSubtitle: 'true', - overlineSize: 'hl-title__heading--size-5', subtitle: 'New overline text', 'jcr:primaryType': 'nt:unstructured', headingLevel: 'h1', headingSize: 'hl-title__heading--size-2' } When a functional test fails, you should check why. It is expected in this case, as you implemented new requirements. Firstly, you updated the default font size of the overline component (to ensure consistency with the design). Secondly, you added a new property to the dialog for the component. The tests recognized both changes, and you should adjust them as well. The following section explains how to do so. Hint A best practice is to start by changing a test so that it fails until you've made desired changes. Then, apply your changes so that the test passes. Update functional tests When functional tests fail due to changes, you should adjust them. They are placed in file tests/end-to-end/tests/lunatitle.cy.ts . The first test checks the font size for the overline text. There are two component instances validated. Thus, you need to update assertions for both of them as follows. cy . getByTestId ( 'component_title1' ) . findByTestId ( 'overline' ) . should ( 'have.css' , \"font-size\" , \"25.008px\" ) . should ( 'have.text' , 'Additional overline text filled' ) cy . getByTestId ( 'component_title2' ) . findByTestId ( 'overline' ) . should ( 'have.css' , \"font-size\" , \"25.008px\" ) . should ( 'have.text' , 'Resized to 6 cols on L breakpoint' ) The second test validates the dialog for the component. Update the test to recognize the new input field. cy . request ( '/content/luna-test/pages/LunaTitle/jcr:content/rootcontainer/maincontainer/pagesection/title.json' ) . its ( 'body' ) . should ( 'deep.eq' , { 'sling:resourceType' : 'luna/components/lunatitle' , title : 'New heading' , showSubtitle : 'true' , overlineSize : 'hl-title__heading--size-5' , subtitle : 'New overline text' , 'jcr:primaryType' : 'nt:unstructured' , headingLevel : 'h1' , headingSize : 'hl-title__heading--size-2' }); Run functional tests again Now, you can execute the updated functional tests: ./mvnw -f tests/content/pom.xml clean install -P autoInstallPackage npm run-script test --prefix tests/end-to-end Both tests should pass this time. You should receive a report like the one below. Running: lunatitle.cy.ts (1 of 1) Luna Title component \u2713 renders correctly in preview mode (1030ms) \u2713 renders correctly in edit mode (2774ms) 2 passing (4s) Congratulations! You updated the component, and it passed tests. Part E: Use the new component Hint If you need help to navigate inside WebSight, see the general getting started for details. The page owner can use the updated component now. Let's verify by checking it out in the admin interface. Switch to WebSight CMS, open the Luna space, and edit the home page. Find the Title with text Meet our New Grand Luxor Jewelry Collection . Then, find the Luna Title in the component tree on the left. Drag and drop the component on the page just below the original one. Edit properties of the Luna Title : set Heading size to XL set Heading text to New Grand Luxor Jewelry Collection enable overline text set Overline size to L set Overline text to Meet our Submit changes. The title should appear as expected now. You can delete the original Title component to finalize the change. Part F: Clean-up Stop the environment After completing this guide, you can stop your local environment using Docker: docker compose -f environment/local/docker-compose.yml down The environment will still exist but will no longer be running. Delete environment If you don't need your environment anymore, you can delete it permanently using a script. sh environment/local/delete.sh Next steps This guide walked thorugh the essentials of developing components for WebSight CMS. As a next step, we encourage you to explore additoinal details about the following: Project setup Application development Components development Dialogs","title":"Developers Quick Start Guide"},{"location":"docs/developers/quick-start/#developers-quick-start-guide","text":"","title":"Developers Quick Start Guide"},{"location":"docs/developers/quick-start/#introduction","text":"This guide explains how to update a simple Howlite component. Before you complete this guide, we recommend completing the basic quick start guide first so that you understand basic WebSight CMS concepts. For demonstration purposes, this guide uses a sample component library, Howlite , and a demo site project, Luna . For the sake of simplicity, we overrode the Title component included in the Howlite collection in advance and preconfigured the Luna Title component inside the demo project. Your task in completing this guide is to update the Luna Title component and extend existing functionality and tests. The sections below explain more detail. Important notice All scripts presented below are designed for Linux-based platforms. If you are a Windows user, please install and configure Windows Subsystem for Linux (WSL) to use this guide.","title":"Introduction"},{"location":"docs/developers/quick-start/#part-a-prerequisites","text":"Install AdoptOpenJDK 17 with 'x64/aarch64' architecture (on macOS use brew install openjdk@17 ): Install Node.js and NPM Install Docker Desktop . Install Git","title":"Part A: Prerequisites"},{"location":"docs/developers/quick-start/#part-b-setup-local-environment","text":"First, clone the Luna repository and build it within your local environment using the following commands: git clone https://github.com/websight-io/starter.git cd starter ./mvnw clean install -P e2e Then, start a Docker environment. docker compose -f environment/local/docker-compose.yml up -d Congratulations! Your local environment is now ready. To view it, open http://localhost:8080/ in a Web browser and log in using the credentials wsadmin / wsadmin .","title":"Part B: Setup local environment"},{"location":"docs/developers/quick-start/#part-c-changing-component","text":"Hint If you need help navigating inside WebSight, see the basic getting started guide for details.","title":"Part C: Changing component"},{"location":"docs/developers/quick-start/#business-requirement","text":"Let's imagine the following scenario: A page owner wants you to update the title of the page that describes the company's new Grand Luxor Jewelry Collection. To fulfill this request, you are asked to keep the collection name on one line and decrease the font size for the text Meet our . The expected result is presented below.","title":"Business requirement"},{"location":"docs/developers/quick-start/#technical-scope","text":"To do this, you need to extend the Title component included in the Howlite library. Before doing that, let's check the orginal component first to identify the scope of changes. Run WebSight, open the Luna space and edit the home page. Find the Title component that contains the text Meet our New Grand Luxor Jewelry Collection and edit its properties. Enable the Overline text option, move Meet our from Heading text to Overline text and submit changes. As you can see, the result comes close to meeting the expectation, but the font size of the overline text is too small. You could prepare a new version of the Title component with a different font size for the overline text. However, this is not a flexible solution. Creating an additional input field to define the font size for the overline text is a better option. Info For simplicity, we overrode the original component in advance and prepared the Luna Title component. It is a part of the demo site project, but it is just a placeholder. It works exactly as the Title . The following sections guide you on how to implement the change.","title":"Technical scope"},{"location":"docs/developers/quick-start/#component-update","text":"Your task is to enable setup of the overline font size. To start, first you need to add a new field, overlineSize , to the model class LunaTitleComponent.java . Let's define a default size hl-title__heading--size-5 according to the received design as well. The following Java code will do this: application/backend/src/main/java/pl/ds/luna/compoennts/models/LunaTitleComponent.java package pl.ds.luna.components.models ; import javax.inject.Inject ; import org.apache.sling.api.resource.Resource ; import org.apache.sling.models.annotations.Default ; import org.apache.sling.models.annotations.Model ; import pl.ds.howlite.components.models.TitleComponent ; @Model ( adaptables = Resource . class ) public class LunaTitleComponent extends TitleComponent { @Inject @Default ( values = { \"hl-title__heading--size-5\" }) private String overlineSize ; public String getOverlineSize (){ return overlineSize ; } } Next, you need to update the component HTML template. The original one defines the CSS class that determines the font size as hl-title__heading--size-6 . < h6 class = \"hl-title__heading hl-title__heading--size-6\" data-testid = \"overline\" > ${model.subtitle} </ h6 > Because you updated the model class, you can use its property now. application/backend/src/main/resources/apps/luna/components/lunatitle/lunatitle.html < h6 class = \"hl-title__heading ${model.overlineSize}\" data-testid = \"overline\" > ${model.subtitle} </ h6 > The last step is to add the field to the dialog used by authors. They need it to define component properties in the page editor. To enable this, you have to override the dialog definition from Howlite. Do so by creating a new dialog directory and put .content.json file inside. application/backend/src/main/resources/apps/luna/components/lunatitle/dialog/.content.json { \"tabs\" : { \"generalTab\" : { \"container\" : { \"overlineSize\" : { \"sling:resourceType\" : \"wcm/dialogs/components/include\" , \"sling:orderBefore\" : \"overline\" , \"path\" : \"/libs/howlite/components/common/headingsize\" , \"include\" : { \"sling:resourceSuperType\" : \"/libs/howlite/components/common/headingsize\" , \"label\" : \"Overline size\" , \"name\" : \"overlineSize\" , \"description\" : \"Changes font size\" , \"s\" : { \"selected\" : true }, \"m\" : { \"selected\" : false } } } } } } } The above definition specifies the new overlineSize field. It is placed before the overline field and uses a heading size definition from Howlite, but with small size selected by default.","title":"Component update"},{"location":"docs/developers/quick-start/#apply-changes","text":"Run the following command to apply the changes to your local environment. ./mvnw -f application/backend/pom.xml clean install -P autoInstallBundle","title":"Apply changes"},{"location":"docs/developers/quick-start/#part-d-functional-tests","text":"","title":"Part D: Functional tests"},{"location":"docs/developers/quick-start/#run-functional-tests","text":"We continuously improve WebSight CMS by adding new features, improving the UX, and fixing bugs. Thus, we need confidence that changes don't lead to any regression on websites. To provide this confidence, we use Cypress to enable automated testing of components. This approach enables us to spend less time on manual testing and regression fixes. We can focus on developing new features and improvements instead. To demonstrate automated functional testing, we prepared two sample functional tests for the Luna Title component. They are executed during the Maven build process. You can run them using npm on your local environment as well. However, you have to add test content before running the tests. Use the following script to set this up: ./mvnw -f tests/content/pom.xml clean install -P autoInstallPackage Now, you can run the tests using the following command: npm run-script test --prefix tests/end-to-end If you execute the tests, they will detect your changes for the Luna Title and fail. You should get the following results: Running: lunatitle.cy.ts (1 of 1) Luna Title component 1) renders correctly in preview mode 2) renders correctly in edit mode 0 passing (8s) 2 failing 1) Luna Title component renders correctly in preview mode: AssertionError: expected '<h6.hl-title__heading.hl-title__heading--size-5>' to have CSS property 'font-size' with the value '20px', but the value was '25.008px' + expected - actual -'25.008px' +'20px' ... 2) Luna Title component renders correctly in edit mode: Timed out retrying after 4000ms + expected - actual { 'sling:resourceType': 'luna/components/lunatitle', title: 'New heading', showSubtitle: 'true', - overlineSize: 'hl-title__heading--size-5', subtitle: 'New overline text', 'jcr:primaryType': 'nt:unstructured', headingLevel: 'h1', headingSize: 'hl-title__heading--size-2' } When a functional test fails, you should check why. It is expected in this case, as you implemented new requirements. Firstly, you updated the default font size of the overline component (to ensure consistency with the design). Secondly, you added a new property to the dialog for the component. The tests recognized both changes, and you should adjust them as well. The following section explains how to do so. Hint A best practice is to start by changing a test so that it fails until you've made desired changes. Then, apply your changes so that the test passes.","title":"Run functional tests"},{"location":"docs/developers/quick-start/#update-functional-tests","text":"When functional tests fail due to changes, you should adjust them. They are placed in file tests/end-to-end/tests/lunatitle.cy.ts . The first test checks the font size for the overline text. There are two component instances validated. Thus, you need to update assertions for both of them as follows. cy . getByTestId ( 'component_title1' ) . findByTestId ( 'overline' ) . should ( 'have.css' , \"font-size\" , \"25.008px\" ) . should ( 'have.text' , 'Additional overline text filled' ) cy . getByTestId ( 'component_title2' ) . findByTestId ( 'overline' ) . should ( 'have.css' , \"font-size\" , \"25.008px\" ) . should ( 'have.text' , 'Resized to 6 cols on L breakpoint' ) The second test validates the dialog for the component. Update the test to recognize the new input field. cy . request ( '/content/luna-test/pages/LunaTitle/jcr:content/rootcontainer/maincontainer/pagesection/title.json' ) . its ( 'body' ) . should ( 'deep.eq' , { 'sling:resourceType' : 'luna/components/lunatitle' , title : 'New heading' , showSubtitle : 'true' , overlineSize : 'hl-title__heading--size-5' , subtitle : 'New overline text' , 'jcr:primaryType' : 'nt:unstructured' , headingLevel : 'h1' , headingSize : 'hl-title__heading--size-2' });","title":"Update functional tests"},{"location":"docs/developers/quick-start/#run-functional-tests-again","text":"Now, you can execute the updated functional tests: ./mvnw -f tests/content/pom.xml clean install -P autoInstallPackage npm run-script test --prefix tests/end-to-end Both tests should pass this time. You should receive a report like the one below. Running: lunatitle.cy.ts (1 of 1) Luna Title component \u2713 renders correctly in preview mode (1030ms) \u2713 renders correctly in edit mode (2774ms) 2 passing (4s) Congratulations! You updated the component, and it passed tests.","title":"Run functional tests again"},{"location":"docs/developers/quick-start/#part-e-use-the-new-component","text":"Hint If you need help to navigate inside WebSight, see the general getting started for details. The page owner can use the updated component now. Let's verify by checking it out in the admin interface. Switch to WebSight CMS, open the Luna space, and edit the home page. Find the Title with text Meet our New Grand Luxor Jewelry Collection . Then, find the Luna Title in the component tree on the left. Drag and drop the component on the page just below the original one. Edit properties of the Luna Title : set Heading size to XL set Heading text to New Grand Luxor Jewelry Collection enable overline text set Overline size to L set Overline text to Meet our Submit changes. The title should appear as expected now. You can delete the original Title component to finalize the change.","title":"Part E: Use the new component"},{"location":"docs/developers/quick-start/#part-f-clean-up","text":"","title":"Part F: Clean-up"},{"location":"docs/developers/quick-start/#stop-the-environment","text":"After completing this guide, you can stop your local environment using Docker: docker compose -f environment/local/docker-compose.yml down The environment will still exist but will no longer be running.","title":"Stop the environment"},{"location":"docs/developers/quick-start/#delete-environment","text":"If you don't need your environment anymore, you can delete it permanently using a script. sh environment/local/delete.sh","title":"Delete environment"},{"location":"docs/developers/quick-start/#next-steps","text":"This guide walked thorugh the essentials of developing components for WebSight CMS. As a next step, we encourage you to explore additoinal details about the following: Project setup Application development Components development Dialogs","title":"Next steps"},{"location":"docs/developers/setup/","text":"Project setup This document provides an introduction to working with WebSight projects. It explains how to configure, build and run a new project using Maven Archetype and Docker. It also describes the contents of the project build and runtime files. Although the specific contents of your project may vary depending on your needs, the sample project described on this page is a useful starting-point for running Web applications using WebSight CMS. Prerequisites To create and run a project, you will need Java 17 or later, Maven 3.8.5 or later and Docker Desktop . You can check your Java version in most environments with: java -version openjdk 17.0.2 2022-01-18 OpenJDK Runtime Environment Temurin-17.0.2+8 (build 17.0.2+8) OpenJDK 64-Bit Server VM Temurin-17.0.2+8 (build 17.0.2+8, mixed mode) Check your Maven version with: mvn --version Apache Maven 3.8.5 (3599d3414f046de2324203b78ddcf9b5e4388aa0) Check your Docker installation by running: docker --version Docker version 20.10.14 Generate a project To create a new project, first open a command prompt and cd to the directory where you want to store your project. Next, use a Maven command to create your project, being sure to declare the desired parameters properly. Use the groupId , artifactId , and version parameters to declare Maven artifacts for your project. Use projectName , projectId and package parameters to define technical requirements (such as application resources paths and Docker image names) and the root package for Java code. Use the archetypeVersion parameter to set the archetype version you want to use. You can check the latest version here . Use the cmsVersion parameter to specify the WebSight CMS version that the project should use. Check the WebSight Release Notes to find the latest available version. Example command: mvn archetype:generate \\ -DarchetypeGroupId=pl.ds.websight \\ -DarchetypeArtifactId=websight-cms-ce-project-archetype \\ -DarchetypeVersion=1.4 \\ -DgroupId=my.groupId \\ -DartifactId=my-artifactId \\ -Dversion=1.0.0-SNAPSHOT \\ -DprojectName=\"Example Project\" \\ -DprojectId=example-project \\ -Dpackage=com.example.project \\ -DcmsVersion=1.6.0 The above command creates a project with the following structure: . \u2514\u2500\u2500 my-artifactId \u251c\u2500\u2500 README.md \u251c\u2500\u2500 application \u251c\u2500\u2500 content \u251c\u2500\u2500 distribution \u251c\u2500\u2500 environment \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 tests Project structure The contents of the project structure we generated above are an example of what you'd typically include when creating a project for a Web application using WebSight CMS. Note in particular the following modules: application - components code and scripts delivered as OSGi bundles backend - CMS elements (pages, templates, components, etc.), Java models and services frontend - frontend project bundled by webpack content - initial content as a JCR vault module (content_package) distribution - project distribution - Sling feature model and Docker images environment - scripts and files used to build environments local - local environment managed by Docker Compose tests - tests used to validate the distribution content - content for end-to-end tests end-to-end - end-to-end tests Distribution and environment It is important to note that the project contains built-in server definitions and configurations. The distribution module is responsible for bundling the application based on the configurations and WebSight CMS modules using Sling Feature Model . It also prepares the required Docker images to run the complete stack. The finalized project build artifacts are immutable Docker images that can be run on local, test, and production environments. Environment-specific configurations can be implemented by injecting system variables. Info It is possible to deploy application modules to running containers without rebuilding the Docker images, but the changes will be lost after each container restart and can be used only for local development. The distribution delivers two Docker images: CMS - Image that bundles WebSight CMS with your application Nginx - An HTTP server with your project's configuration A third container runs MongoDB as a default data store for Jackrabbit OAK (the persistence layer used by WebSight CMS). The data store stores content such as pages or assets managed by the CMS. We use Docker Compose to orchestrate containers during local setup. See the environment/local module for details. This illustration shows the runtime environment and roles: Build the instance To build the project, use the Maven command: mvn clean install Add e2e profile to execute end-to-end tests: mvn clean install -P e2e You should see successful end-to-end test execution in the log: Execution should end with a successful build message: Info On some Mac systems, Docker builds may fail with the following error message [ ERROR ] Failed to execute goal io.fabric8:docker-maven-plugin:0.40.1:build ( build-docker-image ) on project ws-linux-box-distribution: Execution build-docker-image of goal io.fabric8:docker-maven-plugin:0.40.1:build failed: No <dockerHost> given, no DOCKER_HOST environment variable, no read/writable '/var/run/docker.sock' or '//./pipe/docker_engine' and no external provider like Docker machine configured -> [ Help 1 ] If this occurs, check the Docker Maven Plugin issue tracker issue for details and available workarounds. Run the instance Once your project build is complete, you can start a local instance by navigating to the environment/local folder and running: docker compose up The resulting instance runs WebSight CMS and your application at http://localhost:8080/ The default login is wsadmin/wsadmin. Published content is available locally at http://localhost/ See README.md in the environment and environment/local folders for additional details about the runtime environment. Instance overview After login, you will be redirected to the Spaces list. In WebSight CMS content is organized in Spaces. The Spaces list shows you the generated application and its associated content using the content module: http://localhost:8080/apps/websight/index.html/content::spaces After clicking on the Space name, the Pages dashboard opens with one page delivered in the initial content. You can manage your pages here and navigate to the Assets dashboard (to manage Assets) or open the Page editor to edit page content from within the CMS: http://localhost:8080/apps/websight/index.html/content/example-project/pages In the Right top corner, you will find an Admin tools menu with links to administration tools. Or, the Admin dashboard can be accessed directly using the following link: http://localhost:8080/apps/admin Next steps Now that you know how to set up a new project using WebSight CMS, consider learning more about the following topics: Application development Components development Dialogs","title":"Project setup"},{"location":"docs/developers/setup/#project-setup","text":"This document provides an introduction to working with WebSight projects. It explains how to configure, build and run a new project using Maven Archetype and Docker. It also describes the contents of the project build and runtime files. Although the specific contents of your project may vary depending on your needs, the sample project described on this page is a useful starting-point for running Web applications using WebSight CMS.","title":"Project setup"},{"location":"docs/developers/setup/#prerequisites","text":"To create and run a project, you will need Java 17 or later, Maven 3.8.5 or later and Docker Desktop . You can check your Java version in most environments with: java -version openjdk 17.0.2 2022-01-18 OpenJDK Runtime Environment Temurin-17.0.2+8 (build 17.0.2+8) OpenJDK 64-Bit Server VM Temurin-17.0.2+8 (build 17.0.2+8, mixed mode) Check your Maven version with: mvn --version Apache Maven 3.8.5 (3599d3414f046de2324203b78ddcf9b5e4388aa0) Check your Docker installation by running: docker --version Docker version 20.10.14","title":"Prerequisites"},{"location":"docs/developers/setup/#generate-a-project","text":"To create a new project, first open a command prompt and cd to the directory where you want to store your project. Next, use a Maven command to create your project, being sure to declare the desired parameters properly. Use the groupId , artifactId , and version parameters to declare Maven artifacts for your project. Use projectName , projectId and package parameters to define technical requirements (such as application resources paths and Docker image names) and the root package for Java code. Use the archetypeVersion parameter to set the archetype version you want to use. You can check the latest version here . Use the cmsVersion parameter to specify the WebSight CMS version that the project should use. Check the WebSight Release Notes to find the latest available version. Example command: mvn archetype:generate \\ -DarchetypeGroupId=pl.ds.websight \\ -DarchetypeArtifactId=websight-cms-ce-project-archetype \\ -DarchetypeVersion=1.4 \\ -DgroupId=my.groupId \\ -DartifactId=my-artifactId \\ -Dversion=1.0.0-SNAPSHOT \\ -DprojectName=\"Example Project\" \\ -DprojectId=example-project \\ -Dpackage=com.example.project \\ -DcmsVersion=1.6.0 The above command creates a project with the following structure: . \u2514\u2500\u2500 my-artifactId \u251c\u2500\u2500 README.md \u251c\u2500\u2500 application \u251c\u2500\u2500 content \u251c\u2500\u2500 distribution \u251c\u2500\u2500 environment \u251c\u2500\u2500 pom.xml \u2514\u2500\u2500 tests","title":"Generate a project"},{"location":"docs/developers/setup/#project-structure","text":"The contents of the project structure we generated above are an example of what you'd typically include when creating a project for a Web application using WebSight CMS. Note in particular the following modules: application - components code and scripts delivered as OSGi bundles backend - CMS elements (pages, templates, components, etc.), Java models and services frontend - frontend project bundled by webpack content - initial content as a JCR vault module (content_package) distribution - project distribution - Sling feature model and Docker images environment - scripts and files used to build environments local - local environment managed by Docker Compose tests - tests used to validate the distribution content - content for end-to-end tests end-to-end - end-to-end tests","title":"Project structure"},{"location":"docs/developers/setup/#distribution-and-environment","text":"It is important to note that the project contains built-in server definitions and configurations. The distribution module is responsible for bundling the application based on the configurations and WebSight CMS modules using Sling Feature Model . It also prepares the required Docker images to run the complete stack. The finalized project build artifacts are immutable Docker images that can be run on local, test, and production environments. Environment-specific configurations can be implemented by injecting system variables. Info It is possible to deploy application modules to running containers without rebuilding the Docker images, but the changes will be lost after each container restart and can be used only for local development. The distribution delivers two Docker images: CMS - Image that bundles WebSight CMS with your application Nginx - An HTTP server with your project's configuration A third container runs MongoDB as a default data store for Jackrabbit OAK (the persistence layer used by WebSight CMS). The data store stores content such as pages or assets managed by the CMS. We use Docker Compose to orchestrate containers during local setup. See the environment/local module for details. This illustration shows the runtime environment and roles:","title":"Distribution and environment"},{"location":"docs/developers/setup/#build-the-instance","text":"To build the project, use the Maven command: mvn clean install Add e2e profile to execute end-to-end tests: mvn clean install -P e2e You should see successful end-to-end test execution in the log: Execution should end with a successful build message: Info On some Mac systems, Docker builds may fail with the following error message [ ERROR ] Failed to execute goal io.fabric8:docker-maven-plugin:0.40.1:build ( build-docker-image ) on project ws-linux-box-distribution: Execution build-docker-image of goal io.fabric8:docker-maven-plugin:0.40.1:build failed: No <dockerHost> given, no DOCKER_HOST environment variable, no read/writable '/var/run/docker.sock' or '//./pipe/docker_engine' and no external provider like Docker machine configured -> [ Help 1 ] If this occurs, check the Docker Maven Plugin issue tracker issue for details and available workarounds.","title":"Build the instance"},{"location":"docs/developers/setup/#run-the-instance","text":"Once your project build is complete, you can start a local instance by navigating to the environment/local folder and running: docker compose up The resulting instance runs WebSight CMS and your application at http://localhost:8080/ The default login is wsadmin/wsadmin. Published content is available locally at http://localhost/ See README.md in the environment and environment/local folders for additional details about the runtime environment.","title":"Run the instance"},{"location":"docs/developers/setup/#instance-overview","text":"After login, you will be redirected to the Spaces list. In WebSight CMS content is organized in Spaces. The Spaces list shows you the generated application and its associated content using the content module: http://localhost:8080/apps/websight/index.html/content::spaces After clicking on the Space name, the Pages dashboard opens with one page delivered in the initial content. You can manage your pages here and navigate to the Assets dashboard (to manage Assets) or open the Page editor to edit page content from within the CMS: http://localhost:8080/apps/websight/index.html/content/example-project/pages In the Right top corner, you will find an Admin tools menu with links to administration tools. Or, the Admin dashboard can be accessed directly using the following link: http://localhost:8080/apps/admin","title":"Instance overview"},{"location":"docs/developers/setup/#next-steps","text":"Now that you know how to set up a new project using WebSight CMS, consider learning more about the following topics: Application development Components development Dialogs","title":"Next steps"},{"location":"docs/quick-start/","text":"Quick Start Guide Follow this guide to run a local instance of WebSight CMS using Docker. The local instance serves as a testing instance where you can check out our demo site Luna . You can also use Howlite , our example components library, to create or update pages within the local instance. This guide is a starting-point for developing custom components for WebSight CMS. After you've mastered the concepts explained on this page, you can move onto our quick start for developers for a deeper dive into components development for WebSight CMS. Prerequisites Before going any further, please make sure you have Docker Desktop installed on your machine. Docker Desktop supports Windows, macOS and Linux. Part A: Run a local instance using Docker Quick setup with curl If you have curl installed, you can set up the local environment using the following command. Then, you can go directly to Part B below. curl https://www.websight.io/scripts/get.sh | sh If this method doesn't work for you, following steps 1 and 2 below to set up the Docker instance manually. 1. Create Docker Compose manifest Paste the content below into a text editor and save it as a file on your hard drive. Name the file docker-compose.yml . docker-compose.yml version : \"3.9\" services : cms : image : public.ecr.aws/ds/websight-cms-starter:1.6.0 ports : - \"8080:8080\" environment : WS_ADMIN_USERNAME : \"wsadmin\" MONGODB_HOST : \"mongo\" MONGODB_PORT : 27017 LEASE_CHECK_MODE : \"LENIENT\" volumes : - cms_logs:/websight/logs - site_repository:/websight/docroot depends_on : - mongo nginx : image : public.ecr.aws/ds/websight-nginx-starter:1.6.0 ports : - \"80:80\" volumes : - site_repository:/usr/share/nginx/html:ro mongo : image : mongo:4.4.6 environment : - MONGO_INITDB_ROOT_USERNAME=mongoadmin - MONGO_INITDB_ROOT_PASSWORD=mongoadmin volumes : - mongo_repository:/data/db volumes : cms_logs : mongo_repository : site_repository : Tip Default passwords are stored in secret files. You can find details about how to change them here . 2. Run the local instance Open the terminal, navigate to the location where you saved your docker-compose.yml file and run the following command: docker compose up A fresh WebSight instance will start within a couple of seconds. After it launches, you can open a Web browser to the URL http://localhost:8080/ to view the WebSight admin panel. Log in with wsadmin username and wsadmin as the password. Tip To turn off the local environment, use the ctrl + c key combination in the terminal that you used to launch your Docker instance. You can restart the instance by repeating the steps you used to launch it initially. Part B: Publish demo site At this point, your local environment is running, but you still need to publish the demo site that is included in the distribution. Do this by following the steps below. 1. Open the Websight admin panel In the local instance, the WebSight admin panel is accessible by navigating to http://localhost:8080/ in a Web browser. Log in with wsadmin username and wsadmin as the password. 2. Select space for the demo site We use Spaces to organise content. In the WebSight admin panel, open the space for the demo site Luna . 3. Publish assets and the demo site Open the list of Assets using the left sidebar. Go to the folder images , select all subfolders and then click Publish . Open the list of Pages using the left sidebar. Select all pages and click Publish . 4. View the demo site Congratulations! The demo site is now available by navigating to http://luna.127.0.0.1.nip.io/ in a Web browser. Additional sample sites The distribution contains other demo sites. We used nip.io to support their preview in a browser (having just one local instance of WebSight CMS). After assets and pages publication, they are available at: http://bulma.127.0.0.1.nip.io/ Bulma - Personal Template http://no-code.luna.127.0.0.1.nip.io/ No Code Luna Part C: Update a page Now that your local demo site is published, you can experiment with making basic changes to pages. As an example, the following steps show how to update the home page for the demo site that is built into WebSight. 1. Open the Websight admin panel The WebSight admin panel runs at http://localhost:8080/ . Log in with wsadmin username and wsadmin as the password. 2. Select space for the demo site We use Spaces to organise content. Please open the space for the demo site Luna . 3. Edit the home page Use the Pencil icon to open the Page editor for the home page. Scroll down the content to the section Custom Made Engagement Rings . Find the Rich text editor on the tab Components and use the drag-and-drop feature to place it just below the section title. Click on the new component to open available actions. Select the Pencil icon to edit properties. Copy & paste the following text on the General tab. Every couple is unique and we want to deliver an engagement ring that is unique too \u2013 taking the tastes of the couple into account. We love having couples visit the store and work with them to create a unique custom engagement ring according to their tastes. 4. Publish changes At this point, you've updated the page. However, unpublished changes are not visible on the site yet. To apply them, open the dropdown in the right corner of the admin interface and select action Publish . 5. View the updated page Congratulations! Your changes should be visible now at http://luna.127.0.0.1.nip.io/ . Next steps This page demonstrated the basics of editing pages with WebSight CMS. As a next step, we encourage you to explore more technical details about WebSight: Howlite library documentation to browse other components available in the distribution; Quick start tutorial for developers to check how to implement custom components. Additional demo sites: Bulma - Personal Template and No Code Luna . They use a library of Bulma components implemented for the WebSight CMS. You can use the collection and build your site without any code development.","title":"Quick Start Guide"},{"location":"docs/quick-start/#quick-start-guide","text":"Follow this guide to run a local instance of WebSight CMS using Docker. The local instance serves as a testing instance where you can check out our demo site Luna . You can also use Howlite , our example components library, to create or update pages within the local instance. This guide is a starting-point for developing custom components for WebSight CMS. After you've mastered the concepts explained on this page, you can move onto our quick start for developers for a deeper dive into components development for WebSight CMS. Prerequisites Before going any further, please make sure you have Docker Desktop installed on your machine. Docker Desktop supports Windows, macOS and Linux.","title":"Quick Start Guide"},{"location":"docs/quick-start/#part-a-run-a-local-instance-using-docker","text":"Quick setup with curl If you have curl installed, you can set up the local environment using the following command. Then, you can go directly to Part B below. curl https://www.websight.io/scripts/get.sh | sh If this method doesn't work for you, following steps 1 and 2 below to set up the Docker instance manually.","title":"Part A: Run a local instance using Docker"},{"location":"docs/quick-start/#1-create-docker-compose-manifest","text":"Paste the content below into a text editor and save it as a file on your hard drive. Name the file docker-compose.yml . docker-compose.yml version : \"3.9\" services : cms : image : public.ecr.aws/ds/websight-cms-starter:1.6.0 ports : - \"8080:8080\" environment : WS_ADMIN_USERNAME : \"wsadmin\" MONGODB_HOST : \"mongo\" MONGODB_PORT : 27017 LEASE_CHECK_MODE : \"LENIENT\" volumes : - cms_logs:/websight/logs - site_repository:/websight/docroot depends_on : - mongo nginx : image : public.ecr.aws/ds/websight-nginx-starter:1.6.0 ports : - \"80:80\" volumes : - site_repository:/usr/share/nginx/html:ro mongo : image : mongo:4.4.6 environment : - MONGO_INITDB_ROOT_USERNAME=mongoadmin - MONGO_INITDB_ROOT_PASSWORD=mongoadmin volumes : - mongo_repository:/data/db volumes : cms_logs : mongo_repository : site_repository : Tip Default passwords are stored in secret files. You can find details about how to change them here .","title":"1. Create Docker Compose manifest"},{"location":"docs/quick-start/#2-run-the-local-instance","text":"Open the terminal, navigate to the location where you saved your docker-compose.yml file and run the following command: docker compose up A fresh WebSight instance will start within a couple of seconds. After it launches, you can open a Web browser to the URL http://localhost:8080/ to view the WebSight admin panel. Log in with wsadmin username and wsadmin as the password. Tip To turn off the local environment, use the ctrl + c key combination in the terminal that you used to launch your Docker instance. You can restart the instance by repeating the steps you used to launch it initially.","title":"2. Run the local instance"},{"location":"docs/quick-start/#part-b-publish-demo-site","text":"At this point, your local environment is running, but you still need to publish the demo site that is included in the distribution. Do this by following the steps below.","title":"Part B: Publish demo site"},{"location":"docs/quick-start/#1-open-the-websight-admin-panel","text":"In the local instance, the WebSight admin panel is accessible by navigating to http://localhost:8080/ in a Web browser. Log in with wsadmin username and wsadmin as the password.","title":"1. Open the Websight admin panel"},{"location":"docs/quick-start/#2-select-space-for-the-demo-site","text":"We use Spaces to organise content. In the WebSight admin panel, open the space for the demo site Luna .","title":"2. Select space for the demo site"},{"location":"docs/quick-start/#3-publish-assets-and-the-demo-site","text":"Open the list of Assets using the left sidebar. Go to the folder images , select all subfolders and then click Publish . Open the list of Pages using the left sidebar. Select all pages and click Publish .","title":"3. Publish assets and the demo site"},{"location":"docs/quick-start/#4-view-the-demo-site","text":"Congratulations! The demo site is now available by navigating to http://luna.127.0.0.1.nip.io/ in a Web browser. Additional sample sites The distribution contains other demo sites. We used nip.io to support their preview in a browser (having just one local instance of WebSight CMS). After assets and pages publication, they are available at: http://bulma.127.0.0.1.nip.io/ Bulma - Personal Template http://no-code.luna.127.0.0.1.nip.io/ No Code Luna","title":"4. View the demo site"},{"location":"docs/quick-start/#part-c-update-a-page","text":"Now that your local demo site is published, you can experiment with making basic changes to pages. As an example, the following steps show how to update the home page for the demo site that is built into WebSight.","title":"Part C: Update a page"},{"location":"docs/quick-start/#1-open-the-websight-admin-panel_1","text":"The WebSight admin panel runs at http://localhost:8080/ . Log in with wsadmin username and wsadmin as the password.","title":"1. Open the Websight admin panel"},{"location":"docs/quick-start/#2-select-space-for-the-demo-site_1","text":"We use Spaces to organise content. Please open the space for the demo site Luna .","title":"2. Select space for the demo site"},{"location":"docs/quick-start/#3-edit-the-home-page","text":"Use the Pencil icon to open the Page editor for the home page. Scroll down the content to the section Custom Made Engagement Rings . Find the Rich text editor on the tab Components and use the drag-and-drop feature to place it just below the section title. Click on the new component to open available actions. Select the Pencil icon to edit properties. Copy & paste the following text on the General tab. Every couple is unique and we want to deliver an engagement ring that is unique too \u2013 taking the tastes of the couple into account. We love having couples visit the store and work with them to create a unique custom engagement ring according to their tastes.","title":"3. Edit the home page"},{"location":"docs/quick-start/#4-publish-changes","text":"At this point, you've updated the page. However, unpublished changes are not visible on the site yet. To apply them, open the dropdown in the right corner of the admin interface and select action Publish .","title":"4. Publish changes"},{"location":"docs/quick-start/#5-view-the-updated-page","text":"Congratulations! Your changes should be visible now at http://luna.127.0.0.1.nip.io/ .","title":"5. View the updated page"},{"location":"docs/quick-start/#next-steps","text":"This page demonstrated the basics of editing pages with WebSight CMS. As a next step, we encourage you to explore more technical details about WebSight: Howlite library documentation to browse other components available in the distribution; Quick start tutorial for developers to check how to implement custom components. Additional demo sites: Bulma - Personal Template and No Code Luna . They use a library of Bulma components implemented for the WebSight CMS. You can use the collection and build your site without any code development.","title":"Next steps"},{"location":"docs/release-notes/websight-cms/","text":"WebSight CMS Release Notes 1.6.0 December 21, 2022 Page Editor Improved collapsing and expanding of the left side panel. Fixed the lack of the scroll for page preview. Fixed the missing indicator when drag-and-drop of a component is not allowed. Admin Tools Fixed #13 - updated keyboard shortcut for script execution. Other Improved UX for the list of spaces. Improved UX for the modal to move/copy pages. 1.5.0 December 7, 2022 Page Editor Improved the placeholder text for empty containers to guide users on how to add components. Fixed issues with overlays for components. Fixed #33 - reduced panel size leads to cropped images thumbnails. Path picker input field: Fixed #19 - updated placeholder text to guide on how to choose a path. Added an arrow to expand the dropdown for selection. Fixed an issue with the rootPath property. 1.4.0 November 23, 2022 Page Editor Added ability to drag-and-drop a component between others included in a container. Added #22 - scrolling the page to a component when the user clicks it in the content tree. Improved UX for the component list. It contains only items allowed for a given page (based on its template). Fixed an issue with misaligned overlays when the user resized the window. Page and Asset Management Added actions in the breadcrumb for assets. Added Edit action in the breadcrumb for pages. Fixed an issue with page creation when the action was interrupted previously. Other Added loading indicator for the Create Space modal. 1.3.0 November 09, 2022 Page Editor Fixed an issue with component drag-and-drop - in some cases component can't be dropped on a selected container. Fixed an issue with the editor layout caused by a faulty component included on a page. Page and Asset Management Fixed #26 - asset preview dropdown is cut off and has no icons. Other Improved UX for the Create Space modal. Added keyboard shortcuts for all modals - submitting changes with Enter / Return and cancelation with Esc , X icon or clicking outside of the modal. 1.2.0 October 26, 2022 Page Editor Improved UX for components drag-and-drop - indicating if the drop is not allowed. Fixed the issue for the Asset Reference input field - impossible to remove image and save empty value. Page and Asset Management Improved messages for asset publication. Fixed the page and assets tree refresh when the current space switched. Admin Tools Fixed #14 and #16 - removed the artificial footer for Package Manager, User Manager, Groovy Console and Swagger Browser. 1.1.0 October 11, 2022 Page Editor Fixed the component dragging indicator. Page and Asset Management Improved assets publication. Publish and unpublish actions include assets in sub-folders. Fixed #24 : assets download has no effect. Fixed the hidden top bar with actions for pages and assets (when scrolling). Other Added HTL cache cleanup after deployment of bundles. 1.0.0 September 28, 2022 First public release of the WebSight CMS Community Edition. See our blog post","title":"WebSight CMS Release Notes"},{"location":"docs/release-notes/websight-cms/#websight-cms-release-notes","text":"","title":"WebSight CMS Release Notes"},{"location":"docs/release-notes/websight-cms/#160-december-21-2022","text":"","title":"1.6.0 December 21, 2022"},{"location":"docs/release-notes/websight-cms/#page-editor","text":"Improved collapsing and expanding of the left side panel. Fixed the lack of the scroll for page preview. Fixed the missing indicator when drag-and-drop of a component is not allowed.","title":"Page Editor"},{"location":"docs/release-notes/websight-cms/#admin-tools","text":"Fixed #13 - updated keyboard shortcut for script execution.","title":"Admin Tools"},{"location":"docs/release-notes/websight-cms/#other","text":"Improved UX for the list of spaces. Improved UX for the modal to move/copy pages.","title":"Other"},{"location":"docs/release-notes/websight-cms/#150-december-7-2022","text":"","title":"1.5.0 December 7, 2022"},{"location":"docs/release-notes/websight-cms/#page-editor_1","text":"Improved the placeholder text for empty containers to guide users on how to add components. Fixed issues with overlays for components. Fixed #33 - reduced panel size leads to cropped images thumbnails. Path picker input field: Fixed #19 - updated placeholder text to guide on how to choose a path. Added an arrow to expand the dropdown for selection. Fixed an issue with the rootPath property.","title":"Page Editor"},{"location":"docs/release-notes/websight-cms/#140-november-23-2022","text":"","title":"1.4.0 November 23, 2022"},{"location":"docs/release-notes/websight-cms/#page-editor_2","text":"Added ability to drag-and-drop a component between others included in a container. Added #22 - scrolling the page to a component when the user clicks it in the content tree. Improved UX for the component list. It contains only items allowed for a given page (based on its template). Fixed an issue with misaligned overlays when the user resized the window.","title":"Page Editor"},{"location":"docs/release-notes/websight-cms/#page-and-asset-management","text":"Added actions in the breadcrumb for assets. Added Edit action in the breadcrumb for pages. Fixed an issue with page creation when the action was interrupted previously.","title":"Page and Asset Management"},{"location":"docs/release-notes/websight-cms/#other_1","text":"Added loading indicator for the Create Space modal.","title":"Other"},{"location":"docs/release-notes/websight-cms/#130-november-09-2022","text":"","title":"1.3.0 November 09, 2022"},{"location":"docs/release-notes/websight-cms/#page-editor_3","text":"Fixed an issue with component drag-and-drop - in some cases component can't be dropped on a selected container. Fixed an issue with the editor layout caused by a faulty component included on a page.","title":"Page Editor"},{"location":"docs/release-notes/websight-cms/#page-and-asset-management_1","text":"Fixed #26 - asset preview dropdown is cut off and has no icons.","title":"Page and Asset Management"},{"location":"docs/release-notes/websight-cms/#other_2","text":"Improved UX for the Create Space modal. Added keyboard shortcuts for all modals - submitting changes with Enter / Return and cancelation with Esc , X icon or clicking outside of the modal.","title":"Other"},{"location":"docs/release-notes/websight-cms/#120-october-26-2022","text":"","title":"1.2.0 October 26, 2022"},{"location":"docs/release-notes/websight-cms/#page-editor_4","text":"Improved UX for components drag-and-drop - indicating if the drop is not allowed. Fixed the issue for the Asset Reference input field - impossible to remove image and save empty value.","title":"Page Editor"},{"location":"docs/release-notes/websight-cms/#page-and-asset-management_2","text":"Improved messages for asset publication. Fixed the page and assets tree refresh when the current space switched.","title":"Page and Asset Management"},{"location":"docs/release-notes/websight-cms/#admin-tools_1","text":"Fixed #14 and #16 - removed the artificial footer for Package Manager, User Manager, Groovy Console and Swagger Browser.","title":"Admin Tools"},{"location":"docs/release-notes/websight-cms/#110-october-11-2022","text":"","title":"1.1.0 October 11, 2022"},{"location":"docs/release-notes/websight-cms/#page-editor_5","text":"Fixed the component dragging indicator.","title":"Page Editor"},{"location":"docs/release-notes/websight-cms/#page-and-asset-management_3","text":"Improved assets publication. Publish and unpublish actions include assets in sub-folders. Fixed #24 : assets download has no effect. Fixed the hidden top bar with actions for pages and assets (when scrolling).","title":"Page and Asset Management"},{"location":"docs/release-notes/websight-cms/#other_3","text":"Added HTL cache cleanup after deployment of bundles.","title":"Other"},{"location":"docs/release-notes/websight-cms/#100-september-28-2022","text":"First public release of the WebSight CMS Community Edition. See our blog post","title":"1.0.0 September 28, 2022"},{"location":"product/cla/corporate/v1/","text":"Dynamic Solutions Software Grant and Corporate Contributor License Agreement In order to clarify the intellectual property license granted with Contributions from any person or entity, Dynamic Solutions sp. z o.o. sp. k. (\"Dynamic Solutions\") must have a Contributor License Agreement (CLA) on file that has been signed by each Contributor, indicating agreement to the license terms below. This license is for your protection as a Contributor as well as the protection of Dynamic Solutions and its users; it does not change your rights to use your own Contributions for any other purpose. This version of the Agreement allows an entity (the \"Corporation\") to submit Contributions to Dynamic Solutions, to authorize Contributions submitted by its designated employees to Dynamic Solutions, and to grant copyright and patent licenses thereto. You accept and agree to the following terms and conditions for Your present and future Contributions submitted to Dynamic Solutions. Except for the license granted herein to Dynamic Solutions and recipients of software distributed by Dynamic Solutions, You reserve all right, title, and interest in and to Your Contributions. Definitions. \"You\" (or \"Your\") shall mean the copyright owner or legal entity authorized by the copyright owner that is making this Agreement with Dynamic Solutions. For legal entities, the entity making a Contribution and all other entities that control, are controlled by, or are under common control with that entity are considered to be a single Contributor. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"Contribution\" shall mean the code, documentation or any original work of authorship, including any modifications or additions to an existing work, that is intentionally submitted by You to Dynamic Solutions for inclusion in, or documentation of, any of the products owned or managed by Dynamic Solutions (the \"Work\"). For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to Dynamic Solutions or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Dynamic Solutions for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by You as \"Not a Contribution.\" Grant of Copyright License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute Your Contributions and such derivative works. Grant of Patent License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by You that are necessarily infringed by Your Contribution(s) alone or by combination of Your Contribution(s) with the Work to which such Contribution(s) was submitted. If any entity institutes patent litigation against You or any other entity (including a cross-claim or counterclaim in a lawsuit) alleging that your Contribution, or the Work to which you have contributed, constitutes direct or contributory patent infringement, then any patent licenses granted to that entity under this Agreement for that Contribution or Work shall terminate as of the date such litigation is filed. You represent that You are legally entitled to grant the above license. You represent further that each employee of the Corporation designated by You is authorized to submit Contributions on behalf of the Corporation. You represent that each of Your Contributions is Your original creation (see section 7 for submissions on behalf of others). You are not expected to provide support for Your Contributions, except to the extent You desire to provide support. You may provide support for free, for a fee, or not at all. Unless required by applicable law or agreed to in writing, You provide Your Contributions on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. Should You wish to submit work that is not Your original creation, You may submit it to Dynamic Solutions separately from any Contribution, identifying the complete details of its source and of any license or other restriction (including, but not limited to, related patents, trademarks, and license agreements) of which you are personally aware, and conspicuously marking the work as \"Submitted on behalf of a third-party: [named here]\". It is your responsibility to notify Dynamic Solutions when any change is required to the list of designated employees authorized to submit Contributions on behalf of the Corporation, or to the Corporation's Point of Contact with Dynamic Solutions.","title":"Dynamic Solutions Software Grant and Corporate Contributor License Agreement"},{"location":"product/cla/corporate/v1/#dynamic-solutions-software-grant-and-corporate-contributor-license-agreement","text":"In order to clarify the intellectual property license granted with Contributions from any person or entity, Dynamic Solutions sp. z o.o. sp. k. (\"Dynamic Solutions\") must have a Contributor License Agreement (CLA) on file that has been signed by each Contributor, indicating agreement to the license terms below. This license is for your protection as a Contributor as well as the protection of Dynamic Solutions and its users; it does not change your rights to use your own Contributions for any other purpose. This version of the Agreement allows an entity (the \"Corporation\") to submit Contributions to Dynamic Solutions, to authorize Contributions submitted by its designated employees to Dynamic Solutions, and to grant copyright and patent licenses thereto. You accept and agree to the following terms and conditions for Your present and future Contributions submitted to Dynamic Solutions. Except for the license granted herein to Dynamic Solutions and recipients of software distributed by Dynamic Solutions, You reserve all right, title, and interest in and to Your Contributions. Definitions. \"You\" (or \"Your\") shall mean the copyright owner or legal entity authorized by the copyright owner that is making this Agreement with Dynamic Solutions. For legal entities, the entity making a Contribution and all other entities that control, are controlled by, or are under common control with that entity are considered to be a single Contributor. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"Contribution\" shall mean the code, documentation or any original work of authorship, including any modifications or additions to an existing work, that is intentionally submitted by You to Dynamic Solutions for inclusion in, or documentation of, any of the products owned or managed by Dynamic Solutions (the \"Work\"). For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to Dynamic Solutions or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Dynamic Solutions for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by You as \"Not a Contribution.\" Grant of Copyright License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute Your Contributions and such derivative works. Grant of Patent License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by You that are necessarily infringed by Your Contribution(s) alone or by combination of Your Contribution(s) with the Work to which such Contribution(s) was submitted. If any entity institutes patent litigation against You or any other entity (including a cross-claim or counterclaim in a lawsuit) alleging that your Contribution, or the Work to which you have contributed, constitutes direct or contributory patent infringement, then any patent licenses granted to that entity under this Agreement for that Contribution or Work shall terminate as of the date such litigation is filed. You represent that You are legally entitled to grant the above license. You represent further that each employee of the Corporation designated by You is authorized to submit Contributions on behalf of the Corporation. You represent that each of Your Contributions is Your original creation (see section 7 for submissions on behalf of others). You are not expected to provide support for Your Contributions, except to the extent You desire to provide support. You may provide support for free, for a fee, or not at all. Unless required by applicable law or agreed to in writing, You provide Your Contributions on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. Should You wish to submit work that is not Your original creation, You may submit it to Dynamic Solutions separately from any Contribution, identifying the complete details of its source and of any license or other restriction (including, but not limited to, related patents, trademarks, and license agreements) of which you are personally aware, and conspicuously marking the work as \"Submitted on behalf of a third-party: [named here]\". It is your responsibility to notify Dynamic Solutions when any change is required to the list of designated employees authorized to submit Contributions on behalf of the Corporation, or to the Corporation's Point of Contact with Dynamic Solutions.","title":"Dynamic Solutions Software Grant and Corporate Contributor License Agreement"},{"location":"product/cla/individual/v1/","text":"Dynamic Solutions Individual Contributor License Agreement In order to clarify the intellectual property license granted with Contributions from any person or entity, Dynamic Solutions sp. z o.o. sp. k. (\"Dynamic Solutions\") must have a Contributor License Agreement (\"CLA\") on file that has been signed by each Contributor, indicating agreement to the license terms below. This license is for your protection as a Contributor as well as the protection of Dynamic Solutions; it does not change your rights to use your own Contributions for any other purpose. You accept and agree to the following terms and conditions for Your present and future Contributions submitted to Dynamic Solutions. Except for the license granted herein to Dynamic Solutions and recipients of software distributed by Dynamic Solutions, You reserve all right, title, and interest in and to Your Contributions. Definitions. \"You\" (or \"Your\") shall mean the copyright owner or legal entity authorized by the copyright owner that is making this Agreement with Dynamic Solutions. For legal entities, the entity making a Contribution and all other entities that control, are controlled by, or are under common control with that entity are considered to be a single Contributor. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"Contribution\" shall mean any original work of authorship, including any modifications or additions to an existing work, that is intentionally submitted by You to Dynamic Solutions for inclusion in, or documentation of, any of the products owned or managed by Dynamic Solutions (the \"Work\"). For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to Dynamic Solutions or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Dynamic Solutions for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by You as \"Not a Contribution.\" Grant of Copyright License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute Your Contributions and such derivative works. Grant of Patent License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by You that are necessarily infringed by Your Contribution(s) alone or by combination of Your Contribution(s) with the Work to which such Contribution(s) was submitted. If any entity institutes patent litigation against You or any other entity (including a cross-claim or counterclaim in a lawsuit) alleging that your Contribution, or the Work to which you have contributed, constitutes direct or contributory patent infringement, then any patent licenses granted to that entity under this Agreement for that Contribution or Work shall terminate as of the date such litigation is filed. You represent that you are legally entitled to grant the above license. If your employer(s) has rights to intellectual property that you create that includes your Contributions, you represent that you have received permission to make Contributions on behalf of that employer, that your employer has waived such rights for your Contributions to Dynamic Solutions, or that your employer has executed a separate Corporate CLA with Dynamic Solutions. You represent that each of Your Contributions is Your original creation (see section 7 for submissions on behalf of others). You represent that Your Contribution submissions include complete details of any third-party license or other restriction (including, but not limited to, related patents and trademarks) of which you are personally aware and which are associated with any part of Your Contributions. You are not expected to provide support for Your Contributions, except to the extent You desire to provide support. You may provide support for free, for a fee, or not at all. Unless required by applicable law or agreed to in writing, You provide Your Contributions on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON- INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. Should You wish to submit work that is not Your original creation, You may submit it to Dynamic Solutions separately from any Contribution, identifying the complete details of its source and of any license or other restriction (including, but not limited to, related patents, trademarks, and license agreements) of which you are personally aware, and conspicuously marking the work as \"Submitted on behalf of a third-party: [named here]\". You agree to notify Dynamic Solutions of any facts or circumstances of which you become aware that would make these representations inaccurate in any respect.","title":"Dynamic Solutions Individual Contributor License Agreement"},{"location":"product/cla/individual/v1/#dynamic-solutions-individual-contributor-license-agreement","text":"In order to clarify the intellectual property license granted with Contributions from any person or entity, Dynamic Solutions sp. z o.o. sp. k. (\"Dynamic Solutions\") must have a Contributor License Agreement (\"CLA\") on file that has been signed by each Contributor, indicating agreement to the license terms below. This license is for your protection as a Contributor as well as the protection of Dynamic Solutions; it does not change your rights to use your own Contributions for any other purpose. You accept and agree to the following terms and conditions for Your present and future Contributions submitted to Dynamic Solutions. Except for the license granted herein to Dynamic Solutions and recipients of software distributed by Dynamic Solutions, You reserve all right, title, and interest in and to Your Contributions. Definitions. \"You\" (or \"Your\") shall mean the copyright owner or legal entity authorized by the copyright owner that is making this Agreement with Dynamic Solutions. For legal entities, the entity making a Contribution and all other entities that control, are controlled by, or are under common control with that entity are considered to be a single Contributor. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"Contribution\" shall mean any original work of authorship, including any modifications or additions to an existing work, that is intentionally submitted by You to Dynamic Solutions for inclusion in, or documentation of, any of the products owned or managed by Dynamic Solutions (the \"Work\"). For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to Dynamic Solutions or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Dynamic Solutions for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by You as \"Not a Contribution.\" Grant of Copyright License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, sublicense, and distribute Your Contributions and such derivative works. Grant of Patent License. Subject to the terms and conditions of this Agreement, You hereby grant to Dynamic Solutions and to recipients of software distributed by Dynamic Solutions a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by You that are necessarily infringed by Your Contribution(s) alone or by combination of Your Contribution(s) with the Work to which such Contribution(s) was submitted. If any entity institutes patent litigation against You or any other entity (including a cross-claim or counterclaim in a lawsuit) alleging that your Contribution, or the Work to which you have contributed, constitutes direct or contributory patent infringement, then any patent licenses granted to that entity under this Agreement for that Contribution or Work shall terminate as of the date such litigation is filed. You represent that you are legally entitled to grant the above license. If your employer(s) has rights to intellectual property that you create that includes your Contributions, you represent that you have received permission to make Contributions on behalf of that employer, that your employer has waived such rights for your Contributions to Dynamic Solutions, or that your employer has executed a separate Corporate CLA with Dynamic Solutions. You represent that each of Your Contributions is Your original creation (see section 7 for submissions on behalf of others). You represent that Your Contribution submissions include complete details of any third-party license or other restriction (including, but not limited to, related patents and trademarks) of which you are personally aware and which are associated with any part of Your Contributions. You are not expected to provide support for Your Contributions, except to the extent You desire to provide support. You may provide support for free, for a fee, or not at all. Unless required by applicable law or agreed to in writing, You provide Your Contributions on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON- INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. Should You wish to submit work that is not Your original creation, You may submit it to Dynamic Solutions separately from any Contribution, identifying the complete details of its source and of any license or other restriction (including, but not limited to, related patents, trademarks, and license agreements) of which you are personally aware, and conspicuously marking the work as \"Submitted on behalf of a third-party: [named here]\". You agree to notify Dynamic Solutions of any facts or circumstances of which you become aware that would make these representations inaccurate in any respect.","title":"Dynamic Solutions Individual Contributor License Agreement"},{"location":"terms-of-use/","text":"Terms of Use Service Agreement Subject to your complying with the terms hereof, Dynamic Solutions hereby grants you a limited, non-exclusive, non-transferable, non-sublicensable license during the applicable Subscription Term to download, install and use the Service for personal, educational, and commercial purposes. If any part of the Service contains or utilizes Open Source Software then such Open Source Software is distributed or made available under the terms of the open source license agreements referenced in the applicable distribution or the applicable help, notices, about or source files. Copyrights and other proprietary rights to the Open Source Software are held by the copyright holders identified in the applicable distribution or the applicable help, notices, about or source files. BY INSTALLING, DOWNLOADING, OR OTHERWISE ACCESSING THE SERVICE YOU EXPRESSLY ACCEPT AND AGREE TO THE TERMS OF THIS AGREEMENT. IF YOU ARE AN INDIVIDUAL AGREEING TO THE TERMS OF THIS AGREEMENT ON BEHALF OF AN ENTITY, SUCH AS YOUR EMPLOYER, YOU REPRESENT THAT YOU HAVE THE LEGAL AUTHORITY TO BIND THAT ENTITY. IF YOU DO NOT HAVE SUCH AUTHORITY, OR IF YOU DO NOT AGREE WITH THE TERMS OF THIS AGREEMENT, YOU MAY NOT USE THE SERVICE EITHER YOURSELF OR ON BEHALF OF THE ENTITY. THE LICENSED WORK IS PROVIDED ON AN \u201cAS IS\u201d BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND TITLE Licenses Copyright (c) 2019-present Dynamic Solutions sp. z o.o. sp. k. ( Dynamic Solutions ) Portions of the WebSight software are licensed as follows: All projects hosted on WebSight-io GitHub are licensed under the license defined in LICENSE file in the project root directory. If the file does not exist, the fallback license is Apache-2.0 Closed source projects hosted on internal Dynamic Solutions repositories are licensed under Dynamic Solutions License Modules which are not developed by Dynamic Solutions are a part of the Apache Sling Project , therefore are licensed under Apache-2.0 compatible licenses. Note Dynamic Solutions is in the process of adopting Business Source License (BSL 1.1) for the remaining internal modules. Our goal is to standarize licensing model with full access to the project source code. To get a commercial offering/support use Contact Us form","title":"Terms of Use"},{"location":"terms-of-use/#terms-of-use","text":"","title":"Terms of Use"},{"location":"terms-of-use/#service-agreement","text":"Subject to your complying with the terms hereof, Dynamic Solutions hereby grants you a limited, non-exclusive, non-transferable, non-sublicensable license during the applicable Subscription Term to download, install and use the Service for personal, educational, and commercial purposes. If any part of the Service contains or utilizes Open Source Software then such Open Source Software is distributed or made available under the terms of the open source license agreements referenced in the applicable distribution or the applicable help, notices, about or source files. Copyrights and other proprietary rights to the Open Source Software are held by the copyright holders identified in the applicable distribution or the applicable help, notices, about or source files. BY INSTALLING, DOWNLOADING, OR OTHERWISE ACCESSING THE SERVICE YOU EXPRESSLY ACCEPT AND AGREE TO THE TERMS OF THIS AGREEMENT. IF YOU ARE AN INDIVIDUAL AGREEING TO THE TERMS OF THIS AGREEMENT ON BEHALF OF AN ENTITY, SUCH AS YOUR EMPLOYER, YOU REPRESENT THAT YOU HAVE THE LEGAL AUTHORITY TO BIND THAT ENTITY. IF YOU DO NOT HAVE SUCH AUTHORITY, OR IF YOU DO NOT AGREE WITH THE TERMS OF THIS AGREEMENT, YOU MAY NOT USE THE SERVICE EITHER YOURSELF OR ON BEHALF OF THE ENTITY. THE LICENSED WORK IS PROVIDED ON AN \u201cAS IS\u201d BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND TITLE","title":"Service Agreement"},{"location":"terms-of-use/#licenses","text":"Copyright (c) 2019-present Dynamic Solutions sp. z o.o. sp. k. ( Dynamic Solutions ) Portions of the WebSight software are licensed as follows: All projects hosted on WebSight-io GitHub are licensed under the license defined in LICENSE file in the project root directory. If the file does not exist, the fallback license is Apache-2.0 Closed source projects hosted on internal Dynamic Solutions repositories are licensed under Dynamic Solutions License Modules which are not developed by Dynamic Solutions are a part of the Apache Sling Project , therefore are licensed under Apache-2.0 compatible licenses.","title":"Licenses"},{"location":"terms-of-use/#note","text":"Dynamic Solutions is in the process of adopting Business Source License (BSL 1.1) for the remaining internal modules. Our goal is to standarize licensing model with full access to the project source code. To get a commercial offering/support use Contact Us form","title":"Note"}]}